"atan2", "Arc tangent of two variables<BR>   Description<br />
         float     ( float $y     , float $x     )<br />
        This function calculates the arc tangent of the two variables    x and y.  It is    similar to calculating the arc tangent of    y / x, except that    the signs of both arguments are used to determine the quadrant of    the result.   <br />
       The function returns the result in radians, which is between -PI    and PI (inclusive).   <br />
  <BR>   Parameters<br />
                    y<br />
                       Dividend parameter       <br />
      <br />
                  x<br />
                       Divisor parameter       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       The arc tangent of y/x     in radians.   <br />
  <BR>" 
"ftp_nlist", "Arc tangent of two variables<BR>   Description<br />
         float     ( float $y     , float $x     )<br />
        This function calculates the arc tangent of the two variables    x and y.  It is    similar to calculating the arc tangent of    y / x, except that    the signs of both arguments are used to determine the quadrant of    the result.   <br />
       The function returns the result in radians, which is between -PI    and PI (inclusive).   <br />
  <BR>   Parameters<br />
                    y<br />
                       Dividend parameter       <br />
      <br />
                  x<br />
                       Divisor parameter       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       The arc tangent of y/x     in radians.   <br />
  <BR>Returns a list of files in the given directory<BR>   Description<br />
       array    ( resource $ftp_stream    , string $directory    )<br />
   <BR>   Parameters<br />
                    ftp_stream<br />
                       The link identifier of the FTP connection.       <br />
      <br />
                  directory<br />
                       The directory to be listed. This parameter can also include arguments, eg.       $conn_id, &quot;-la /your/dir&quot;);        Note that this parameter isn&#039;t escaped so there may be some issues with        filenames containing spaces and other characters.        <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns an array of filenames from the specified directory on success or    FALSE on error.   <br />
  <BR>" 
"register_shutdown_function", "Arc tangent of two variables<BR>   Description<br />
         float     ( float $y     , float $x     )<br />
        This function calculates the arc tangent of the two variables    x and y.  It is    similar to calculating the arc tangent of    y / x, except that    the signs of both arguments are used to determine the quadrant of    the result.   <br />
       The function returns the result in radians, which is between -PI    and PI (inclusive).   <br />
  <BR>   Parameters<br />
                    y<br />
                       Dividend parameter       <br />
      <br />
                  x<br />
                       Divisor parameter       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       The arc tangent of y/x     in radians.   <br />
  <BR>Returns a list of files in the given directory<BR>   Description<br />
       array    ( resource $ftp_stream    , string $directory    )<br />
   <BR>   Parameters<br />
                    ftp_stream<br />
                       The link identifier of the FTP connection.       <br />
      <br />
                  directory<br />
                       The directory to be listed. This parameter can also include arguments, eg.       $conn_id, &quot;-la /your/dir&quot;);        Note that this parameter isn&#039;t escaped so there may be some issues with        filenames containing spaces and other characters.        <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns an array of filenames from the specified directory on success or    FALSE on error.   <br />
  <BR>Register a function for execution on shutdown<BR>   Description<br />
       void    ( callable $callback    [, mixed $parameter    [, mixed $...   ]] )<br />
        Registers a callback to be executed after script    execution finishes or exit() is called.   <br />
       Multiple calls to) can be    made, and each will be called in the same order as they were registered.    If you call exit() within one registered shutdown    function, processing will stop completely and no other registered    shutdown functions will be called.   <br />
  <BR>   Parameters<br />
                    callback<br />
                       The shutdown callback to register.       <br />
               The shutdown callbacks are executed as the part of the request, so        it&#039;s possible to send output from them and access output buffers.       <br />
      <br />
                  parameter<br />
                       It is possible to pass parameters to the shutdown function by passing        additional parameters.       <br />
      <br />
                  ...<br />
                      <br />
      <br />
              <br />
  <BR>   Return Values<br />
       No value is returned.   <br />
  <BR>" 
"openssl_x509_checkpurpose", "Arc tangent of two variables<BR>   Description<br />
         float     ( float $y     , float $x     )<br />
        This function calculates the arc tangent of the two variables    x and y.  It is    similar to calculating the arc tangent of    y / x, except that    the signs of both arguments are used to determine the quadrant of    the result.   <br />
       The function returns the result in radians, which is between -PI    and PI (inclusive).   <br />
  <BR>   Parameters<br />
                    y<br />
                       Dividend parameter       <br />
      <br />
                  x<br />
                       Divisor parameter       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       The arc tangent of y/x     in radians.   <br />
  <BR>Returns a list of files in the given directory<BR>   Description<br />
       array    ( resource $ftp_stream    , string $directory    )<br />
   <BR>   Parameters<br />
                    ftp_stream<br />
                       The link identifier of the FTP connection.       <br />
      <br />
                  directory<br />
                       The directory to be listed. This parameter can also include arguments, eg.       $conn_id, &quot;-la /your/dir&quot;);        Note that this parameter isn&#039;t escaped so there may be some issues with        filenames containing spaces and other characters.        <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns an array of filenames from the specified directory on success or    FALSE on error.   <br />
  <BR>Register a function for execution on shutdown<BR>   Description<br />
       void    ( callable $callback    [, mixed $parameter    [, mixed $...   ]] )<br />
        Registers a callback to be executed after script    execution finishes or exit() is called.   <br />
       Multiple calls to) can be    made, and each will be called in the same order as they were registered.    If you call exit() within one registered shutdown    function, processing will stop completely and no other registered    shutdown functions will be called.   <br />
  <BR>   Parameters<br />
                    callback<br />
                       The shutdown callback to register.       <br />
               The shutdown callbacks are executed as the part of the request, so        it&#039;s possible to send output from them and access output buffers.       <br />
      <br />
                  parameter<br />
                       It is possible to pass parameters to the shutdown function by passing        additional parameters.       <br />
      <br />
                  ...<br />
                      <br />
      <br />
              <br />
  <BR>   Return Values<br />
       No value is returned.   <br />
  <BR>Verifies if a certificate can be used for a particular purpose<BR>   Description<br />
       int    ( mixed $x509cert    , int $purpose    [, array $cainfo = array()    [, string $untrustedfile   ]] )<br />
       ) examines a certificate to    see if it can be used for the specified purpose.   <br />
  <BR>   Parameters<br />
                    x509cert<br />
                       The examined certificate.       <br />
      <br />
                  purpose<br />
                               ) purposes                                          Constant            Description                                                        X509_PURPOSE_SSL_CLIENT            Can the certificate be used for the client side of an SSL            connection?                                   X509_PURPOSE_SSL_SERVER            Can the certificate be used for the server side of an SSL            connection?                                   X509_PURPOSE_NS_SSL_SERVER            Can the cert be used for Netscape SSL server?                                   X509_PURPOSE_SMIME_SIGN            Can the cert be used to sign S/MIME email?                                   X509_PURPOSE_SMIME_ENCRYPT            Can the cert be used to encrypt S/MIME email?                                   X509_PURPOSE_CRL_SIGN            Can the cert be used to sign a certificate revocation list            (CRL)?                                   X509_PURPOSE_ANY            Can the cert be used for Any/All purposes?                                                These options are not bitfields - you may specify one only!       <br />
      <br />
                  cainfo<br />
                       cainfo should be an array of trusted CA files/dirs        as described in Certificate        Verification.       <br />
      <br />
                  untrustedfile<br />
                       If specified, this should be the name of a PEM encoded file holding        certificates that can be used to help verify the certificate, although        no trust is placed in the certificates that come from that file.       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns TRUE if the certificate can be used for the intended purpose,    FALSE if it cannot, or -1 on error.   <br />
  <BR>" 
"openssl_sign", "Arc tangent of two variables<BR>   Description<br />
         float     ( float $y     , float $x     )<br />
        This function calculates the arc tangent of the two variables    x and y.  It is    similar to calculating the arc tangent of    y / x, except that    the signs of both arguments are used to determine the quadrant of    the result.   <br />
       The function returns the result in radians, which is between -PI    and PI (inclusive).   <br />
  <BR>   Parameters<br />
                    y<br />
                       Dividend parameter       <br />
      <br />
                  x<br />
                       Divisor parameter       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       The arc tangent of y/x     in radians.   <br />
  <BR>Returns a list of files in the given directory<BR>   Description<br />
       array    ( resource $ftp_stream    , string $directory    )<br />
   <BR>   Parameters<br />
                    ftp_stream<br />
                       The link identifier of the FTP connection.       <br />
      <br />
                  directory<br />
                       The directory to be listed. This parameter can also include arguments, eg.       $conn_id, &quot;-la /your/dir&quot;);        Note that this parameter isn&#039;t escaped so there may be some issues with        filenames containing spaces and other characters.        <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns an array of filenames from the specified directory on success or    FALSE on error.   <br />
  <BR>Register a function for execution on shutdown<BR>   Description<br />
       void    ( callable $callback    [, mixed $parameter    [, mixed $...   ]] )<br />
        Registers a callback to be executed after script    execution finishes or exit() is called.   <br />
       Multiple calls to) can be    made, and each will be called in the same order as they were registered.    If you call exit() within one registered shutdown    function, processing will stop completely and no other registered    shutdown functions will be called.   <br />
  <BR>   Parameters<br />
                    callback<br />
                       The shutdown callback to register.       <br />
               The shutdown callbacks are executed as the part of the request, so        it&#039;s possible to send output from them and access output buffers.       <br />
      <br />
                  parameter<br />
                       It is possible to pass parameters to the shutdown function by passing        additional parameters.       <br />
      <br />
                  ...<br />
                      <br />
      <br />
              <br />
  <BR>   Return Values<br />
       No value is returned.   <br />
  <BR>Verifies if a certificate can be used for a particular purpose<BR>   Description<br />
       int    ( mixed $x509cert    , int $purpose    [, array $cainfo = array()    [, string $untrustedfile   ]] )<br />
       ) examines a certificate to    see if it can be used for the specified purpose.   <br />
  <BR>   Parameters<br />
                    x509cert<br />
                       The examined certificate.       <br />
      <br />
                  purpose<br />
                               ) purposes                                          Constant            Description                                                        X509_PURPOSE_SSL_CLIENT            Can the certificate be used for the client side of an SSL            connection?                                   X509_PURPOSE_SSL_SERVER            Can the certificate be used for the server side of an SSL            connection?                                   X509_PURPOSE_NS_SSL_SERVER            Can the cert be used for Netscape SSL server?                                   X509_PURPOSE_SMIME_SIGN            Can the cert be used to sign S/MIME email?                                   X509_PURPOSE_SMIME_ENCRYPT            Can the cert be used to encrypt S/MIME email?                                   X509_PURPOSE_CRL_SIGN            Can the cert be used to sign a certificate revocation list            (CRL)?                                   X509_PURPOSE_ANY            Can the cert be used for Any/All purposes?                                                These options are not bitfields - you may specify one only!       <br />
      <br />
                  cainfo<br />
                       cainfo should be an array of trusted CA files/dirs        as described in Certificate        Verification.       <br />
      <br />
                  untrustedfile<br />
                       If specified, this should be the name of a PEM encoded file holding        certificates that can be used to help verify the certificate, although        no trust is placed in the certificates that come from that file.       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns TRUE if the certificate can be used for the intended purpose,    FALSE if it cannot, or -1 on error.   <br />
  <BR>Generate signature<BR>   Description<br />
       bool    ( string $data    , string &$signature    , mixed $priv_key_id    [, mixed $signature_alg = OPENSSL_ALGO_SHA1   ] )<br />
       ) computes a signature for the    specified data by generating a cryptographic    digital signature using the private key associated with    priv_key_id. Note that the data itself is    not encrypted.   <br />
  <BR>   Parameters<br />
                    data<br />
                       The string of data you wish to sign       <br />
      <br />
                  signature<br />
                       If the call was successful the signature is returned in        signature.       <br />
      <br />
                  priv_key_id<br />
                       resource - a key, returned by openssl_get_privatekey()       <br />
               string - a PEM formatted key       <br />
      <br />
                  signature_alg<br />
                       int - one of these Signature Algorithms.       <br />
               string - a valid string returned by openssl_get_md_methods() example, &quot;sha256WithRSAEncryption&quot; or &quot;sha384&quot;.       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns TRUE on success or FALSE on failure.   <br />
  <BR>" 
"preg_last_error", "Arc tangent of two variables<BR>   Description<br />
         float     ( float $y     , float $x     )<br />
        This function calculates the arc tangent of the two variables    x and y.  It is    similar to calculating the arc tangent of    y / x, except that    the signs of both arguments are used to determine the quadrant of    the result.   <br />
       The function returns the result in radians, which is between -PI    and PI (inclusive).   <br />
  <BR>   Parameters<br />
                    y<br />
                       Dividend parameter       <br />
      <br />
                  x<br />
                       Divisor parameter       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       The arc tangent of y/x     in radians.   <br />
  <BR>Returns a list of files in the given directory<BR>   Description<br />
       array    ( resource $ftp_stream    , string $directory    )<br />
   <BR>   Parameters<br />
                    ftp_stream<br />
                       The link identifier of the FTP connection.       <br />
      <br />
                  directory<br />
                       The directory to be listed. This parameter can also include arguments, eg.       $conn_id, &quot;-la /your/dir&quot;);        Note that this parameter isn&#039;t escaped so there may be some issues with        filenames containing spaces and other characters.        <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns an array of filenames from the specified directory on success or    FALSE on error.   <br />
  <BR>Register a function for execution on shutdown<BR>   Description<br />
       void    ( callable $callback    [, mixed $parameter    [, mixed $...   ]] )<br />
        Registers a callback to be executed after script    execution finishes or exit() is called.   <br />
       Multiple calls to) can be    made, and each will be called in the same order as they were registered.    If you call exit() within one registered shutdown    function, processing will stop completely and no other registered    shutdown functions will be called.   <br />
  <BR>   Parameters<br />
                    callback<br />
                       The shutdown callback to register.       <br />
               The shutdown callbacks are executed as the part of the request, so        it&#039;s possible to send output from them and access output buffers.       <br />
      <br />
                  parameter<br />
                       It is possible to pass parameters to the shutdown function by passing        additional parameters.       <br />
      <br />
                  ...<br />
                      <br />
      <br />
              <br />
  <BR>   Return Values<br />
       No value is returned.   <br />
  <BR>Verifies if a certificate can be used for a particular purpose<BR>   Description<br />
       int    ( mixed $x509cert    , int $purpose    [, array $cainfo = array()    [, string $untrustedfile   ]] )<br />
       ) examines a certificate to    see if it can be used for the specified purpose.   <br />
  <BR>   Parameters<br />
                    x509cert<br />
                       The examined certificate.       <br />
      <br />
                  purpose<br />
                               ) purposes                                          Constant            Description                                                        X509_PURPOSE_SSL_CLIENT            Can the certificate be used for the client side of an SSL            connection?                                   X509_PURPOSE_SSL_SERVER            Can the certificate be used for the server side of an SSL            connection?                                   X509_PURPOSE_NS_SSL_SERVER            Can the cert be used for Netscape SSL server?                                   X509_PURPOSE_SMIME_SIGN            Can the cert be used to sign S/MIME email?                                   X509_PURPOSE_SMIME_ENCRYPT            Can the cert be used to encrypt S/MIME email?                                   X509_PURPOSE_CRL_SIGN            Can the cert be used to sign a certificate revocation list            (CRL)?                                   X509_PURPOSE_ANY            Can the cert be used for Any/All purposes?                                                These options are not bitfields - you may specify one only!       <br />
      <br />
                  cainfo<br />
                       cainfo should be an array of trusted CA files/dirs        as described in Certificate        Verification.       <br />
      <br />
                  untrustedfile<br />
                       If specified, this should be the name of a PEM encoded file holding        certificates that can be used to help verify the certificate, although        no trust is placed in the certificates that come from that file.       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns TRUE if the certificate can be used for the intended purpose,    FALSE if it cannot, or -1 on error.   <br />
  <BR>Generate signature<BR>   Description<br />
       bool    ( string $data    , string &$signature    , mixed $priv_key_id    [, mixed $signature_alg = OPENSSL_ALGO_SHA1   ] )<br />
       ) computes a signature for the    specified data by generating a cryptographic    digital signature using the private key associated with    priv_key_id. Note that the data itself is    not encrypted.   <br />
  <BR>   Parameters<br />
                    data<br />
                       The string of data you wish to sign       <br />
      <br />
                  signature<br />
                       If the call was successful the signature is returned in        signature.       <br />
      <br />
                  priv_key_id<br />
                       resource - a key, returned by openssl_get_privatekey()       <br />
               string - a PEM formatted key       <br />
      <br />
                  signature_alg<br />
                       int - one of these Signature Algorithms.       <br />
               string - a valid string returned by openssl_get_md_methods() example, &quot;sha256WithRSAEncryption&quot; or &quot;sha384&quot;.       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns TRUE on success or FALSE on failure.   <br />
  <BR>Returns the error code of the last PCRE regex execution<BR>   Description<br />
       int    ( void    )<br />
        Returns the error code of the last PCRE regex execution.   <br />
            Example #1) example<br />
       &lt;?phppreg_match('/(?:\D+|&lt;\d+&gt;)*[!?]/',&nbsp;'foobar&nbsp;foobar&nbsp;foobar');if&nbsp;)&nbsp;==&nbsp;PREG_BACKTRACK_LIMIT_ERROR)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;'Backtrack&nbsp;limit&nbsp;was&nbsp;exhausted!';}?&gt;  <br />
     <br />
      The above example will output:<br />
<br />
       Backtrack limit was exhausted! <br />
re<br />
     <br />
    <br />
   <br />
  <BR>   Return Values<br />
       Returns one of the following constants (explained on their own page):         PREG_NO_ERROR     PREG_INTERNAL_ERROR     PREG_BACKTRACK_LIMIT_ERROR (see also pcre.backtrack_limit)     PREG_RECURSION_LIMIT_ERROR (see also pcre.recursion_limit)     PREG_BAD_UTF8_ERROR     PREG_BAD_UTF8_OFFSET_ERROR (since PHP 5.3.0)     PREG_JIT_STACKLIMIT_ERROR (since PHP 7.0.0)       <br />
  <BR>" 
"readlink", "Arc tangent of two variables<BR>   Description<br />
         float     ( float $y     , float $x     )<br />
        This function calculates the arc tangent of the two variables    x and y.  It is    similar to calculating the arc tangent of    y / x, except that    the signs of both arguments are used to determine the quadrant of    the result.   <br />
       The function returns the result in radians, which is between -PI    and PI (inclusive).   <br />
  <BR>   Parameters<br />
                    y<br />
                       Dividend parameter       <br />
      <br />
                  x<br />
                       Divisor parameter       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       The arc tangent of y/x     in radians.   <br />
  <BR>Returns a list of files in the given directory<BR>   Description<br />
       array    ( resource $ftp_stream    , string $directory    )<br />
   <BR>   Parameters<br />
                    ftp_stream<br />
                       The link identifier of the FTP connection.       <br />
      <br />
                  directory<br />
                       The directory to be listed. This parameter can also include arguments, eg.       $conn_id, &quot;-la /your/dir&quot;);        Note that this parameter isn&#039;t escaped so there may be some issues with        filenames containing spaces and other characters.        <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns an array of filenames from the specified directory on success or    FALSE on error.   <br />
  <BR>Register a function for execution on shutdown<BR>   Description<br />
       void    ( callable $callback    [, mixed $parameter    [, mixed $...   ]] )<br />
        Registers a callback to be executed after script    execution finishes or exit() is called.   <br />
       Multiple calls to) can be    made, and each will be called in the same order as they were registered.    If you call exit() within one registered shutdown    function, processing will stop completely and no other registered    shutdown functions will be called.   <br />
  <BR>   Parameters<br />
                    callback<br />
                       The shutdown callback to register.       <br />
               The shutdown callbacks are executed as the part of the request, so        it&#039;s possible to send output from them and access output buffers.       <br />
      <br />
                  parameter<br />
                       It is possible to pass parameters to the shutdown function by passing        additional parameters.       <br />
      <br />
                  ...<br />
                      <br />
      <br />
              <br />
  <BR>   Return Values<br />
       No value is returned.   <br />
  <BR>Verifies if a certificate can be used for a particular purpose<BR>   Description<br />
       int    ( mixed $x509cert    , int $purpose    [, array $cainfo = array()    [, string $untrustedfile   ]] )<br />
       ) examines a certificate to    see if it can be used for the specified purpose.   <br />
  <BR>   Parameters<br />
                    x509cert<br />
                       The examined certificate.       <br />
      <br />
                  purpose<br />
                               ) purposes                                          Constant            Description                                                        X509_PURPOSE_SSL_CLIENT            Can the certificate be used for the client side of an SSL            connection?                                   X509_PURPOSE_SSL_SERVER            Can the certificate be used for the server side of an SSL            connection?                                   X509_PURPOSE_NS_SSL_SERVER            Can the cert be used for Netscape SSL server?                                   X509_PURPOSE_SMIME_SIGN            Can the cert be used to sign S/MIME email?                                   X509_PURPOSE_SMIME_ENCRYPT            Can the cert be used to encrypt S/MIME email?                                   X509_PURPOSE_CRL_SIGN            Can the cert be used to sign a certificate revocation list            (CRL)?                                   X509_PURPOSE_ANY            Can the cert be used for Any/All purposes?                                                These options are not bitfields - you may specify one only!       <br />
      <br />
                  cainfo<br />
                       cainfo should be an array of trusted CA files/dirs        as described in Certificate        Verification.       <br />
      <br />
                  untrustedfile<br />
                       If specified, this should be the name of a PEM encoded file holding        certificates that can be used to help verify the certificate, although        no trust is placed in the certificates that come from that file.       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns TRUE if the certificate can be used for the intended purpose,    FALSE if it cannot, or -1 on error.   <br />
  <BR>Generate signature<BR>   Description<br />
       bool    ( string $data    , string &$signature    , mixed $priv_key_id    [, mixed $signature_alg = OPENSSL_ALGO_SHA1   ] )<br />
       ) computes a signature for the    specified data by generating a cryptographic    digital signature using the private key associated with    priv_key_id. Note that the data itself is    not encrypted.   <br />
  <BR>   Parameters<br />
                    data<br />
                       The string of data you wish to sign       <br />
      <br />
                  signature<br />
                       If the call was successful the signature is returned in        signature.       <br />
      <br />
                  priv_key_id<br />
                       resource - a key, returned by openssl_get_privatekey()       <br />
               string - a PEM formatted key       <br />
      <br />
                  signature_alg<br />
                       int - one of these Signature Algorithms.       <br />
               string - a valid string returned by openssl_get_md_methods() example, &quot;sha256WithRSAEncryption&quot; or &quot;sha384&quot;.       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns TRUE on success or FALSE on failure.   <br />
  <BR>Returns the error code of the last PCRE regex execution<BR>   Description<br />
       int    ( void    )<br />
        Returns the error code of the last PCRE regex execution.   <br />
            Example #1) example<br />
       &lt;?phppreg_match('/(?:\D+|&lt;\d+&gt;)*[!?]/',&nbsp;'foobar&nbsp;foobar&nbsp;foobar');if&nbsp;)&nbsp;==&nbsp;PREG_BACKTRACK_LIMIT_ERROR)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;'Backtrack&nbsp;limit&nbsp;was&nbsp;exhausted!';}?&gt;  <br />
     <br />
      The above example will output:<br />
<br />
       Backtrack limit was exhausted! <br />
re<br />
     <br />
    <br />
   <br />
  <BR>   Return Values<br />
       Returns one of the following constants (explained on their own page):         PREG_NO_ERROR     PREG_INTERNAL_ERROR     PREG_BACKTRACK_LIMIT_ERROR (see also pcre.backtrack_limit)     PREG_RECURSION_LIMIT_ERROR (see also pcre.recursion_limit)     PREG_BAD_UTF8_ERROR     PREG_BAD_UTF8_OFFSET_ERROR (since PHP 5.3.0)     PREG_JIT_STACKLIMIT_ERROR (since PHP 7.0.0)       <br />
  <BR>Returns the target of a symbolic link<BR>   Description<br />
       string    ( string $path    )<br />
       ) does the same as theC function.   <br />
  <BR>   Parameters<br />
                    path<br />
                       The symbolic link path.       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns the contents of the symbolic link path or FALSE on error.   <br />
  <BR>" 
"get_loaded_extensions", "Arc tangent of two variables<BR>   Description<br />
         float     ( float $y     , float $x     )<br />
        This function calculates the arc tangent of the two variables    x and y.  It is    similar to calculating the arc tangent of    y / x, except that    the signs of both arguments are used to determine the quadrant of    the result.   <br />
       The function returns the result in radians, which is between -PI    and PI (inclusive).   <br />
  <BR>   Parameters<br />
                    y<br />
                       Dividend parameter       <br />
      <br />
                  x<br />
                       Divisor parameter       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       The arc tangent of y/x     in radians.   <br />
  <BR>Returns a list of files in the given directory<BR>   Description<br />
       array    ( resource $ftp_stream    , string $directory    )<br />
   <BR>   Parameters<br />
                    ftp_stream<br />
                       The link identifier of the FTP connection.       <br />
      <br />
                  directory<br />
                       The directory to be listed. This parameter can also include arguments, eg.       $conn_id, &quot;-la /your/dir&quot;);        Note that this parameter isn&#039;t escaped so there may be some issues with        filenames containing spaces and other characters.        <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns an array of filenames from the specified directory on success or    FALSE on error.   <br />
  <BR>Register a function for execution on shutdown<BR>   Description<br />
       void    ( callable $callback    [, mixed $parameter    [, mixed $...   ]] )<br />
        Registers a callback to be executed after script    execution finishes or exit() is called.   <br />
       Multiple calls to) can be    made, and each will be called in the same order as they were registered.    If you call exit() within one registered shutdown    function, processing will stop completely and no other registered    shutdown functions will be called.   <br />
  <BR>   Parameters<br />
                    callback<br />
                       The shutdown callback to register.       <br />
               The shutdown callbacks are executed as the part of the request, so        it&#039;s possible to send output from them and access output buffers.       <br />
      <br />
                  parameter<br />
                       It is possible to pass parameters to the shutdown function by passing        additional parameters.       <br />
      <br />
                  ...<br />
                      <br />
      <br />
              <br />
  <BR>   Return Values<br />
       No value is returned.   <br />
  <BR>Verifies if a certificate can be used for a particular purpose<BR>   Description<br />
       int    ( mixed $x509cert    , int $purpose    [, array $cainfo = array()    [, string $untrustedfile   ]] )<br />
       ) examines a certificate to    see if it can be used for the specified purpose.   <br />
  <BR>   Parameters<br />
                    x509cert<br />
                       The examined certificate.       <br />
      <br />
                  purpose<br />
                               ) purposes                                          Constant            Description                                                        X509_PURPOSE_SSL_CLIENT            Can the certificate be used for the client side of an SSL            connection?                                   X509_PURPOSE_SSL_SERVER            Can the certificate be used for the server side of an SSL            connection?                                   X509_PURPOSE_NS_SSL_SERVER            Can the cert be used for Netscape SSL server?                                   X509_PURPOSE_SMIME_SIGN            Can the cert be used to sign S/MIME email?                                   X509_PURPOSE_SMIME_ENCRYPT            Can the cert be used to encrypt S/MIME email?                                   X509_PURPOSE_CRL_SIGN            Can the cert be used to sign a certificate revocation list            (CRL)?                                   X509_PURPOSE_ANY            Can the cert be used for Any/All purposes?                                                These options are not bitfields - you may specify one only!       <br />
      <br />
                  cainfo<br />
                       cainfo should be an array of trusted CA files/dirs        as described in Certificate        Verification.       <br />
      <br />
                  untrustedfile<br />
                       If specified, this should be the name of a PEM encoded file holding        certificates that can be used to help verify the certificate, although        no trust is placed in the certificates that come from that file.       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns TRUE if the certificate can be used for the intended purpose,    FALSE if it cannot, or -1 on error.   <br />
  <BR>Generate signature<BR>   Description<br />
       bool    ( string $data    , string &$signature    , mixed $priv_key_id    [, mixed $signature_alg = OPENSSL_ALGO_SHA1   ] )<br />
       ) computes a signature for the    specified data by generating a cryptographic    digital signature using the private key associated with    priv_key_id. Note that the data itself is    not encrypted.   <br />
  <BR>   Parameters<br />
                    data<br />
                       The string of data you wish to sign       <br />
      <br />
                  signature<br />
                       If the call was successful the signature is returned in        signature.       <br />
      <br />
                  priv_key_id<br />
                       resource - a key, returned by openssl_get_privatekey()       <br />
               string - a PEM formatted key       <br />
      <br />
                  signature_alg<br />
                       int - one of these Signature Algorithms.       <br />
               string - a valid string returned by openssl_get_md_methods() example, &quot;sha256WithRSAEncryption&quot; or &quot;sha384&quot;.       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns TRUE on success or FALSE on failure.   <br />
  <BR>Returns the error code of the last PCRE regex execution<BR>   Description<br />
       int    ( void    )<br />
        Returns the error code of the last PCRE regex execution.   <br />
            Example #1) example<br />
       &lt;?phppreg_match('/(?:\D+|&lt;\d+&gt;)*[!?]/',&nbsp;'foobar&nbsp;foobar&nbsp;foobar');if&nbsp;)&nbsp;==&nbsp;PREG_BACKTRACK_LIMIT_ERROR)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;'Backtrack&nbsp;limit&nbsp;was&nbsp;exhausted!';}?&gt;  <br />
     <br />
      The above example will output:<br />
<br />
       Backtrack limit was exhausted! <br />
re<br />
     <br />
    <br />
   <br />
  <BR>   Return Values<br />
       Returns one of the following constants (explained on their own page):         PREG_NO_ERROR     PREG_INTERNAL_ERROR     PREG_BACKTRACK_LIMIT_ERROR (see also pcre.backtrack_limit)     PREG_RECURSION_LIMIT_ERROR (see also pcre.recursion_limit)     PREG_BAD_UTF8_ERROR     PREG_BAD_UTF8_OFFSET_ERROR (since PHP 5.3.0)     PREG_JIT_STACKLIMIT_ERROR (since PHP 7.0.0)       <br />
  <BR>Returns the target of a symbolic link<BR>   Description<br />
       string    ( string $path    )<br />
       ) does the same as theC function.   <br />
  <BR>   Parameters<br />
                    path<br />
                       The symbolic link path.       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns the contents of the symbolic link path or FALSE on error.   <br />
  <BR>Returns an array with the names of all modules compiled and loaded<BR>   Description<br />
       array    ([ bool $zend_extensions = false   ] )<br />
        This function returns the names of all the modules compiled and    loaded in the PHP interpreter.   <br />
  <BR>   Parameters<br />
                    zend_extensions<br />
                       Only return Zend extensions, if not then regular extensions, like         mysqli are listed. Defaults to FALSE (return regular extensions).       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns an indexed array of all the modules names.   <br />
  <BR>" 
"imagetruecolortopalette", "Arc tangent of two variables<BR>   Description<br />
         float     ( float $y     , float $x     )<br />
        This function calculates the arc tangent of the two variables    x and y.  It is    similar to calculating the arc tangent of    y / x, except that    the signs of both arguments are used to determine the quadrant of    the result.   <br />
       The function returns the result in radians, which is between -PI    and PI (inclusive).   <br />
  <BR>   Parameters<br />
                    y<br />
                       Dividend parameter       <br />
      <br />
                  x<br />
                       Divisor parameter       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       The arc tangent of y/x     in radians.   <br />
  <BR>Returns a list of files in the given directory<BR>   Description<br />
       array    ( resource $ftp_stream    , string $directory    )<br />
   <BR>   Parameters<br />
                    ftp_stream<br />
                       The link identifier of the FTP connection.       <br />
      <br />
                  directory<br />
                       The directory to be listed. This parameter can also include arguments, eg.       $conn_id, &quot;-la /your/dir&quot;);        Note that this parameter isn&#039;t escaped so there may be some issues with        filenames containing spaces and other characters.        <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns an array of filenames from the specified directory on success or    FALSE on error.   <br />
  <BR>Register a function for execution on shutdown<BR>   Description<br />
       void    ( callable $callback    [, mixed $parameter    [, mixed $...   ]] )<br />
        Registers a callback to be executed after script    execution finishes or exit() is called.   <br />
       Multiple calls to) can be    made, and each will be called in the same order as they were registered.    If you call exit() within one registered shutdown    function, processing will stop completely and no other registered    shutdown functions will be called.   <br />
  <BR>   Parameters<br />
                    callback<br />
                       The shutdown callback to register.       <br />
               The shutdown callbacks are executed as the part of the request, so        it&#039;s possible to send output from them and access output buffers.       <br />
      <br />
                  parameter<br />
                       It is possible to pass parameters to the shutdown function by passing        additional parameters.       <br />
      <br />
                  ...<br />
                      <br />
      <br />
              <br />
  <BR>   Return Values<br />
       No value is returned.   <br />
  <BR>Verifies if a certificate can be used for a particular purpose<BR>   Description<br />
       int    ( mixed $x509cert    , int $purpose    [, array $cainfo = array()    [, string $untrustedfile   ]] )<br />
       ) examines a certificate to    see if it can be used for the specified purpose.   <br />
  <BR>   Parameters<br />
                    x509cert<br />
                       The examined certificate.       <br />
      <br />
                  purpose<br />
                               ) purposes                                          Constant            Description                                                        X509_PURPOSE_SSL_CLIENT            Can the certificate be used for the client side of an SSL            connection?                                   X509_PURPOSE_SSL_SERVER            Can the certificate be used for the server side of an SSL            connection?                                   X509_PURPOSE_NS_SSL_SERVER            Can the cert be used for Netscape SSL server?                                   X509_PURPOSE_SMIME_SIGN            Can the cert be used to sign S/MIME email?                                   X509_PURPOSE_SMIME_ENCRYPT            Can the cert be used to encrypt S/MIME email?                                   X509_PURPOSE_CRL_SIGN            Can the cert be used to sign a certificate revocation list            (CRL)?                                   X509_PURPOSE_ANY            Can the cert be used for Any/All purposes?                                                These options are not bitfields - you may specify one only!       <br />
      <br />
                  cainfo<br />
                       cainfo should be an array of trusted CA files/dirs        as described in Certificate        Verification.       <br />
      <br />
                  untrustedfile<br />
                       If specified, this should be the name of a PEM encoded file holding        certificates that can be used to help verify the certificate, although        no trust is placed in the certificates that come from that file.       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns TRUE if the certificate can be used for the intended purpose,    FALSE if it cannot, or -1 on error.   <br />
  <BR>Generate signature<BR>   Description<br />
       bool    ( string $data    , string &$signature    , mixed $priv_key_id    [, mixed $signature_alg = OPENSSL_ALGO_SHA1   ] )<br />
       ) computes a signature for the    specified data by generating a cryptographic    digital signature using the private key associated with    priv_key_id. Note that the data itself is    not encrypted.   <br />
  <BR>   Parameters<br />
                    data<br />
                       The string of data you wish to sign       <br />
      <br />
                  signature<br />
                       If the call was successful the signature is returned in        signature.       <br />
      <br />
                  priv_key_id<br />
                       resource - a key, returned by openssl_get_privatekey()       <br />
               string - a PEM formatted key       <br />
      <br />
                  signature_alg<br />
                       int - one of these Signature Algorithms.       <br />
               string - a valid string returned by openssl_get_md_methods() example, &quot;sha256WithRSAEncryption&quot; or &quot;sha384&quot;.       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns TRUE on success or FALSE on failure.   <br />
  <BR>Returns the error code of the last PCRE regex execution<BR>   Description<br />
       int    ( void    )<br />
        Returns the error code of the last PCRE regex execution.   <br />
            Example #1) example<br />
       &lt;?phppreg_match('/(?:\D+|&lt;\d+&gt;)*[!?]/',&nbsp;'foobar&nbsp;foobar&nbsp;foobar');if&nbsp;)&nbsp;==&nbsp;PREG_BACKTRACK_LIMIT_ERROR)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;'Backtrack&nbsp;limit&nbsp;was&nbsp;exhausted!';}?&gt;  <br />
     <br />
      The above example will output:<br />
<br />
       Backtrack limit was exhausted! <br />
re<br />
     <br />
    <br />
   <br />
  <BR>   Return Values<br />
       Returns one of the following constants (explained on their own page):         PREG_NO_ERROR     PREG_INTERNAL_ERROR     PREG_BACKTRACK_LIMIT_ERROR (see also pcre.backtrack_limit)     PREG_RECURSION_LIMIT_ERROR (see also pcre.recursion_limit)     PREG_BAD_UTF8_ERROR     PREG_BAD_UTF8_OFFSET_ERROR (since PHP 5.3.0)     PREG_JIT_STACKLIMIT_ERROR (since PHP 7.0.0)       <br />
  <BR>Returns the target of a symbolic link<BR>   Description<br />
       string    ( string $path    )<br />
       ) does the same as theC function.   <br />
  <BR>   Parameters<br />
                    path<br />
                       The symbolic link path.       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns the contents of the symbolic link path or FALSE on error.   <br />
  <BR>Returns an array with the names of all modules compiled and loaded<BR>   Description<br />
       array    ([ bool $zend_extensions = false   ] )<br />
        This function returns the names of all the modules compiled and    loaded in the PHP interpreter.   <br />
  <BR>   Parameters<br />
                    zend_extensions<br />
                       Only return Zend extensions, if not then regular extensions, like         mysqli are listed. Defaults to FALSE (return regular extensions).       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns an indexed array of all the modules names.   <br />
  <BR>Convert a true color image to a palette image<BR>   Description<br />
       bool    ( resource $image    , bool $dither    , int $ncolors    )<br />
       ) converts a truecolor image    to a palette image. The code for this function was originally drawn from    the Independent JPEG Group library code, which is excellent. The code    has been modified to preserve as much alpha channel information as    possible in the resulting palette, in addition to preserving colors as    well as possible. This does not work as well as might be hoped. It is    usually best to simply produce a truecolor output image instead, which    guarantees the highest output quality.   <br />
  <BR>   Parameters<br />
               image<br />
  An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().<br />
<br />
             dither<br />
                       Indicates if the image should be dithered - if it is TRUE then        dithering will be used which will result in a more speckled image but        with better color approximation.       <br />
      <br />
                  ncolors<br />
                       Sets the maximum number of colors that should be retained in the palette.       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns TRUE on success or FALSE on failure.   <br />
  <BR>" 
"time", "Arc tangent of two variables<BR>   Description<br />
         float     ( float $y     , float $x     )<br />
        This function calculates the arc tangent of the two variables    x and y.  It is    similar to calculating the arc tangent of    y / x, except that    the signs of both arguments are used to determine the quadrant of    the result.   <br />
       The function returns the result in radians, which is between -PI    and PI (inclusive).   <br />
  <BR>   Parameters<br />
                    y<br />
                       Dividend parameter       <br />
      <br />
                  x<br />
                       Divisor parameter       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       The arc tangent of y/x     in radians.   <br />
  <BR>Returns a list of files in the given directory<BR>   Description<br />
       array    ( resource $ftp_stream    , string $directory    )<br />
   <BR>   Parameters<br />
                    ftp_stream<br />
                       The link identifier of the FTP connection.       <br />
      <br />
                  directory<br />
                       The directory to be listed. This parameter can also include arguments, eg.       $conn_id, &quot;-la /your/dir&quot;);        Note that this parameter isn&#039;t escaped so there may be some issues with        filenames containing spaces and other characters.        <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns an array of filenames from the specified directory on success or    FALSE on error.   <br />
  <BR>Register a function for execution on shutdown<BR>   Description<br />
       void    ( callable $callback    [, mixed $parameter    [, mixed $...   ]] )<br />
        Registers a callback to be executed after script    execution finishes or exit() is called.   <br />
       Multiple calls to) can be    made, and each will be called in the same order as they were registered.    If you call exit() within one registered shutdown    function, processing will stop completely and no other registered    shutdown functions will be called.   <br />
  <BR>   Parameters<br />
                    callback<br />
                       The shutdown callback to register.       <br />
               The shutdown callbacks are executed as the part of the request, so        it&#039;s possible to send output from them and access output buffers.       <br />
      <br />
                  parameter<br />
                       It is possible to pass parameters to the shutdown function by passing        additional parameters.       <br />
      <br />
                  ...<br />
                      <br />
      <br />
              <br />
  <BR>   Return Values<br />
       No value is returned.   <br />
  <BR>Verifies if a certificate can be used for a particular purpose<BR>   Description<br />
       int    ( mixed $x509cert    , int $purpose    [, array $cainfo = array()    [, string $untrustedfile   ]] )<br />
       ) examines a certificate to    see if it can be used for the specified purpose.   <br />
  <BR>   Parameters<br />
                    x509cert<br />
                       The examined certificate.       <br />
      <br />
                  purpose<br />
                               ) purposes                                          Constant            Description                                                        X509_PURPOSE_SSL_CLIENT            Can the certificate be used for the client side of an SSL            connection?                                   X509_PURPOSE_SSL_SERVER            Can the certificate be used for the server side of an SSL            connection?                                   X509_PURPOSE_NS_SSL_SERVER            Can the cert be used for Netscape SSL server?                                   X509_PURPOSE_SMIME_SIGN            Can the cert be used to sign S/MIME email?                                   X509_PURPOSE_SMIME_ENCRYPT            Can the cert be used to encrypt S/MIME email?                                   X509_PURPOSE_CRL_SIGN            Can the cert be used to sign a certificate revocation list            (CRL)?                                   X509_PURPOSE_ANY            Can the cert be used for Any/All purposes?                                                These options are not bitfields - you may specify one only!       <br />
      <br />
                  cainfo<br />
                       cainfo should be an array of trusted CA files/dirs        as described in Certificate        Verification.       <br />
      <br />
                  untrustedfile<br />
                       If specified, this should be the name of a PEM encoded file holding        certificates that can be used to help verify the certificate, although        no trust is placed in the certificates that come from that file.       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns TRUE if the certificate can be used for the intended purpose,    FALSE if it cannot, or -1 on error.   <br />
  <BR>Generate signature<BR>   Description<br />
       bool    ( string $data    , string &$signature    , mixed $priv_key_id    [, mixed $signature_alg = OPENSSL_ALGO_SHA1   ] )<br />
       ) computes a signature for the    specified data by generating a cryptographic    digital signature using the private key associated with    priv_key_id. Note that the data itself is    not encrypted.   <br />
  <BR>   Parameters<br />
                    data<br />
                       The string of data you wish to sign       <br />
      <br />
                  signature<br />
                       If the call was successful the signature is returned in        signature.       <br />
      <br />
                  priv_key_id<br />
                       resource - a key, returned by openssl_get_privatekey()       <br />
               string - a PEM formatted key       <br />
      <br />
                  signature_alg<br />
                       int - one of these Signature Algorithms.       <br />
               string - a valid string returned by openssl_get_md_methods() example, &quot;sha256WithRSAEncryption&quot; or &quot;sha384&quot;.       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns TRUE on success or FALSE on failure.   <br />
  <BR>Returns the error code of the last PCRE regex execution<BR>   Description<br />
       int    ( void    )<br />
        Returns the error code of the last PCRE regex execution.   <br />
            Example #1) example<br />
       &lt;?phppreg_match('/(?:\D+|&lt;\d+&gt;)*[!?]/',&nbsp;'foobar&nbsp;foobar&nbsp;foobar');if&nbsp;)&nbsp;==&nbsp;PREG_BACKTRACK_LIMIT_ERROR)&nbsp;{&nbsp;&nbsp;&nbsp;&nbsp;print&nbsp;'Backtrack&nbsp;limit&nbsp;was&nbsp;exhausted!';}?&gt;  <br />
     <br />
      The above example will output:<br />
<br />
       Backtrack limit was exhausted! <br />
re<br />
     <br />
    <br />
   <br />
  <BR>   Return Values<br />
       Returns one of the following constants (explained on their own page):         PREG_NO_ERROR     PREG_INTERNAL_ERROR     PREG_BACKTRACK_LIMIT_ERROR (see also pcre.backtrack_limit)     PREG_RECURSION_LIMIT_ERROR (see also pcre.recursion_limit)     PREG_BAD_UTF8_ERROR     PREG_BAD_UTF8_OFFSET_ERROR (since PHP 5.3.0)     PREG_JIT_STACKLIMIT_ERROR (since PHP 7.0.0)       <br />
  <BR>Returns the target of a symbolic link<BR>   Description<br />
       string    ( string $path    )<br />
       ) does the same as theC function.   <br />
  <BR>   Parameters<br />
                    path<br />
                       The symbolic link path.       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns the contents of the symbolic link path or FALSE on error.   <br />
  <BR>Returns an array with the names of all modules compiled and loaded<BR>   Description<br />
       array    ([ bool $zend_extensions = false   ] )<br />
        This function returns the names of all the modules compiled and    loaded in the PHP interpreter.   <br />
  <BR>   Parameters<br />
                    zend_extensions<br />
                       Only return Zend extensions, if not then regular extensions, like         mysqli are listed. Defaults to FALSE (return regular extensions).       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns an indexed array of all the modules names.   <br />
  <BR>Convert a true color image to a palette image<BR>   Description<br />
       bool    ( resource $image    , bool $dither    , int $ncolors    )<br />
       ) converts a truecolor image    to a palette image. The code for this function was originally drawn from    the Independent JPEG Group library code, which is excellent. The code    has been modified to preserve as much alpha channel information as    possible in the resulting palette, in addition to preserving colors as    well as possible. This does not work as well as might be hoped. It is    usually best to simply produce a truecolor output image instead, which    guarantees the highest output quality.   <br />
  <BR>   Parameters<br />
               image<br />
  An image resource, returned by one of the image creation functions, such as imagecreatetruecolor().<br />
<br />
             dither<br />
                       Indicates if the image should be dithered - if it is TRUE then        dithering will be used which will result in a more speckled image but        with better color approximation.       <br />
      <br />
                  ncolors<br />
                       Sets the maximum number of colors that should be retained in the palette.       <br />
      <br />
              <br />
  <BR>   Return Values<br />
       Returns TRUE on success or FALSE on failure.   <br />
  <BR>Return current Unix timestamp<BR>   Description<br />
       int    ( void    )<br />
        Returns the currentmeasured in the number of seconds since    the Unix Epoch (January 1 1970 00:00:00 GMT).   <br />
  <BR>" 
