"abs", "Absolute value
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    number     ( mixed $number
    )

  
   Returns the NAMEolute value of number. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
number

     

      
       The numeric value to process
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The NAMEolute value of number. If the
   argument number is
   of type float, the return type is also float,
   otherwise it is integer (as float usually has a
   bigger value range than integer).
  
 " 
"acos", "Arc cosine
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    float     ( float $arg
    )

  
   Returns the arc cosine of arg in radians.
  ) is the complementary function of
   cos(), which means that
   a==cosa)) for every value of a that is within
  )' range.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
arg

     

      
       The argument to process
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The arc cosine of arg in radians.
  
 " 
"acosh", "Inverse hyperbolic cosine
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    float     ( float $arg
    )

  
   Returns the inverse hyperbolic cosine of
   arg, i.e. the value whose
   hyperbolic cosine is arg.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
arg

     

      
       The value to process
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The inverse hyperbolic cosine of arg
  
 " 
"addcslashes", "Quote string with slashes in a C style
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   , string $charlist
   )

  
   Returns a string with backslashes before characters that are
   listed in charlist parameter. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The string to be escaped.
      
     

    
    
     
charlist

     

      
       A list of characters to be escaped. If
       charlist contains characters
       \n, \r etc., they are
       converted in C-like style, while other non-alphanumeric characters
       with ASCII codes lower than 32 and higher than 126 converted to
       octal representation.
      
      
       When you define a sequence of characters in the charlist argument
       make sure that you know what characters come between the
       characters that you set as the start and end of the range.
       
        




        

       
       Also, if the first character in a range has a higher ASCII value
       than the second character in the range, no range will be
       constructed.  Only the start, end and period characters will be
       escaped. Use the ord() function to find the
       ASCII value for a character.
       
        




        

       
      
      
       Be careful if you choose to escape characters 0, a, b, f, n, r, t and
       v. They will be converted to \0, \a, \b, \f, \n, \r, \t and \v, all of
       which are predefined escape sequences in C. Many of these sequences are
       also defined in other C-derived languages, including PHP, meaning that
       you may not get the desired result if you use the output of
      ) to generate code in those languages
       with these characters defined in charlist.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the escaped string.
  
 " 
"addslashes", "Quote string with slashes
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   )

  
   Returns a string with backslashes before characters that need to be
   escaped. These characters are single quote ('),
   double quote (&quot;), backslash
   (\) and NUL (the NULL byte).
  
  
   An example use of) is when you're
   entering data into string that is evaluated by PHP. For example,
   O'Reilly is stored in $str, you need to escape
   $str. (e.g.  eval(&quot;echo '&quot;$str).&quot;';&quot;); )
  
  
   To escape database parameters, DBMS specific escape function
   (e.g. mysqli_real_escape_string() for MySQL or
   pg_escape_literal(), pg_escape_string()
   for PostgreSQL) should be used for security reasons.  DBMSes have
   differect escape specification for identifiers (e.g. Table name,
   field name) than parameters. Some DBMS such as PostgreSQL provides
   identifier escape
   function, pg_escape_identifier(), but not all
   DBMS provides identifier escape API. If this is the case, refer to
   your database system manual for proper escaping method.
  
  
   If your DBMS doesn't have an escape function and the DBMS
   uses \ to escape special chars, you might be
   able to use this function only when this escape method is adequate for
   your database. Please note that use
   of) for database parameter escaping
   can be cause of security issues on most databases.
  
  
   The PHP directive 
   magic_quotes_gpc was on by default before
   PHP 5.4, and it essentially ran) on
   all GET, POST, and COOKIE data.  Do not
   use) on strings that have already
   been escaped with
   magic_quotes_gpc as you'll
   then do double escaping.  The function
   get_magic_quotes_gpc() may come in handy for
   checking this.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The string to be escaped.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the escaped string.
  
 " 
"array_change_key_case", "Changes the case of all keys in an array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array
   [, int $case = CASE_LOWER
  ] )

  
   Returns an array with all keys from array lowercased
   or uppercased. Numbered indices are left as is.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The array to work on
      
     

    

    
     
case

     

      
       Either CASE_UPPER or
       CASE_LOWER (default)
      
     

    

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array with its keys lower or uppercased, or FALSE if
   array is not an array.
  
 " 
"array_chunk", "Split an array into chunks
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array
   , int $size
   [, bool $preserve_keys = false
  ] )

  
   Chunks an array into arrays with size elements.
   The last chunk may contain less than size elements.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The array to work on
      
     

    

    
     
size

     

      
       The size of each chunk
      
     

    

    
     
preserve_keys

     

      
       When set to TRUE keys will be preserved.
       Default is FALSE which will reindex the chunk numerically
      
     

    

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a multidimensional numerically indexed array, starting with zero,
   with each dimension containing size elements.
  
 " 
"array_column", "Return the values from a single column in the input array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $input
   , mixed $column_key
   [, mixed $index_key = null
  ] )

  
  ) returns the values from a single column of
   the input, identified by the
   column_key. Optionally, an
   index_key may be provided to index the values in the
   returned array by the values from the index_key
   column of the input array.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
input

     

      
       A multi-dimensional array or an array of objects from which to pull a
       column of values from. If an array of objects is provided, then public
       properties can be directly pulled. In order for protected or private
       properties to be pulled, the class must implement both the
       __get() and __isset() magic
       methods.
      
     

    
    
     
column_key

     

      
       The column of values to return. This value may be an integer key of the
       column you wish to retrieve, or it may be a string key name for an
       associative array or property name. It may also be NULL to return
       complete arrays or objects (this is useful together with
       index_key to reindex the array).
      
     

    
    
     
index_key

     

      
       The column to use as the index/keys for the returned array. This value
       may be the integer key of the column, or it may be the string key name.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of values representing a single column from the input array.
  
 " 
"array_combine", "Creates an array by using one array for keys and another for its values
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $keys
   , array $values
   )

  
   Creates an array by using the values from the
   keys array as keys and the values from the
   values array as the corresponding values.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
keys

     

      
       Array of keys to be used. Illegal values for key will be
       converted to string.
      
     

    

    
     
values

     

      
       Array of values to be used
      
     

    

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the combined array, FALSE if the number of elements
   for each array isn't equal.
  
 " 
"array_count_values", "Counts all the values of an array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array
   )

  
  ) returns an array using
   the values of array as keys and
   their frequency in array as values.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The array of values to count
      
     

    

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an associative array of values from array as
   keys and their count as value.
  
 " 
"array_diff", "Computes the difference of arrays
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array1
   , array $array2
   [, array $...
  ] )

  
   Compares array1 against one or more other arrays and
   returns the values in array1 that are not present in
   any of the other arrays.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array1

     

      
       The array to compare from
      
     

    
    
     
array2

     

      
       An array to compare against
      
     

    
    
     
...

     

      
       More arrays to compare against
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array containing all the entries from
   array1 that are not present in any of the other arrays.
  
 " 
"array_diff_assoc", "Computes the difference of arrays with additional index check
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array1
   , array $array2
   [, array $...
  ] )

  
   Compares array1 against array2 and
   returns the difference. Unlike array_diff() the array
   keys are also used in the comparison.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array1

     

      
       The array to compare from
      
     

    

    
     
array2

     

      
       An array to compare against
      
     

    

    
     
...

     

      
       More arrays to compare against
      
     

    

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array containing all the values from
   array1 that are not present in any of the other arrays.
  
 " 
"array_diff_key", "Computes the difference of arrays using keys for comparison
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array1
   , array $array2
   [, array $...
  ] )

  
   Compares the keys from array1 against the keys
   from array2 and returns the difference.
   This function is like array_diff() except the
   comparison is done on the keys instead of the values.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array1

     

      
       The array to compare from
      
     

    

    
     
array2

     

      
       An array to compare against
      
     

    

    
     
...

     

      
       More arrays to compare against
      
     

    

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array containing all the entries from
   array1 whose keys are not present in any of the
   other arrays.
  
 " 
"array_diff_uassoc", "Computes the difference of arrays with additional index check which is performed by a user supplied callback function
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array1
   , array $array2
   [, array $...
   ], callable $key_compare_func
   )

  
   Compares array1 against array2 and
   returns the difference. Unlike array_diff() the array
   keys are used in the comparison.
  
  
   Unlike array_diff_assoc() an user supplied callback
   function is used for the indices comparison, not internal function.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array1

     

      
       The array to compare from
      
     

    

    
     
array2

     

      
       An array to compare against
      
     

    

    
     
...

     

      
       More arrays to compare against
      
     

    

    
     
key_compare_func

     

      
       The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.
      
      int callback ( mixed $a, mixed $b )

     

    

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array containing all the entries from
   array1 that are not present in any of the other arrays.
  
 " 
"array_diff_ukey", "Computes the difference of arrays using a callback function on the keys for comparison
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array1
   , array $array2
   [, array $...
   ], callable $key_compare_func
   )

  
   Compares the keys from array1 against the keys
   from array2 and returns the difference.
   This function is like array_diff() except the
   comparison is done on the keys instead of the values.
  
  
   Unlike array_diff_key() a user supplied callback
   function is used for the indices comparison, not internal function.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array1

     

      
       The array to compare from
      
     

    

    
     
array2

     

      
       An array to compare against
      
     

    

    
     
...

     

      
       More arrays to compare against
      
     

    

    
     
key_compare_func

     

      
       The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.
      
      int callback ( mixed $a, mixed $b )

     

    

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array containing all the entries from
   array1 that are not present in any of the other arrays.
  
 " 
"array_fill", "Fill an array with values
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( int $start_index
   , int $num
   , mixed $value
   )

  
   Fills an array with
   num entries of the value of the
   value parameter, keys starting at the
   start_index parameter.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
start_index

     

      
       The first index of the returned array.
      
      
       If start_index is negative, 
       the first index of the returned array will be 
       start_index and the following 
       indices will start from zero 
       (see example).
      
     

    

    
     
num

     

      
       Number of elements to insert.
       Must be greater than or equal to zero.
      
     

    

    
     
value

     

      
       Value to use for filling
      
     

    

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the filled array
  
 " 
"array_fill_keys", "Fill an array with values, specifying keys
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $keys
   , mixed $value
   )

  
   Fills an array with the
   value of the value parameter, using the
   values of the keys array as keys.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
keys

     

      
       Array of values that will be used as keys. Illegal values
       for key will be converted to string.
      
     

    

    
     
value

     

      
       Value to use for filling
      
     

    

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the filled array
  
 " 
"array_filter", "Filters elements of an array using a callback function
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array
   [, callable $callback
   [, int $flag = 0
  ]] )

  
   Iterates over each value in the array
   passing them to the callback function.
   If the callback function returns true, the
   current value from array is returned into
   the result array. Array keys are preserved.
  

  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The array to iterate over
      
     

    

    
     
callback

     

      
       The callback function to use
      
      
       If no callback is supplied, all entries of
       array equal to FALSE (see
       converting to
        boolean) will be removed.
      
     

    

    
     
flag

     

      
       Flag determining what arguments are sent to callback:
       
         ARRAY_FILTER_USE_KEY - pass key as the only argument
         to callback instead of the value
        
        
         ARRAY_FILTER_USE_BOTH - pass both value and key as
         arguments to callback instead of the value
        
       

    

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the filtered array.
  
 " 
"array_flip", "Exchanges all keys with their associated values in an array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array
   )

  
  ) returns an array in flip
   order, i.e. keys from array become values and values
   from array become keys.
  
  
   Note that the values of array need to be valid
   keys, i.e. they need to be either integer or
   string. A warning will be emitted if a value has the wrong
   type, and the key/value pair in question will not be included
   in the result.
  
  
   If a value has several occurrences, the latest key will be
   used as its value, and all others will be lost.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       An array of key/value pairs to be flipped.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the flipped array on success and NULL on failure.
  
 " 
"array_intersect", "Computes the intersection of arrays
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array1
   , array $array2
   [, array $...
  ] )

  
  ) returns an array
   containing all the values of array1
   that are present in all the arguments.
   Note that keys are preserved.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array1

     

      
       The array with master values to check.
      
     

    
    
     
array2

     

      
       An array to compare values against.
      
     

    
    
     
...

     

      
       A variable list of arrays to compare.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array containing all of the values in 
   array1 whose values exist in all of the parameters.
  
 " 
"array_intersect_assoc", "Computes the intersection of arrays with additional index check
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array1
   , array $array2
   [, array $...
  ] )

  
  ) returns an array
   containing all the values of array1
   that are present in all the arguments. Note that the keys are used in
   the comparison unlike in array_intersect().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array1

     

      
       The array with master values to check.
      
     

    
    
     
array2

     

      
       An array to compare values against.
      
     

    
    
     
...

     

      
       A variable list of arrays to compare.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an associative array containing all the values in 
   array1 that are present in all of the arguments.
  
 " 
"array_intersect_key", "Computes the intersection of arrays using keys for comparison
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array1
   , array $array2
   [, array $...
  ] )

  
  ) returns an array
   containing all the entries of array1
   which have keys that are present in all the arguments.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array1

     

      
       The array with master keys to check.
      
     

    
    
     
array2

     

      
       An array to compare keys against.
      
     

    
    
     
...

     

      
       A variable list of arrays to compare.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an associative array containing all the entries of 
   array1 which have keys that are present in all
   arguments.
        
 " 
"array_intersect_uassoc", "Computes the intersection of arrays with additional index check, compares indexes by a callback function
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array1
   , array $array2
   [, array $...
   ], callable $key_compare_func
   )

  
  ) returns an array
   containing all the values of array1
   that are present in all the arguments. Note that the keys are used in
   the comparison unlike in array_intersect().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array1

     

      
       Initial array for comparison of the arrays.
      
     

    
    
     
array2

     

      
       First array to compare keys against.
      
     

    
    
     
...

     

      
       Variable list of array arguments to compare values against.
      
     

    
    
     
key_compare_func

     

      
       The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.
      
      int callback ( mixed $a, mixed $b )

     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the values of array1 whose values exist
   in all of the arguments.
  
 " 
"array_intersect_ukey", "Computes the intersection of arrays using a callback function on the keys for comparison
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array1
   , array $array2
   [, array $...
   ], callable $key_compare_func
   )

  
  ) returns an array
   containing all the values of array1
   which have matching keys that are present in all the arguments.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array1

     

      
       Initial array for comparison of the arrays.
      
     

    
    
     
array2

     

      
       First array to compare keys against.
      
     

    
    
     
...

     

      
       Variable list of array arguments to compare keys against.
      
     

    
    
     
key_compare_func

     

      
       The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.
      
      int callback ( mixed $a, mixed $b )

     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the values of array1 whose keys exist
   in all the arguments.
  
 " 
"array_key_exists", "Checks if the given key or index exists in the array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( mixed $key
   , array $array
   )

  
  ) returns TRUE if the
   given key is set in the array.
   key can be any value possible
   for an array index.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
key

     

      
       Value to check.
      
     

    
    
     
array

     

      
       An array with keys to check.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"array_keys", "Return all the keys or a subset of the keys of an array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array
   [, mixed $search_value = null
   [, bool $strict = false
  ]] )

  
  ) returns the keys, numeric and
   string, from the array.
  
  
   If the optional search_value is specified,
   then only the keys for that value are returned. Otherwise, all
   the keys from the array are returned.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       An array containing keys to return.
      
     

    
    
     
search_value

     

      
       If specified, then only keys containing these values are returned.
      
     

    
    
     
strict

     

      
       Determines if strict comparison (===) should be used during the search.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of all the keys in array.
  
 " 
"array_map", "Applies the callback to the elements of the given arrays
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( callable $callback
   , array $array1
   [, array $...
  ] )

  
  ) returns an array containing all
   the elements of array1 after applying the
   callback function to each one.
   The number of parameters that the callback
   function accepts
   should match the number of arrays
   passed to the)
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
callback

     

      
       Callback function to run for each element in each array.
      
     

    
    
     
array1

     

      
       An array to run through the callback function.
      
     

    
    
     
...

     

      
       Variable list of array arguments to run through the
       callback function.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array containing all the elements of array1
   after applying the callback function to each one.
  
 " 
"array_merge", "Merge one or more arrays
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array1
   [, array $...
  ] )

  
   Merges the elements of one or more arrays together so that the values of
   one are appended to the end of the previous one. It returns the resulting
   array.
  
  
   If the input arrays have the same string keys, then the later value for
   that key will overwrite the previous one.  If, however, the arrays
   contain numeric keys, the later value will not overwrite the original value, but will be
   appended.
  
  
   Values in the input array with numeric keys will be renumbered with
   incrementing keys starting from zero in the result array.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array1

     

      
       Initial array to merge.
      
     

    
    
     
...

     

      
       Variable list of arrays to merge.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the resulting array.
  
 " 
"array_merge_recursive", "Merge two or more arrays recursively
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array1
   [, array $...
  ] )

  
  ) merges the elements of
   one or more arrays together so that the values of one are appended
   to the end of the previous one.  It returns the resulting array.
  
  
   If the input arrays have the same string keys, then the values for
   these keys are merged together into an array, and this is done
   recursively, so that if one of the values is an array itself, the
   function will merge it with a corresponding entry in another array
   too. If, however, the arrays have the same numeric key, the later
   value will not overwrite the original value, but will be appended.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array1

     

      
       Initial array to merge.
      
     

    
    
     
...

     

      
       Variable list of arrays to recursively merge.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   An array of values resulted from merging the arguments together.
  
 " 
"array_multisort", "Sort multiple or multi-dimensional arrays
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( array &amp;$array1
   [, mixed $array1_sort_order = SORT_ASC
   [, mixed $array1_sort_flags = SORT_REGULAR
   [, mixed $...
  ]]] )

  
  ) can be used to sort several
   arrays at once, or a multi-dimensional array by one or more
   dimensions.
  
  
   Associative (string) keys will be maintained, but numeric
   keys will be re-indexed.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array1

     

      
       An array being sorted.
      
     

    
    
     
array1_sort_order

     

      
       The order used to sort the previous array argument. Either
       SORT_ASC to sort ascendingly or SORT_DESC
       to sort descendingly.
      
      
       This argument can be swapped with array1_sort_flags
       or omitted entirely, in which case SORT_ASC is assumed.
      
     

    
    
     
array1_sort_flags

     

      
       Sort options for the previous array argument:
      
      
       Sorting type flags:
       
         SORT_REGULAR - compare items normally
         (don't change types)
        
        
         SORT_NUMERIC - compare items numerically
        
        
         SORT_STRING - compare items as strings
        
        
         
          SORT_LOCALE_STRING - compare items as
          strings, based on the current locale. It uses the locale,
          which can be changed using setlocale()
         
        
        
         
          SORT_NATURAL - compare items as strings
          using &quot;natural ordering&quot; like natsort()
         
        
        
         
          SORT_FLAG_CASE - can be combined
          (bitwise OR) with
          SORT_STRING or
          SORT_NATURAL to sort strings case-insensitively
         
        
       
       This argument can be swapped with array1_sort_order
       or omitted entirely, in which case SORT_REGULAR is assumed.
      
     

    
    
     
...

     

      
       More arrays, optionally followed by sort order and flags. Only elements
       corresponding to equivalent elements in previous arrays are compared.
       In other words, the sort is lexicographical.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"array_pad", "Pad array to the specified length with a value
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array
   , int $size
   , mixed $value
   )

  
  ) returns a copy of the
   array padded to size specified by
   size with value
   value. If
   size is positive then the array is
   padded on the right, if it's negative then on the left. If the
   absolute value of size is less than or
   equal to the length of the array then no
   padding takes place.
   It is possible to add at most 1048576 elements at a time.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       Initial array of values to pad.
      
     

    
    
     
size

     

      
       New size of the array.
      
     

    
    
     
value

     

      
       Value to pad if array is less than
       size.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a copy of the array padded to size specified
   by size with value 
   value. If size is 
   positive then the array is padded on the right, if it's negative then 
   on the left. If the absolute value of size is less
   than or equal to the length of the array then no
   padding takes place.
  
 " 
"array_pop", "Pop the element off the end of array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( array &amp;$array
   )

  
  ) pops and returns the last value of
   the array, shortening the
   array by one element.
  
  Note: This function will
reset() the array pointer of the input array after
use.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The array to get the value from.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the last value of array.
   If array is empty (or is not an array),
   NULL will be returned.
  
 " 
"array_product", "Calculate the product of values in an array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   number    ( array $array
   )

  
  ) returns the product of values
   in an array.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The array.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the product as an integer or float.
  
 " 
"array_push", "Push one or more elements onto the end of array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( array &amp;$array
   , mixed $value1
   [, mixed $...
  ] )

  
  ) treats array as a
   stack, and pushes the passed variables onto the end of
   array. The length of array
   increases by the number of variables pushed. Has the same effect as:
   




   

   repeated for each passed value.
  
  Note: 
   
    If you use) to add one element to the
    array it's better to use $array[] =  because in that
    way there is no overhead of calling a function.
   
  
  Note: 
   
   ) will raise a warning if the first
    argument is not an array. This differs from the
    $var[] behaviour where a new array is created.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The input array.
      
     

    
    
     
value1

     

      
       The first value to push onto the end of the array.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the new number of elements in the array.
  
 " 
"array_rand", "Pick one or more random entries out of an array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( array $array
   [, int $num = 1
  ] )

  
   Picks one or more random entries out of an array, and returns the
   key (or keys) of the random entries.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The input array.
      
     

    
    
     
num

     

      
       Specifies how many entries should be picked.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   When picking only one entry,) returns
   the key for a random entry. Otherwise, an array of keys for the random
   entries is returned. This is done so that random keys can be picked
   from the array as well as random values. Trying to pick more elements
   than there are in the array will result in an
   E_WARNING level error, and NULL will be returned.
  
 " 
"array_reduce", "Iteratively reduce the array to a single value using a callback function
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( array $array
   , callable $callback
   [, mixed $initial = NULL
  ] )

  
  ) applies iteratively the
   callback function to the elements of the
   array, so as to reduce the array to
   a single value.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The input array.
      
     

    
    
     
callback

     

      
       mixed callback
        ( mixed $carry
       , mixed $item
       )

      
carry

        

         
          Holds the return value of the previous iteration; in the case of the
          first iteration it instead holds the value of 
          initial.
         
        

       
       
        
item

        

         
          Holds the value of the current iteration.
         
        

       
      

    
    
     
initial

     

      
       If the optional initial is available, it will
       be used at the beginning of the process, or as a final result in case
       the array is empty.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the resulting value.
  
  
   If the array is empty and initial is not passed,
  ) returns NULL.
  
 " 
"array_replace", "Replaces elements from passed arrays into the first array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array1
   , array $array2
   [, array $...
  ] )

  
  ) replaces the values of
   array1 with values having the same keys in each of the following
   arrays. If a key from the first array exists in the second array, its value
   will be replaced by the value from the second array. If the key exists in the
   second array, and not the first, it will be created in the first array.
   If a key only exists in the first array, it will be left as is.
   If several arrays are passed for replacement, they will be processed
   in order, the later arrays overwriting the previous values.
  
  
  ) is not recursive : it will replace
   values in the first array by whatever type is in the second array.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array1

     

      
       The array in which elements are replaced.
      
     

    
    
     
array2

     

      
       The array from which elements will be extracted.
      
     

    
    
     
...

     

      
       More arrays from which elements will be extracted.
       Values from later arrays overwrite the previous values.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array, or NULL if an error occurs.
  
 " 
"array_replace_recursive", "Replaces elements from passed arrays into the first array recursively
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array1
   , array $array2
   [, array $...
  ] )

  
  ) replaces the values of
   array1 with the same values from all the following
   arrays. If a key from the first array exists in the second array, its value
   will be replaced by the value from the second array. If the key exists in the
   second array, and not the first, it will be created in the first array.
   If a key only exists in the first array, it will be left as is. 
   If several arrays are passed for replacement, they will be processed
   in order, the later array overwriting the previous values.
  
  
  ) is recursive : it will recurse into
   arrays and apply the same process to the inner value.
  
  
   When the value in array1 is scalar, it will be replaced
   by the value in array2, may it be scalar or array.
   When the value in array1 and array2
   are both arrays,) will replace
   their respective value recursively.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array1

     

      
       The array in which elements are replaced.
      
     

    
    
     
array2

     

      
       The array from which elements will be extracted.
      
     

    
    
     
...

     

      
       Optional. More arrays from which elements will be extracted.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array, or NULL if an error occurs.
  
 " 
"array_reverse", "Return an array with elements in reverse order
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array
   [, bool $preserve_keys = false
  ] )

  
   Takes an input array and returns a new array with
   the order of the elements reversed.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The input array.
      
     

    
    
     
preserve_keys

     

      
       If set to TRUE numeric keys are preserved. 
       Non-numeric keys are not affected by this setting and will always be preserved.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the reversed array.
  
 " 
"array_search", "Searches the array for a given value and returns the corresponding key if successful
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( mixed $needle
   , array $haystack
   [, bool $strict = false
  ] )

  
   Searches haystack for needle.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
needle

     

      
       The searched value.
      
      Note: 
       
        If needle is a string, the comparison is done
        in a case-sensitive manner.
       
      
     

    
    
     
haystack

     

      
       The array.
      
     

    
    
     
strict

     

      
       If the third parameter strict is set to TRUE
       then the) function will search for
       identical elements in the
       haystack. This means it will also check the
       types of the
       needle in the haystack,
       and objects must be the same instance.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the key for needle if it is found in the
   array, FALSE otherwise.
  
  
   If needle is found in haystack
   more than once, the first matching key is returned. To return the keys for
   all matching values, use array_keys() with the optional
   search_value parameter instead.
  
  WarningThis function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function.
 " 
"array_shift", "Shift an element off the beginning of array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( array &amp;$array
   )

  
  ) shifts the first value of the
   array off and returns it, shortening the
   array by one element and moving everything
   down. All numerical array keys will be modified to start counting from zero
   while literal keys won't be touched.
  
  Note: This function will
reset() the array pointer of the input array after
use.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The input array.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the shifted value, or NULL if array is
   empty or is not an array.
  
 " 
"array_slice", "Extract a slice of the array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array
   , int $offset
   [, int $length = NULL
   [, bool $preserve_keys = false
  ]] )

  
  ) returns the sequence of elements
   from the array array as specified by the
   offset and length
   parameters.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The input array.
      
     

    
    
     
offset

     

      
       If offset is non-negative, the sequence will
       start at that offset in the array.  If
       offset is negative, the sequence will
       start that far from the end of the array.
      
     

    
    
     
length

     

      
       If length is given and is positive, then
       the sequence will have up to that many elements in it. If the array
       is shorter than the length, then only the
       available array elements will be present. If
       length is given and is negative then the
       sequence will stop that many elements from the end of the
       array. If it is omitted, then the sequence will have everything
       from offset up until the end of the
       array.
      
     

    
    
     
preserve_keys

     

      
       Note that) will reorder and reset the
       numeric array indices by default. You can change this behaviour by setting
       preserve_keys to TRUE.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the slice.
  
 " 
"array_splice", "Remove a portion of the array and replace it with something else
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array &amp;$input
   , int $offset
   [, int $length = 0
   [, mixed $replacement = array()
  ]] )

  
   Removes the elements designated by offset and
   length from the input array,
   and replaces them with the elements of the
   replacement array, if supplied.
  
  
   Note that numeric keys in input are not preserved.
  
  Note: 
   
    If replacement is not an array, it will be
    typecast
    to one (i.e. (array) $parameter). This may result in unexpected
    behavior when using an object or NULL replacement.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
input

     

      
       The input array.
      
     

    
    
     
offset

     

      
       If offset is positive then the start of removed
       portion is at that offset from the beginning of the
       input array.  If offset
       is negative then it starts that far from the end of the
       input array.
      
     

    
    
     
length

     

      
       If length is omitted, removes everything
       from offset to the end of the array. If
       length is specified and is positive, then
       that many elements will be removed. If
       length is specified and is negative then
       the end of the removed portion will be that many elements from
       the end of the array. If length is
       specified and is zero, no elements will be removed.
       Tip: to remove everything from
       offset to the end of the array when
       replacement is also specified, use
       count($input) for
       length.
      
     

    
    
     
replacement

     

      
       If replacement array is specified, then the
       removed elements are replaced with elements from this array.
      
      
       If offset and length
       are such that nothing is removed, then the elements from the
       replacement array are inserted in the place
       specified by the offset. Note that keys in
       replacement array are not preserved.
      
      
       If replacement is just one element it is
       not necessary to put array()
       around it, unless the element is an array itself, an object or NULL.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array consisting of the extracted elements.
  
 " 
"array_sum", "Calculate the sum of values in an array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   number    ( array $array
   )

  
  ) returns the sum of values in an array.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The input array.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the sum of values as an integer or float.
  
 " 
"array_udiff", "Computes the difference of arrays by using a callback function for data comparison
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array1
   , array $array2
   [, array $...
   ], callable $value_compare_func
   )

  
   Computes the difference of arrays by using a callback function for data
   comparison. This is unlike array_diff() which uses an
   internal function for comparing the data.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array1

     

      
       The first array.
      
     

    
    
     
array2

     

      
       The second array.
      
     

    
    
     
value_compare_func

     

      
       The callback comparison function.
      
      
       The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.
      
      int callback ( mixed $a, mixed $b )

     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array containing all the values of array1
   that are not present in any of the other arguments.
  
 " 
"array_udiff_assoc", "Computes the difference of arrays with additional index check, compares data by a callback function
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array1
   , array $array2
   [, array $...
   ], callable $value_compare_func
   )

  
   Computes the difference of arrays with additional index check, compares
   data by a callback function.
  
  Note: 
   
    Please note that this function only checks one dimension of a n-dimensional
    array. Of course you can check deeper dimensions by using, for example,
   $array1[0], $array2[0], &quot;some_comparison_func&quot;);.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array1

     

      
       The first array.
      
     

    
    
     
array2

     

      
       The second array.
      
     

    
    
     
value_compare_func

     

      
       The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.
      
      int callback ( mixed $a, mixed $b )

     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns an array
   containing all the values from array1
   that are not present in any of the other arguments.
   Note that the keys are used in the comparison unlike
   array_diff() and array_udiff().
   The comparison of arrays' data is performed by using an user-supplied
   callback. In this aspect the behaviour is opposite to the behaviour of
   array_diff_assoc() which uses internal function for
   comparison.
  
 " 
"array_udiff_uassoc", "Computes the difference of arrays with additional index check, compares data and indexes by a callback function
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array1
   , array $array2
   [, array $...
   ], callable $value_compare_func
   , callable $key_compare_func
   )

  
   Computes the difference of arrays with additional index check, compares
   data and indexes by a callback function.
  
  
   Note that the keys are used in the comparison unlike
   array_diff() and array_udiff().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array1

     

      
       The first array.
      
     

    
    
     
array2

     

      
       The second array.
      
     

    
    
     
value_compare_func

     

      
       The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.
      
      int callback ( mixed $a, mixed $b )

     

    
    
     
key_compare_func

     

      
       The comparison of keys (indices) is done also by the callback function
       key_compare_func. This behaviour is unlike what
       array_udiff_assoc() does, since the latter compares
       the indices by using an internal function.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array containing all the values from
   array1 that are not present in any of the other
   arguments.
  
 " 
"array_uintersect", "Computes the intersection of arrays, compares data by a callback function
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array1
   , array $array2
   [, array $...
   ], callable $value_compare_func
   )

  
   Computes the intersection of arrays, compares data by a callback function.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array1

     

      
       The first array.
      
     

    
    
     
array2

     

      
       The second array.
      
     

    
    
     
value_compare_func

     

      
       The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.
      
      int callback ( mixed $a, mixed $b )

     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array containing all the values of array1
   that are present in all the arguments.
  
 " 
"array_uintersect_assoc", "Computes the intersection of arrays with additional index check, compares data by a callback function
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array1
   , array $array2
   [, array $...
   ], callable $value_compare_func
   )

  
   Computes the intersection of arrays with additional index check, compares
   data by a callback function.
  
  
   Note that the keys are used in the comparison unlike in
   array_uintersect().
   The data is compared by using a callback function.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array1

     

      
       The first array.
      
     

    
    
     
array2

     

      
       The second array.
      
     

    
    
     
value_compare_func

     

      
       The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.
      
      int callback ( mixed $a, mixed $b )

     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array containing all the values of
   array1 that are present in all the arguments.
  
 " 
"array_uintersect_uassoc", "Computes the intersection of arrays with additional index check, compares data and indexes by separate callback functions
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array1
   , array $array2
   [, array $...
   ], callable $value_compare_func
   , callable $key_compare_func
   )

  
   Computes the intersection of arrays with additional index check, compares
   data and indexes by separate callback functions.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array1

     

      
       The first array.
      
     

    
    
     
array2

     

      
       The second array.
      
     

    
    
     
value_compare_func

     

      
       The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.
      
      int callback ( mixed $a, mixed $b )

     

    
    
     
key_compare_func

     

      
       Key comparison callback function.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array containing all the values of
   array1 that are present in all the arguments.
  
 " 
"array_unique", "Removes duplicate values from an array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array
   [, int $sort_flags = SORT_STRING
  ] )

  
   Takes an input array and returns a new array
   without duplicate values.
  
  
   Note that keys are preserved.) sorts
   the values treated as string at first, then will keep the first key
   encountered for every value, and ignore all following keys. It does not
   mean that the key of the first related value from the unsorted
   array will be kept.
  
  Note: 
   
    Two elements are considered equal if and only if
    (string) $elem1 === (string) $elem2 i.e. 
    when the string representation is the same, the first element will be used.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The input array.
      
     

    
    
     
sort_flags

     

      
       The optional second parameter sort_flags
       may be used to modify the sorting behavior using these values:
      
      
       Sorting type flags:
       
         SORT_REGULAR - compare items normally
         (don't change types)
        
        
         SORT_NUMERIC - compare items numerically
        
        
         SORT_STRING - compare items as strings
        
        
         SORT_LOCALE_STRING - compare items as
          strings, based on the current locale.
         
        
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the filtered array.
  
 " 
"array_unshift", "Prepend one or more elements to the beginning of an array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( array &amp;$array
   , mixed $value1
   [, mixed $...
  ] )

  
  ) prepends passed elements to the front
   of the array. Note that the list of elements is
   prepended as a whole, so that the prepended elements stay in the same
   order.  All numerical array keys will be modified to start counting from
   zero while literal keys won't be touched.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The input array.
      
     

    
    
     
value1

     

      
       First value to prepend.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the new number of elements in the array.
  
 " 
"array_values", "Return all the values of an array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $array
   )

  
  ) returns all the values from the
   array and indexes the array numerically.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The array.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an indexed array of values.
  
 " 
"array_walk", "Apply a user supplied function to every member of an array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( array &amp;$array
   , callable $callback
   [, mixed $userdata = NULL
  ] )

  
   Applies the user-defined callback function to each
   element of the array array.
  
  
  ) is not affected by the internal array
   pointer of array. )
   will walk through the entire array regardless of pointer position.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The input array.
      
     

    
    
     
callback

     

      
       Typically, callback takes on two parameters.
       The array parameter's value being the first, and
       the key/index second.
      
      Note: 
       
        If callback needs to be working with the
        actual values of the array, specify the first parameter of
        callback as a
        reference. Then,
        any changes made to those elements will be made in the
        original array itself.
       
      
      Note: 
        
          Many internal functions (for example strtolower())
          will throw a warning if more than the expected number of argument
          are passed in and are not usable directly as a
          callback.
        
      
      
       Only the values of the array may potentially be
       changed; its structure cannot be altered, i.e., the programmer cannot
       add, unset or reorder elements. If the callback does not respect this
       requirement, the behavior of this function is undefined, and      
       unpredictable.
      
     

    
    
     
userdata

     

      
       If the optional userdata parameter is supplied,
       it will be passed as the third parameter to the
       callback.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"array_walk_recursive", "Apply a user function recursively to every member of an array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( array &amp;$array
   , callable $callback
   [, mixed $userdata = NULL
  ] )

  
   Applies the user-defined callback function to each
   element of the array. This function will recurse
   into deeper arrays.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The input array.
      
     

    
    
     
callback

     

      
       Typically, callback takes on two parameters.
       The array parameter's value being the first, and
       the key/index second.
      
      Note: 
       
        If callback needs to be working with the
        actual values of the array, specify the first parameter of
        callback as a
        reference. Then,
        any changes made to those elements will be made in the
        original array itself.
       
      
     

    
    
     
userdata

     

      
       If the optional userdata parameter is supplied,
       it will be passed as the third parameter to the
       callback.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"arsort", "Sort an array in reverse order and maintain index association
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( array &amp;$array
   [, int $sort_flags = SORT_REGULAR
  ] )

  
   This function sorts an array such that array indices maintain their
   correlation with the array elements they are associated with.
  
  
   This is used mainly when sorting associative arrays where the actual
   element order is significant.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The input array.
      
     

    
    
     
sort_flags

     

      
       You may modify the behavior of the sort using the optional parameter
       sort_flags, for details see
       sort().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"asin", "Arc sine
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    float     ( float $arg
    )

  
   Returns the arc sine of arg in radians.
  ) is the complementary function of
   sin(), which means that
   a==sina)) for every value of a that is within
  )'s range.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
arg

     

      
       The argument to process
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The arc sine of arg in radians
  
 " 
"asinh", "Inverse hyperbolic sine
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    float     ( float $arg
    )

  
   Returns the inverse hyperbolic sine of
   arg, i.e. the value whose
   hyperbolic sine is arg.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
arg

     

      
       The argument to process
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The inverse hyperbolic sine of arg 
  
 " 
"asort", "Sort an array and maintain index association
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( array &amp;$array
   [, int $sort_flags = SORT_REGULAR
  ] )

  
   This function sorts an array such that array indices maintain
   their correlation with the array elements they are associated
   with.  This is used mainly when sorting associative arrays where
   the actual element order is significant.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The input array.
      
     

    
    
     
sort_flags

     

      
       You may modify the behavior of the sort using the optional
       parameter sort_flags, for details
       see sort().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"assert", "Checks if NAMEion is FALSE
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  PHP 5
  
   bool    ( mixed $NAMEion
   [, string $description
  ] )

  PHP 7
  
   bool    ( mixed $NAMEion
   [, Throwable $exception
  ] )

  
  ) will check the given
   NAMEion and take appropriate action if
   its result is FALSE.
  
  
   Traditional NAMEions (PHP 5 and 7)
   
    If the NAMEion is given as a string it
    will be evaluated as PHP code by).
    The advantages of a string NAMEion are
    less overhead when NAMEion checking is off and messages
    containing the NAMEion expression when
    an NAMEion fails. This means that if you pass a boolean condition
    as NAMEion this condition will not show up as
    parameter to the NAMEion function which you may have defined with the
    NAME_options() function, the condition is converted
    to a string before calling that handler function, and the boolean FALSE
    is converted as the empty string.
   
   
    Assertions should be used as a debugging feature only. You may
    use them for sanity-checks that test for conditions that should
    always be TRUE and that indicate some programming errors if not
    or to check for the presence of certain features like extension
    functions or certain system limits and features.
   
   
    Assertions should not be used for normal runtime operations like
    input parameter checks. As a rule of thumb your code should
    always be able to work correctly if NAMEion checking is not
    activated.
   
   
    The behavior of) may be configured by
    NAME_options() or by .ini-settings described
    in that functions manual page.
   
   
    The NAME_options() function and/or
    ASSERT_CALLBACK configuration directive allow a
    callback function to be set to handle failed NAMEions.
   
   
   ) callbacks are particularly useful for
    building automated test suites because they allow you to easily
    capture the code passed to the NAMEion, along with information
    on where the NAMEion was made. While this information can be
    captured via other methods, using NAMEions makes it much faster
    and easier!
   
   
    The callback function should accept three arguments. The first
    argument will contain the file the NAMEion failed in. The
    second argument will contain the line the NAMEion failed on and
    the third argument will contain the expression that failed (if
    any — literal values such as 1 or &quot;two&quot; will not be passed via
    this argument). Users of PHP 5.4.8 and later may also provide a fourth
    optional argument, which will contain the
    description given to), if
    it was set.
   
  

  
   Expectations (PHP 7 only)
   
   ) is a language construct in PHP 7, allowing for
    the definition of expectations: NAMEions that take effect in development
    and testing environments, but are optimised away to have zero cost in
    production.
   
   
    While NAME_options() can still be used to control
    behaviour as described above for backward compatibility reasons, PHP 7
    only code should use the two new configuration directives to control
    the behaviour of) and not call
    NAME_options().
   
   
     PHP 7 configuration directives for)
    
    
     Directive
       Default value
       Possible values
      
        zend.NAMEions
       
       1
       
        
          1: generate and execute code (development mode)
         
         
          
          0: generate code but jump around it at runtime
         
         
          -1: do not generate code (production mode)
         
        
      
       exception
       
       0
       
        
          1: throw when the NAMEion fails, either by
          throwing the object provided as the exception
          or by throwing a new AssertionError object if
          exception wasn't provided
         
         
          0: use or generate a
          Throwable as described above, but only
          generate a warning based on that object rather than throwing it
          (compatible with PHP 5 behaviour)
         
        
      

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
NAMEion

     

      
       The NAMEion. In PHP 5, this must be either a string to
       be evaluated or a boolean to be tested. In PHP 7, this may
       also be any expression that returns a value, which will be executed and
       the result used to indicate whether the NAMEion succeeded or failed.
      
     

    
    
     
description

     

      
       An optional description that will be included in the failure message if
       the NAMEion fails.
      
     

    
    
     
exception

     

      
       In PHP 7, the second parameter can be a
       Throwable object instead of a descriptive
       string, in which case this is the object that will be
       thrown if the NAMEion fails and the
      exception
       configuration directive is enabled.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   FALSE if the NAMEion is false, TRUE otherwise.
  
 " 
"assert_options", "Set/get the various assert flags
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( int $what
   [, mixed $value
  ] )

  
   Set the various assert() control options or just query
   their current settings.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
what

     

      
       Assert Options
        
         Option
           INI Setting
           Default value
           </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
          ASSERT_ACTIVE
           assert.active
           1
           enable assert() evaluation
          ASSERT_WARNING
           assert.warning
           1
           issue a PHP warning for each failed assertion
          ASSERT_BAIL
           assert.bail
           0
           terminate execution on failed assertions
          ASSERT_QUIET_EVAL
           assert.quiet_eval
           0
           
            disable error_reporting during assertion expression
            evaluation
           
          ASSERT_CALLBACK
           assert.callback
           (NULL)
           Callback to call on failed assertions
          

    
    
     
value

     

      
       An optional new value for the option.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the original setting of any option or FALSE on errors.
  
 " 
"atan", "Arc tangent
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    float     ( float $arg
    )

  
   Returns the arc tangent of arg in radians.
  ) is the complementary function of
   tan(), which means that
   a==tana)) for every value of a that is within
  )'s range.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
arg

     

      
       The argument to process
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The arc tangent of arg in radians.
  
 " 
"atan2", "Arc tangent of two variables
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    float     ( float $y
    , float $x
    )

  
   This function calculates the arc tangent of the two variables
   x and y.  It is
   similar to calculating the arc tangent of
   y / x, except that
   the signs of both arguments are used to determine the quadrant of
   the result.
  
  
   The function returns the result in radians, which is between -PI
   and PI (inclusive).
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
y

     

      
       Dividend parameter
      
     

    
    
     
x

     

      
       Divisor parameter
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The arc tangent of y/x 
   in radians.
  
 " 
"atanh", "Inverse hyperbolic tangent
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    float     ( float $arg
    )

  
   Returns the inverse hyperbolic tangent of
   arg, i.e. the value whose
   hyperbolic tangent is arg.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
arg

     

      
       The argument to process
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Inverse hyperbolic tangent of arg 
  
 " 
"base64_decode", "Decodes data encoded with MIME base64
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $data
   [, bool $strict = false
  ] )

  
   Decodes a base64 encoded data.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
data

     

      
       The encoded data.
      
     

    
    
     
strict

     

      
       Returns FALSE if input contains character from outside the base64
       alphabet.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the original data or FALSE on failure. The returned data may be
   binary.
  
 " 
"base64_encode", "Encodes data with MIME base64
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $data
   )

  
   Encodes the given data with base64.
  
  
   This encoding is designed to make binary data survive transport through
   transport layers that are not 8-bit clean, such as mail bodies.
  
  
   Base64-encoded data takes about 33% more space than the original
   data.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
data

     

      
       The data to encode.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The encoded data, as a string or FALSE on failure.
  
 " 
"base_convert", "Convert a number between arbitrary bases
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    string     ( string $number
    , int $frombase
    , int $tobase
    )

  
   Returns a string containing number
   represented in base tobase.  The base in
   which number is given is specified in
   frombase.  Both
   frombase and tobase
   have to be between 2 and 36, inclusive.  Digits in numbers with a
   base higher than 10 will be represented with the letters a-z,
   with a meaning 10, b meaning 11 and z meaning 35.
   The case of the letters doesn't matter, i.e.
   number is interpreted case-insensitively.
  
  Warning
   
   ) may lose precision on large numbers
    due to properties related to the internal &quot;double&quot; or &quot;float&quot; type used.
    Please see the Floating point numbers
    section in the manual for more specific information and limitations.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
number

     

      
       The number to convert
      
     

    
    
     
frombase

     

      
       The base number is in
      
     

    
    
     
tobase

     

      
       The base to convert number to
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   number converted to base tobase
  
 " 
"basename", "Returns trailing name component of path
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $path
   [, string $suffix
  ] )

  
   Given a string containing the path to a file or directory, this function
   will return the trailing name component.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
path

     

      
       A path.
      
      
       On Windows, both slash (/) and backslash
       (\) are used as directory separator character. In
       other environments, it is the forward slash (/).
      
     

    
    
     
suffix

     

      
       If the name component ends in suffix this will also
       be cut off.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the base name of the given path.
  
 " 
"bcadd", "Add two arbitrary precision numbers
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $left_operand
   , string $right_operand
   [, int $scale = 0
  ] )

  
   Sums left_operand and
   right_operand.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
left_operand

     

      
       The left operand, as a string.
      
     

    
    
     
right_operand

     

      
       The right operand, as a string.
      
     

    
    

scale

This optional parameter is used to set the number
of digits after the decimal place in the result. If omitted, it will default to the scale set
globally with the bcscale() function, or fallback to 0 if
this has not been set.

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The sum of the two operands, as a string.
  
 " 
"bccomp", "Compare two arbitrary precision numbers
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $left_operand
   , string $right_operand
   [, int $scale = 0
  ] )

  
   Compares the left_operand to the
   right_operand and returns the result as an
   integer.  
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
left_operand

     

      
       The left operand, as a string.
      
     

    
    
     
right_operand

     

      
       The right operand, as a string.
      
     

    
    
     
scale

     

      
       The optional scale parameter is used to set the
       number of digits after the decimal place which will be used in the
       comparison.  
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns 0 if the two operands are equal, 1 if the
   left_operand is larger than the 
   right_operand, -1 otherwise.
  
 " 
"bcdiv", "Divide two arbitrary precision numbers
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $left_operand
   , string $right_operand
   [, int $scale = 0
  ] )

  
   Divides the left_operand by the
   right_operand.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
left_operand

     

      
       The left operand, as a string.
      
     

    
    
     
right_operand

     

      
       The right operand, as a string.
      
     

    
    

scale

This optional parameter is used to set the number
of digits after the decimal place in the result. If omitted, it will default to the scale set
globally with the bcscale() function, or fallback to 0 if
this has not been set.

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the result of the division as a string, or NULL if 
   right_operand is 0.
  
 " 
"bcmod", "Get modulus of an arbitrary precision number
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $left_operand
   , string $modulus
   )

  
   Get the modulus of the left_operand using
   modulus.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
left_operand

     

      
       The left operand, as a string.
      
     

    
    
     
modulus

     

      
       The modulus, as a string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the modulus as a string, or NULL if 
   modulus is 0.
  
 " 
"bcmul", "Multiply two arbitrary precision numbers
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $left_operand
   , string $right_operand
   [, int $scale = 0
  ] )

  
   Multiply the left_operand by the
   right_operand.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
left_operand

     

      
       The left operand, as a string.
      
     

    
    
     
right_operand

     

      
       The right operand, as a string.
      
     

    
    

scale

This optional parameter is used to set the number
of digits after the decimal place in the result. If omitted, it will default to the scale set
globally with the bcscale() function, or fallback to 0 if
this has not been set.

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the result as a string.
  
 " 
"bcpow", "Raise an arbitrary precision number to another
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $left_operand
   , string $right_operand
   [, int $scale = 0
  ] )

  
   Raise left_operand to the power 
   right_operand. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
left_operand

     

      
       The left operand, as a string.
      
     

    
    
     
right_operand

     

      
       The right operand, as a string.
      
     

    
    

scale

This optional parameter is used to set the number
of digits after the decimal place in the result. If omitted, it will default to the scale set
globally with the bcscale() function, or fallback to 0 if
this has not been set.

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the result as a string.
  
 " 
"bcpowmod", "Raise an arbitrary precision number to another, reduced by a specified modulus
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $left_operand
   , string $right_operand
   , string $modulus
   [, int $scale = 0
  ] )

  
   Use the fast-exponentiation method to raise 
   left_operand to the power
   right_operand with respect to the modulus
   modulus.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
left_operand

     

      
       The left operand, as a string.
      
     

    
    
     
right_operand

     

      
       The right operand, as a string.
      
     

    
    
     
modulus

     

      
       The modulus, as a string.
      
     

    
    

scale

This optional parameter is used to set the number
of digits after the decimal place in the result. If omitted, it will default to the scale set
globally with the bcscale() function, or fallback to 0 if
this has not been set.

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the result as a string, or NULL if modulus
   is 0.
  
 " 
"bcscale", "Set default scale parameter for all bc math functions
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( int $scale
   )

  
   Sets the default scale parameter for all subsequent calls to bc math functions that
   do not explicitly specify a scale parameter.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
scale

     

      
       The scale factor.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"bcsqrt", "Get the square root of an arbitrary precision number
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $operand
   [, int $scale = 0
  ] )

  
   Return the square root of the operand.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
operand

     

      
       The operand, as a string.
      
     

    
    

scale

This optional parameter is used to set the number
of digits after the decimal place in the result. If omitted, it will default to the scale set
globally with the bcscale() function, or fallback to 0 if
this has not been set.

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the square root as a string, or NULL if 
   operand is negative. 
  
 " 
"bcsub", "Subtract one arbitrary precision number from another
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $left_operand
   , string $right_operand
   [, int $scale = 0
  ] )

  
   Subtracts the right_operand from the
   left_operand.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
left_operand

     

      
       The left operand, as a string.
      
     

    
    
     
right_operand

     

      
       The right operand, as a string.
      
     

    
    

scale

This optional parameter is used to set the number
of digits after the decimal place in the result. If omitted, it will default to the scale set
globally with the bcscale() function, or fallback to 0 if
this has not been set.

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The result of the subtraction, as a string.
  
 " 
"bin2hex", "Convert binary data into hexadecimal representation
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   )

  
   Returns an ASCII string containing the hexadecimal representation
   of str. The conversion is done byte-wise
   with the high-nibble first.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       A string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the hexadecimal representation of the given string.
  
 " 
"bind_textdomain_codeset", "Specify the character encoding in which the messages from the DOMAIN message catalog will be returned
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $domain
   , string $codeset
   )

  
   With), you can set in which
   encoding will be messages from domain returned by
   gettext() and similar functions.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
domain

     

      
       The domain
      
     

    
    
     
codeset

     

      
       The code set
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   A string on success.
  
 " 
"bindec", "Binary to decimal
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    number     ( string $binary_string
    )

  
   Returns the decimal equivalent of the binary number represented by
   the binary_string argument.
  
  
  ) converts a binary number to an
   integer or, if needed for size reasons, float.
  
  
  ) interprets all
   binary_string values as unsigned
   integers. This is because) sees
   the most significant bit as another order of magnitude
   rather than as the sign bit.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
binary_string

     

      
       The binary string to convert
      
     

    
   Warning
   
    The parameter must be a string.
    Using other data types will produce unexpected results.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The decimal value of binary_string
  
 " 
"bindtextdomain", "Sets the path for a domain
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $domain
   , string $directory
   )

  
   The) function sets the path
   for a domain.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
domain

     

      
       The domain
      
     

    
    
     
directory

     

      
       The directory path
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The full pathname for the domain currently being set.
  
 " 
"boolval", "Get the boolean value of a variable
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   boolean    ( mixed $var
   )

  
   Returns the boolean value of var.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
var

    

     
      The scalar value being converted to a boolean.
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The boolean value of var.
  
 " 
"bzclose", "Close a bzip2 file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $bz
   )

  
   Closes the given bzip2 file pointer.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
bz

     

      
       The file pointer. It must be valid and must point to a file 
       successfully opened by bzopen().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"bzcompress", "Compress a string into bzip2 encoded data
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( string $source
   [, int $blocksize = 4
   [, int $workfactor = 0
  ]] )

  
  ) compresses the given string and returns
   it as bzip2 encoded data.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
source

     

      
       The string to compress.
      
     

    
    
     
blocksize

     

      
       Specifies the blocksize used during compression and should be a number 
       from 1 to 9 with 9 giving the best compression, but using more 
       resources to do so.
      
     

    
    
     
workfactor

     

      
       Controls how the compression phase behaves when presented with worst
       case, highly repetitive, input data.  The value can be between 0 and
       250 with 0 being a special case. 
      
      
       Regardless of the workfactor, the generated 
       output is the same.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The compressed string, or an error number if an error occurred.
  
 " 
"bzdecompress", "Decompresses bzip2 encoded data
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( string $source
   [, int $small = 0
  ] )

  
  ) decompresses the given string containing
   bzip2 encoded data.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
source

     

      
       The string to decompress.
      
     

    
    
     
small

     

      
       If TRUE, an alternative decompression algorithm will be used which
       uses less memory (the maximum memory requirement drops to around 2300K) 
       but works at roughly half the speed.
      
      
       See the » bzip2 documentation for more 
       information about this feature.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The decompressed string, or an error number if an error occurred.
  
 " 
"bzerrno", "Returns a bzip2 error number
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $bz
   )

  
   Returns the error number of any bzip2 error returned by the given file
   pointer.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
bz

     

      
       The file pointer. It must be valid and must point to a file 
       successfully opened by bzopen().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the error number as an integer.
  
 " 
"bzerror", "
   Returns the bzip2 error number and error string in an array
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $bz
   )

  
   Returns the error number and error string of any bzip2 error returned by 
   the given file pointer.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
bz

     

      
       The file pointer. It must be valid and must point to a file 
       successfully opened by bzopen().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an associative array, with the error code in the 
   errno entry, and the error message in the
   errstr entry.
  
 " 
"bzerrstr", "Returns a bzip2 error string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $bz
   )

  
   Gets the error string of any bzip2 error returned by the given file
   pointer.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
bz

     

      
       The file pointer. It must be valid and must point to a file 
       successfully opened by bzopen().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string containing the error message.
  
 " 
"bzflush", "Force a write of all buffered data
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $bz
   )

  
   Forces a write of all buffered bzip2 data for the file pointer
   bz.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
bz

     

      
       The file pointer. It must be valid and must point to a file 
       successfully opened by bzopen().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"bzopen", "Opens a bzip2 compressed file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( mixed $file
   , string $mode
   )

  
  ) opens a bzip2 (.bz2) file for reading or
   writing.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
file

     

      
       The name of the file to open, or an existing stream resource.
      
     

    
    
     
mode

     

      
       The modes 'r' (read), and 'w' (write) are supported.
       Everything else will cause) to return FALSE.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   If the open fails,) returns FALSE, otherwise
   it returns a pointer to the newly opened file.
  
 " 
"bzread", "Binary safe bzip2 file read
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $bz
   [, int $length = 1024
  ] )

  
  ) reads from the given bzip2 file pointer.
  
  
   Reading stops when length (uncompressed) bytes have
   been read or EOF is reached, whichever comes first.  
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
bz

     

      
       The file pointer. It must be valid and must point to a file 
       successfully opened by bzopen().
      
     

    
    
     
length

     

      
       If not specified,) will read 1024 
       (uncompressed) bytes at a time. A maximum of 8192
       uncompressed bytes will be read at a time.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the uncompressed data, or FALSE on error.
  
 " 
"bzwrite", "Binary safe bzip2 file write
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $bz
   , string $data
   [, int $length
  ] )

  
  ) writes a string into the given bzip2 file 
   stream.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
bz

     

      
       The file pointer. It must be valid and must point to a file 
       successfully opened by bzopen().
      
     

    
    
     
data

     

      
       The written data.
      
     

    
    
     
length

     

      
       If supplied, writing will stop after length 
       (uncompressed) bytes have been written or the end of 
       data is reached, whichever comes first.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the number of bytes written, or FALSE on error.
  
 " 
"cal_days_in_month", "Return the number of days in a month for a given year and calendar
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( int $calendar
   , int $month
   , int $year
   )

  
   This function will return the number of days in the
   month of year for
   the specified calendar.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
calendar

     

      
       Calendar to use for calculation
      
     

    
    
     
month

     

      
       Month in the selected calendar
      
     

    
    
     
year

     

      
       Year in the selected calendar
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The length in days of the selected month in the given calendar
  
 " 
"cal_from_jd", "Converts from Julian Day Count to a supported calendar
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( int $jd
   , int $calendar
   )

  
  ) converts the Julian day given in
   jd into a date of the specified
   calendar. Supported
   calendar values are
   CAL_GREGORIAN,
   CAL_JULIAN,
   CAL_JEWISH and
   CAL_FRENCH.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
jd

     

      
       Julian day as integer
      
     

    
    
     
calendar

     

      
       Calendar to convert to
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array containing calendar information like month, day, year,
   day of week, abbreviated and full names of weekday and month and the
   date in string form &quot;month/day/year&quot;.
  
 " 
"cal_info", "Returns information about a particular calendar
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ([ int $calendar = -1
  ] )

  
  ) returns information on the
   specified calendar.
  
  
   Calendar information is returned as an array containing the
   elements calname, calsymbol,
   month, abbrevmonth and
   maxdaysinmonth. The names of the different calendars 
   which can be used as calendar are as follows:
   
     
      0 or CAL_GREGORIAN - Gregorian Calendar
     
    
    
     
      1 or CAL_JULIAN - Julian Calendar
     
    
    
     
      2 or CAL_JEWISH - Jewish Calendar
     
    
    
     
      3 or CAL_FRENCH - French Revolutionary Calendar
     
    
   
   If no calendar is specified information on all
   supported calendars is returned as an array. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
calendar

     

      
       Calendar to return information for. If no calendar is specified
       information about all calendars is returned.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  
 " 
"cal_to_jd", "Converts from a supported calendar to Julian Day Count
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( int $calendar
   , int $month
   , int $day
   , int $year
   )

  
  ) calculates the Julian day count
   for a date in the specified calendar.
   Supported calendars are
   CAL_GREGORIAN,
   CAL_JULIAN,
   CAL_JEWISH and
   CAL_FRENCH.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
calendar

     

      
       Calendar to convert from, one of 
       CAL_GREGORIAN,
       CAL_JULIAN,
       CAL_JEWISH or
       CAL_FRENCH.
      
     

    
    
     
month

     

      
       The month as a number, the valid range depends 
       on the calendar
      
     

    
    
     
day

     

      
       The day as a number, the valid range depends 
       on the calendar
      
     

    
    
     
year

     

      
       The year as a number, the valid range depends 
       on the calendar
      
     

      
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   A Julian Day number.
  
 " 
"call_user_func", "Call the callback given by the first parameter
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( callable $callback
   [, mixed $parameter
   [, mixed $...
  ]] )

  
   Calls the callback given by the first parameter and passes
   the remaining parameters as arguments.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
callback

     

      
       The callable to be called.
      
     

    
    
     
parameter

     

      
       Zero or more parameters to be passed to the callback.
      
      Note: 
       
        Note that the parameters for) are
        not passed by reference.
        
         Example #1) example and references
         




         

         The above example will output:
         

0
1

         
        
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the return value of the callback, or FALSE on error.
  
 " 
"call_user_func_array", "Call a callback with an array of parameters
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( callable $callback
   , array $param_arr
   )

  
   Calls the callback given by the first parameter with
   the parameters in param_arr.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
callback

     

      
       The callable to be called.
      
     

    
    
     
param_arr

     

      
       The parameters to be passed to the callback, as an indexed array.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the return value of the callback, or FALSE on error.
  
 " 
"ceil", "Round fractions up
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    float     ( float $value
    )

  
   Returns the next highest integer value by rounding up 
   value if necessary. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
value

     

      
       The value to round
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   value rounded up to the next highest
   integer.
   The return value of) is still of type
   float as the value range of float is 
   usually bigger than that of integer.
  
 " 
"chdir", "Change directory
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $directory
   )

  
   Changes PHP's current directory to 
   directory.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
directory

     

      
       The new current directory
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
   
 " 
"checkdate", "Validate a Gregorian date
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( int $month
   , int $day
   , int $year
   )

  
   Checks the validity of the date formed by the arguments. A date
   is considered valid if each parameter is properly defined.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
month

     

      
       The month is between 1 and 12 inclusive.
      
     

    
    
     
day

     

      
       The day is within the allowed number of days for the given 
       month.  Leap years 
       are taken into consideration.
      
     

    
    
     
year

     

      
       The year is between 1 and 32767 inclusive.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the date given is valid; otherwise returns FALSE.
  
 " 
"checkdnsrr", "Check DNS records corresponding to a given Internet host name or IP address
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $host
   [, string $type = &quot;MX&quot;
  ] )

  
   Searches DNS for records of type type
   corresponding to host. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
host

     

      
       host may either be the IP address in
       dotted-quad notation or the host name.
      
     

    
    
     
type

     

      
       type may be any one of: A, MX, NS, SOA,
       PTR, CNAME, AAAA, A6, SRV, NAPTR, TXT or ANY.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if any records are found; returns FALSE if no records
   were found or if an error occurred.
  
 " 
"chgrp", "Changes file group
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $filename
   , mixed $group
   )

  
   Attempts to change the group of the file filename
   to group.
  
  
   Only the superuser may change the group of a file arbitrarily; other users
   may change the group of a file to any group of which that user is a member.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the file.
      
     

    
    
     
group

     

      
       A group name or number.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"chmod", "Changes file mode
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $filename
   , int $mode
   )

  
   Attempts to change the mode of the specified file to that given in
   mode.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the file.
      
     

    
    
     
mode

     

      
       Note that mode is not automatically
       assumed to be an octal value, so to ensure the expected operation,
       you need to prefix mode with a zero (0). 
       Strings such as &quot;g+w&quot; will not work properly.
      
      
       
        




        

       
      
      
       The mode parameter consists of three octal
       number components specifying access restrictions for the owner,
       the user group in which the owner is in, and to everybody else in
       this order. One component can be computed by adding up the needed
       permissions for that target user base. Number 1 means that you
       grant execute rights, number 2 means that you make the file
       writeable, number 4 means that you make the file readable. Add
       up these numbers to specify needed rights. You can also read more
       about modes on Unix systems with 'man 1
       and 'man 2.
      
      
       
        


  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"chop", "Alias of rtrim()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   rtrim().
  
 " 
"chown", "Changes file owner
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $filename
   , mixed $user
   )

  
   Attempts to change the owner of the file filename
   to user user. Only the superuser may change the
   owner of a file.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the file.
      
     

    
    
     
user

     

      
       A user name or number.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"chr", "Return a specific character
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( int $ascii
   )

  
   Returns a one-character string containing the character specified
   by ascii.
  
  
   This function complements ord(). 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ascii

     

      
       The ascii code.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the specified character.
  
 " 
"chunk_split", "Split a string into smaller chunks
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $body
   [, int $chunklen = 76
   [, string $end = &quot;\r\n&quot;
  ]] )

  
   Can be used to split a string into smaller chunks which is useful for
   e.g. converting base64_encode() output to match RFC
   2045 semantics. It inserts end every 
   chunklen characters.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
body

     

      
       The string to be chunked.
      
     

    
    
     
chunklen

     

      
       The chunk length.
      
     

    
    
     
end

     

      
       The line ending sequence.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the chunked string.
  
 " 
"class_alias", "Creates an alias for a class
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $original
   , string $alias
   [, bool $autoload = TRUE
  ] )

  
   Creates an alias named alias
   based on the user defined class original.
   The aliased class is exactly the same as the original class.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
original

     

      
       The original class.
      
     

    
    
     
alias

     

      
       The alias name for the class.
      
     

    
    
     
autoload

     

      
       Whether to autoload if the original class is not found.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"class_exists", "Checks if the class has been defined
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $class_name
   [, bool $autoload = true
  ] )

  
   This function checks whether or not the given class has been defined.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
class_name

     

      
       The class name. The name is matched in a case-insensitive manner.
      
     

    
    
     
autoload

     

      
       Whether or not to call __autoload by default.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if class_name is a defined class,
   FALSE otherwise.
  
 " 
"class_implements", "
   Return the interfaces which are implemented by the given class or interface
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( mixed $class
   [, bool $autoload = true
  ] )

  
   This function returns an array with the names of the interfaces that the
   given class and its parents implement.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
class

     

      
       An object (class instance) or a string (class or interface name).
      
     

    
    
     
autoload

     

      
       Whether to allow this function to load the class automatically through
       the __autoload() magic method.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   An array on success, or FALSE on error.
  
 " 
"class_parents", "
   Return the parent classes of the given class
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( mixed $class
   [, bool $autoload = true
  ] )

  
   This function returns an array with the name of the parent classes of
   the given class.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
class

     

      
       An object (class instance) or a string (class name).
      
     

    
    
     
autoload

     

      
       Whether to allow this function to load the class automatically through
       the __autoload() magic method.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   An array on success, or FALSE on error.
  
 " 
"class_uses", "
   Return the traits used by the given class
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( mixed $class
   [, bool $autoload = true
  ] )

  
   This function returns an array with the names of the traits that the
   given class uses. This does however not include
   any traits used by a parent class.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
class

     

      
       An object (class instance) or a string (class name).
      
     

    
    
     
autoload

     

      
       Whether to allow this function to load the class automatically through
       the __autoload() magic method.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   An array on success, or FALSE on error.
  
 " 
"clearstatcache", "Clears file status cache
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ([ bool $clear_realpath_cache = false
   [, string $filename
  ]] )

  
   When you use stat(), lstat(), or
   any of the other functions listed in the affected functions list (below),
   PHP caches the information those functions return in order to provide
   faster performance. However, in certain cases, you may want to clear the
   cached information. For instance, if the same file is being checked
   multiple times within a single script, and that file is in danger of
   being removed or changed during that script's operation, you may elect to
   clear the status cache.  In these cases, you can use the
  ) function to clear the information
   that PHP caches about a file.
  
  
   You should also note that PHP doesn't cache information about non-existent
   files. So, if you call file_exists() on a file that
   doesn't exist, it will return FALSE until you create the file. If you
   create the file, it will return TRUE even if you then delete the file.
   However unlink() clears the cache automatically.
  
  Note: 
   
    This function caches information about specific filenames, so you only
    need to call) if you are performing
    multiple operations on the same filename and require the information
    about that particular file to not be cached.
   
  
  
   Affected functions include stat(),
   lstat(),
   file_exists(),
   is_writable(),
   is_readable(),
   is_executable(),
   is_file(),
   is_dir(),
   is_link(),
   filectime(),
   fileatime(),
   filemtime(),
   fileinode(),
   filegroup(),
   fileowner(),
   filesize(),
   filetype(), and
   fileperms().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
clear_realpath_cache

     

      
       Whether to clear the realpath cache or not.
      
     

    
    
     
filename

     

      
       Clear the realpath and the stat cache for a specific filename only; only
       used if clear_realpath_cache is TRUE.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"cli_get_process_title", "Returns the current process title
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( void
   )

  
   Returns the current process title, as set by
   cli_set_process_title(). Note that this may not exactly
   match what is shown in ps or top,
   depending on your operating system.
  

  
   This function is available only in
   CLI mode.
  

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  This function has no parameters.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Return a string with the current process title or NULL on error.
  
 " 
"cli_set_process_title", "Sets the process title
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $title
   )


  
   Sets the process title visible in tools such as top and
   ps. This function is available only in
   CLI mode.
  

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
title

    

     
      The new title.
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"closedir", "Close directory handle
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ([ resource $dir_handle
  ] )

  
   Closes the directory stream indicated by
   dir_handle. The stream must have previously
   been opened by opendir().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
dir_handle

     

      
       The directory handle resource previously opened
       with opendir(). If the directory handle is 
       not specified, the last link opened by opendir() 
       is assumed.
      
     

    
   " 
"closelog", "Close connection to system logger
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( void
   )

  
  ) closes the descriptor being used to write to
   the system logger.  The use of) is optional.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"collator_asort", "Sort array maintaining index association
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   public
   bool 
   Collator::asort
    ( array &amp;$arr
   [, int $sort_flag
  ] )

  
   Procedural style
  
  
   bool 
      ( Collator $coll
   , array &amp;$arr
   [, int $sort_flag
  ] )

  
   This function sorts an array such that array indices maintain their
   correlation with the array elements they are associated with. This is used
   mainly when sorting associative arrays where the actual element order is
   significant. Array elements will have sort order according to current
   locale rules.
  
  
   Equivalent to standard PHP
   asort().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
coll

     

      
       Collator object.
      
     

    
    
     
arr

     

      Array of strings to sort.
     

    
    
     
sort_flag

     

      
       Optional sorting type, one of the following:
       
         
          Collator::SORT_REGULAR
          - compare items normally (don't change types)
         
        
        
         
          Collator::SORT_NUMERIC
          - compare items numerically
         
        
        
         
          Collator::SORT_STRING
          - compare items as strings
         
        
       
       Default $sort_flag value is
       Collator::SORT_REGULAR.
       It is also used if an invalid $sort_flag value has been specified.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"collator_compare", "Compare two Unicode strings
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   Object oriented style
  
  
   public
   int 
   Collator::compare
    ( string $str1
   , string $str2
   )

  
   Procedural style
  
  
   int 
      ( Collator $coll
   , string $str1
   , string $str2
   )

  
   Compare two Unicode strings according to collation rules.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
coll

     

      
       Collator object.
      
     

    
    
     
str1

     

      
       The first string to compare.
      
     

    
    
     
str2

     

      
       The second string to compare.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  Return comparison result:
  
   
     
      1 if str1 is greater than 
      str2 ;
     
    
    
     
      0 if str1 is equal to 
      str2;
     
    
    
     
      -1 if str1 is less than 
      str2 .
     
    
   
   On error
   boolean
   FALSE
   is returned.
  
  WarningThis function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function.
 " 
"collator_create", "Create a collator
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   public
   static
   Collator 
   Collator::create
    ( string $locale
   )

  
   Procedural style
  
  
   Collator 
      ( string $locale
   )

  
   The strings will be compared using the options already specified.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
locale

     

      
       The locale containing the required collation rules. Special values for
       locales can be passed in - if null is passed for the locale, the
       default locale collation rules will be used. If empty string (&quot;&quot;) or
       &quot;root&quot; are passed, » UCA rules will be used.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Return new instance of Collator object, or NULL
   on error.
  
 " 
"collator_sort", "Sort array using specified collator
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   Object oriented style
  
  
   public
   bool 
   Collator::sort
    ( array &amp;$arr
   [, int $sort_flag
  ] )

  
   Procedural style
  
  
   bool 
      ( Collator $coll
   , array &amp;$arr
   [, int $sort_flag
  ] )

  This function sorts an array according to current locale rules.
  
   Equivalent to standard PHP
   sort() .
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
coll

     

      
       Collator object.
      
     

    
    
     
arr

     

      
       Array of strings to sort.
      
     

    
    
     
sort_flag

     

      
       Optional sorting type, one of the following:
      
      
       
         
          Collator::SORT_REGULAR
          - compare items normally (don't change types)
         
        
        
         
          Collator::SORT_NUMERIC
          - compare items numerically
         
        
        
         
          Collator::SORT_STRING
          - compare items as strings
         
        
       
       Default sorting type is Collator::SORT_REGULAR.
       It is also used if an invalid sort_flag value has been specified.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"compact", "Create array containing variables and their values
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( mixed $varname1
   [, mixed $...
  ] )

  
   Creates an array containing variables and their values.
  
  
   For each of these,) looks for a
   variable with that name in the current symbol table and adds it
   to the output array such that the variable name becomes the key
   and the contents of the variable become the value for that key.
   In short, it does the opposite of extract().
  
  
   Any strings that are not set will simply be skipped.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
varname1

     

      
      ) takes a variable number of parameters.
       Each parameter can be either a string containing the name of the
       variable, or an array of variable names.  The array can contain other
       arrays of variable names inside it;)
       handles it recursively.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the output array with all the variables added to it.
  
 " 
"connection_aborted", "Check whether client disconnected
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   Checks whether the client disconnected.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns 1 if client disconnected, 0 otherwise.
  
 " 
"connection_status", "Returns connection status bitfield
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   Gets the connection status bitfield.  
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the connection status bitfield, which can be used against the
   CONNECTION_XXX constants to determine the connection
   status.
  
 " 
"constant", "Returns the value of a NAME
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( string $name
   )

  
   Return the value of theindicated by
   name.
  
  
  ) is useful if you need to retrieve
   the value of a but do not know its name.  I.e. it is
   stored in a variable or returned by a function.
  
  
   This function works also with class NAMEs.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
name

     

      
       Thename.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the value of the or NULL if theis not
   defined.
  
 " 
"convert_cyr_string", "Convert from one Cyrillic character set to another
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   , string $from
   , string $to
   )

  
   Converts from one Cyrillic character set to another.  
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The string to be converted.
      
     

    
    
     
from

     

      
       The source Cyrillic character set, as a single character.
      
     

    
    
     
to

     

      
       The target Cyrillic character set, as a single character.
      
     

    
   
   Supported characters are:
   
     
      k - koi8-r
     
    
    
     
      w - windows-1251
     
    
    
     
      i - iso8859-5
     
    
    
     
      a - x-cp866
     
    
    
     
      d - x-cp866
     
    
    
     
      m - x-mac-cyrillic
     
    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the converted string.
  
 " 
"convert_uudecode", "Decode a uuencoded string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $data
   )

  
  ) decodes a uuencoded string.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
data

     

      
       The uuencoded data.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the decoded data as a string  or FALSE on failure.
  
 " 
"convert_uuencode", "Uuencode a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $data
   )

  
  ) encodes a string using the uuencode
   algorithm.
  
  
   Uuencode translates all strings (including binary's ones) into printable
   characters, making them safe for network transmissions. Uuencoded data is
   about 35% larger than the original.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
data

     

      
       The data to be encoded.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the uuencoded data  or FALSE on failure.
  
 " 
"copy", "Copies file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $source
   , string $dest
   [, resource $context
  ] )

  
   Makes aof the file source to
   dest.
  
  
   If you wish to move a file, use the rename() function.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
source

     

      
       Path to the source file.
      
     

    
    
     
dest

     

      
       The destination path. If dest is a URL, the
      operation may fail if the wrapper does not support overwriting of
       existing files.
      
      Warning
       
        If the destination file already exists, it will be overwritten.
       
      
     

    
    
     
context

     

      
       A valid context resource created with 
       stream_context_create().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"cos", "Cosine
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    float     ( float $arg
    )

  
  ) returns the NAMEine of the arg
   parameter.  The arg parameter is in radians.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
arg

     

      
       An angle in radians 
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The NAMEine of arg
  
 " 
"cosh", "Hyperbolic cosine
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    float     ( float $arg
    )

  
   Returns the hyperbolic cosine of arg,
   defined as (exp(arg) + exp(-arg))/2.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
arg

     

      
       The argument to process
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The hyperbolic cosine of arg
  
 " 
"count", "Count all elements in an array, or something in an object
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( mixed $array_or_NAMEable
   [, int $mode = COUNT_NORMAL
  ] )

  
   Counts all elements in an array, or something in an object.
  
  
   For objects, if you have
   SPL installed, you can hook into
  ) by implementing interface
   Countable. The interface has exactly one method,
   Countable:), which returns the return value for the
  ) function.
  
  
   Please see the Array
   section of the manual for a detailed explanation of how arrays
   are implemented and used in PHP.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array_or_NAMEable

     

      
       An array or Countable object.
      
     

    
    
     
mode

     

      
       If the optional mode parameter is set to
       COUNT_RECURSIVE (or 1),)
       will recursivelythe array.  This is particularly useful for
       NAMEing all the elements of a multidimensional array.
      
      Caution
       
       ) can detect recursion to avoid an infinite
        loop, but will emit an E_WARNING every time it
        does (in case the array contains itself more than once) and return a
       higher than may be expected.
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the number of elements in array_or_NAMEable.
   If the parameter is not an array or not an object with
   implemented Countable interface,
   1 will be returned.
   There is one exception, if array_or_NAMEable is NULL,
   0 will be returned.
  
  Caution
   
   ) may return 0 for a variable that isn't set,
    but it may also return 0 for a variable that has been initialized with an
    empty array. Use isset() to test if a variable is set.
   
  
 " 
"count_chars", "Return information about characters used in a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( string $string
   [, int $mode = 0
  ] )

  
   Counts the number of occurrences of every byte-value (0..255) in
   string and returns it in various ways.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
string

     

      
       The examined string.
      
     

    
    
     
mode

     

      
       See return values.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Depending on mode
  ) returns one of the following:
   
     
      0 - an array with the byte-value as key and the frequency of
      every byte as value.
     
    
    
     
      1 - same as 0 but only byte-values with a frequency greater
      than zero are listed.
     
    
    
     
      2 - same as 0 but only byte-values with a frequency equal to
      zero are listed.
     
    
    
     
      3 - a string containing all unique characters is returned.
     
    
    
     
      4 - a string containing all not used characters is returned.
     
    
   " 
"crc32", "Calculates thepolynomial of a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $str
   )

  
   Generates the cyclic redundancy checksum polynomial of 32-bit
   lengths of the str. This is usually used
   to validate the integrity of data being transmitted.
  
  Warning
   
    Because PHP's integer type is signed manychecksums will
    result in negative integers on 32bit platforms. On 64bit installations
    all) results will be positive integers though.
   
   
    So you need to use the &quot;%u&quot; formatter of sprintf() or 
    printf() to get the string representation of the 
    unsigned) checksum in decimal format.
   
   
    For a hexadecimal representation of the checksum you can either use the 
    &quot;%x&quot; formatter of sprintf() or printf() 
    or the dechex() conversion functions, both of these
    also take care of converting the) result to
    an unsigned integer.
   
   
    Having 64bit installations also return negative integers for higher
    result values was considered but would break the hexadecimal conversion
    as negatives would get an extra 0xFFFFFFFF######## offset then. As 
    hexadecimal representation seems to be the most common use case we
    decided to not break this even if it breaks direct decimal comparisons
    in about 50% of the cases when moving from 32 to 64bits.
   
   
    In retrospect having the function return an integer maybe wasn't the 
    best idea and returning a hex string representation right away (as 
    e.g. md5() does) might have been a better plan to
    begin with.
   
   
    For a more portable solution you may also consider the generic 
    hash(). hash(&quot;NAMEb&quot;, $str) will 
    return the same string as str_pad(dechex$str)), 8, '0', STR_PAD_LEFT).
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The data.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns thechecksum of str as an integer.
  
 " 
"create_function", "Create an anonymous (lambda-style) function
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $args
   , string $code
   )

  
   Creates an anonymous function from the parameters passed, and
   returns a unique name for it.
  
  Caution
   
    This function internally performs an eval() and as such has the
    same security issues as eval(). Additionally it has bad performance
    and memory usage characteristics.
   
   
    If you are using PHP 5.3.0 or newer a native
    anonymous function should be used instead.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   Usually these parameters will be passed as single quote delimited strings.
   The reason for using single quoted strings, is to protect the variable
   names from parsing, otherwise, if you use double quotes there will be a
   need to escape the variable names, e.g. \$avar.
   
args

     

      
       The function arguments.
      
     

    
    
     
code

     

      
       The function code.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a unique function name as a string, or FALSE on error.
  
 " 
"crypt", "One-way string hashing
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   [, string $salt
  ] )

  
  ) will return a hashed string using the
   standard Unix DES-based algorithm or
   alternative algorithms that may be available on the system.
  
  
   The salt parameter is optional. However,) creates a weak password without the salt. PHP 5.6 or later raise an E_NOTICE error without it. Make sure to specify a strong enough salt for better security. 
  
  
   password_hash() uses a strong hash, generates a strong salt, and applies proper rounds automatically. password_hash() is a simple) wrapper and compatible with existing password hashes. Use of password_hash() is encouraged.
  
  
   Some operating systems support more than one type of hash.  In
   fact, sometimes the standard DES-based algorithm is replaced by an
   MD5-based algorithm.  The hash type is triggered by the salt argument.
   Prior to 5.3, PHP would determine the available algorithms at install-time
   based on the system's). If no salt is provided, PHP will
   auto-generate either a standard two character (DES) salt, or a twelve
   character (MD5), depending on the availability of MD5).  PHP sets a
   constant named CRYPT_SALT_LENGTH which indicates the
   longest valid salt allowed by the available hashes.
  
  
   The standard DES-based) returns the
   salt as the first two characters of the output. It also only uses the
   first eight characters of str, so longer strings
   that start with the same eight characters will generate the same result
   (when the same salt is used).
  
  
   On systems where the) function supports multiple
   hash types, the following constants are set to 0 or 1
   depending on whether the given type is available:
  
  
    
     CRYPT_STD_DES - Standard DES-based hash with a two character salt
       from the alphabet &quot;./0-9A-Za-z&quot;. Using invalid characters in the salt will cause
      ) to fail.
    
   
   
    
     CRYPT_EXT_DES - Extended DES-based hash. The &quot;salt&quot; is a
     9-character string consisting of an underscore followed by 4 bytes of iteration count and
     4 bytes of salt. These are encoded as printable characters, 6 bits per character, least
     significant character first. The values 0 to 63 are encoded as &quot;./0-9A-Za-z&quot;. Using invalid
     characters in the salt will cause) to fail.
    
   
   
    
     CRYPT_MD5 - MD5 hashing with a twelve character salt starting with
     $1$
    
   
   
    
     CRYPT_BLOWFISH - Blowfish hashing with a salt as
     follows: &quot;$2a$&quot;, &quot;$2x$&quot; or &quot;$2y$&quot;, a two digit cost parameter, &quot;$&quot;, and
     22 characters from the alphabet &quot;./0-9A-Za-z&quot;. Using characters outside of
     this range in the salt will cause) to return a zero-length string.
     The two digit cost parameter is the base-2 logarithm of the iteration
     count for the underlying Blowfish-based hashing algorithmeter and must be
     in range 04-31, values outside this range will cause) to fail.
     Versions of PHP before 5.3.7 only support &quot;$2a$&quot; as the salt prefix: PHP
     5.3.7 introduced the new prefixes to fix a security weakness in the
     Blowfish implementation.  Please refer to
     » this document for full
     details of the security fix, but to summarise, developers targeting only
     PHP 5.3.7 and later should use &quot;$2y$&quot; in preference to &quot;$2a$&quot;.
    
   
   
    
     CRYPT_SHA256 - SHA-256 hash with a sixteen character salt
     prefixed with $5$. If the salt string starts with 'rounds=$', the numeric value of N
     is used to indicate how many times the hashing loop should be executed, much like the cost
     parameter on Blowfish. The default number of rounds is 5000, there is a minimum of
     1000 and a maximum of 999,999,999. Any selection of N outside this range will be truncated to
     the nearest limit.
    
   
   
    
     CRYPT_SHA512 - SHA-512 hash with a sixteen character salt
     prefixed with $6$. If the salt string starts with 'rounds=$', the numeric value of N
     is used to indicate how many times the hashing loop should be executed, much like the cost
     parameter on Blowfish. The default number of rounds is 5000, there is a minimum of
     1000 and a maximum of 999,999,999. Any selection of N outside this range will be truncated to
     the nearest limit.
    
   
  Note: 
   
    As of PHP 5.3.0, PHP contains its own implementation and will use that
    if the system lacks of support for one or more of the algorithms.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The string to be hashed.
      
      Caution
       
        Using the CRYPT_BLOWFISH algorithm, will result
        in the str parameter being truncated to a
        maximum length of 72 characters.
       
      
     

    
    
     
salt

     

      
       An optional salt string to base the hashing on. If not provided, the
       behaviour is defined by the algorithm implementation and can lead to
       unexpected results.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the hashed string or a string that is shorter than 13 characters
   and is guaranteed to differ from the salt on failure.
  
  Warning
   
    When validating passwords, a string comparison function that isn't
    vulnerable to timing attacks should be used to compare the output of
   ) to the previously known hash. PHP 5.6 onwards
    provides hash_equals() for this purpose.
   
  
 " 
"ctype_alnum", "Check for alphanumeric character(s)
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $text
   )

  
   Checks if all of the characters in the provided string,
   text, are alphanumeric.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
text

     

      
       The tested string.
      
     

    
    
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if every character in text is either
   a letter or a digit, FALSE otherwise.
  
 " 
"ctype_alpha", "Check for alphabetic character(s)
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $text
   )

  
   Checks if all of the characters in the provided string,
   text, are alphabetic.
   In the standard C locale letters are just 
   [A-Za-z] and) is 
   equivalent to (ctype_upper($text) || ctype_lower($text))
   if $text is just a single character, but other languages have letters that 
   are considered neither upper nor lower case.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
text

     

      
       The tested string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if every character in text is 
   a letter from the current locale, FALSE otherwise.
  
 " 
"ctype_cntrl", "Check for control character(s)
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $text
   )

  
   Checks if all of the characters in the provided string,
   text, are control characters.
   Control characters are e.g. line feed, tab, escape.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
text

     

      
       The tested string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if every character in text is 
   a control character from the current locale, FALSE otherwise.
  
 " 
"ctype_digit", "Check for numeric character(s)
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $text
   )

  
   Checks if all of the characters in the provided string,
   text, are numerical.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
text

     

      
       The tested string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if every character in the string
   text is a decimal digit, FALSE otherwise.
  
 " 
"ctype_graph", "Check for any printable character(s) except space
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $text
   )

  
   Checks if all of the characters in the provided string,
   text, creates visible output.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
text

     

      
       The tested string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if every character in text is 
   printable and actually creates visible output (no white space), FALSE
   otherwise.
  
 " 
"ctype_lower", "Check for lowercase character(s)
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $text
   )

  
   Checks if all of the characters in the provided string,
   text, are lowercase letters.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
text

     

      
       The tested string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if every character in text is 
   a lowercase letter in the current locale.
  
 " 
"ctype_print", "Check for printable character(s)
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $text
   )

  
   Checks if all of the characters in the provided string,
   text, are printable.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
text

     

      
       The tested string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if every character in text 
   will actually create output (including blanks). Returns FALSE if 
   text contains control characters or characters 
   that do not have any output or control function at all.
  
 " 
"ctype_punct", "
   Check for any printable character which is not whitespace or an
   alphanumeric character
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $text
   )

  
   Checks if all of the characters in the provided string,
   text, are punctuation character.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
text

     

      
       The tested string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if every character in text 
   is printable, but neither letter, digit or blank, FALSE otherwise.
  
 " 
"ctype_space", "Check for whitespace character(s)
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $text
   )

  
   Checks if all of the characters in the provided string,
   text, creates whitespace.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
text

     

      
       The tested string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if every character in text 
   creates some sort of white space, FALSE otherwise. Besides the 
   blank character this also includes tab, vertical tab, line feed,
   carriage return and form feed characters.
  
 " 
"ctype_upper", "Check for uppercase character(s)
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $text
   )

  
   Checks if all of the characters in the provided string,
   text, are uppercase characters.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
text

     

      
       The tested string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if every character in text is 
   an uppercase letter in the current locale.
  
 " 
"ctype_xdigit", "
   Check for character(s) representing a hexadecimal digit
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $text
   )

  
   Checks if all of the characters in the provided string,
   text, are hexadecimal 'digits'.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
text

     

      
       The tested string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if every character in text is 
   a hexadecimal 'digit', that is a decimal digit or a character from 
   [A-Fa-f] , FALSE otherwise.
  
 " 
"curl_close", "Close a cURL session
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( resource $ch
   )

  
   Closes a cURL session and frees all resources.  The cURL handle,
   ch, is also deleted.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ch


A cURL handle returned by
curl_init().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"curl_copy_handle", "Copy a cURL handle along with all of its preferences
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( resource $ch
   )

  
   Copies a cURL handle keeping the same preferences.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ch


A cURL handle returned by
curl_init().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a new cURL handle.
  
 " 
"curl_errno", "Return the last error number
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $ch
   )

  
   Returns the error number for the last cURL operation.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ch


A cURL handle returned by
curl_init().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the error number or 0 (zero) if no error
   occurred.
  
 " 
"curl_error", "Return a string containing the last error for the current session
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $ch
   )

  
   Returns a clear text error message for the last cURL operation.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ch


A cURL handle returned by
curl_init().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the error message or '' (the empty string) if no
   error occurred.
  
 " 
"curl_escape", "URL encodes the given string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $ch
   , string $str
   )

  
   This function URL encodes the given string according to » RFC 3986.
  

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
ch


A cURL handle returned by
curl_init().

   
    
str

    

     
      The string to be encoded.
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns escaped string or FALSE on failure.
  
 " 
"curl_exec", "Perform a cURL session
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( resource $ch
   )

  
   Execute the given cURL session.
  
  
   This function should be called after initializing a cURL session and all
   the options for the session are set. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ch


A cURL handle returned by
curl_init().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure. However, if the CURLOPT_RETURNTRANSFER
   option is set, it will return
   the result on success, FALSE on failure.
  
  WarningThis function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function.
 " 
"curl_file_create", "Create a CURLFile object
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  CURLFile::__construct()
  
 " 
"curl_getinfo", "Get information regarding a specific transfer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( resource $ch
   [, int $opt = 0
  ] )

  
   Gets information about the last transfer. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ch


A cURL handle returned by
curl_init().

    
     
opt

     

      
       This may be one of the following constants:
       
         
          CURLINFO_EFFECTIVE_URL - Last effective URL
         
        
        
         
          CURLINFO_HTTP_CODE - Last received HTTP code
         
        
        
         
          CURLINFO_FILETIME - Remote time of the retrieved document, if -1 is returned the time of the document is unknown
         
        
        
         
          CURLINFO_TOTAL_TIME - Total transaction time in seconds for last transfer
         
        
        
         
          CURLINFO_NAMELOOKUP_TIME - Time in seconds until name resolving was complete
         
        
        
         
          CURLINFO_CONNECT_TIME - Time in seconds it took to establish the connection
         
        
        
         
          CURLINFO_PRETRANSFER_TIME - Time in seconds from start until just before file transfer begins
         
        
        
         
          CURLINFO_STARTTRANSFER_TIME - Time in seconds until the first byte is about to be transferred
         
        
        
         
          CURLINFO_REDIRECT_COUNT - Number of redirects, with the CURLOPT_FOLLOWLOCATION option enabled
         
        
        
         
          CURLINFO_REDIRECT_TIME - Time in seconds of all redirection steps before final transaction was started, with the CURLOPT_FOLLOWLOCATION option enabled
         
        
        
         
          CURLINFO_REDIRECT_URL - With the CURLOPT_FOLLOWLOCATION option disabled: redirect URL found in the last transaction, that should be requested manually next. With the CURLOPT_FOLLOWLOCATION option enabled: this is empty. The redirect URL in this case is available in CURLINFO_EFFECTIVE_URL 
         
        
        
         
          CURLINFO_PRIMARY_IP - IP address of the most recent connection
         
        
        
         
          CURLINFO_PRIMARY_PORT - Destination port of the most recent connection
         
        
        
         
          CURLINFO_LOCAL_IP - Local (source) IP address of the most recent connection
         
        
        
         
          CURLINFO_LOCAL_PORT - Local (source) port of the most recent connection
         
        
        
         
          CURLINFO_SIZE_UPLOAD - Total number of bytes uploaded
         
        
        
         
          CURLINFO_SIZE_DOWNLOAD - Total number of bytes downloaded
         
        
        
         
          CURLINFO_SPEED_DOWNLOAD - Average download speed
         
        
        
         
          CURLINFO_SPEED_UPLOAD - Average upload speed
         
        
        
         
          CURLINFO_HEADER_SIZE - Total size of all headers received
         
        
        
         
          CURLINFO_HEADER_OUT - The request string sent. For this to 
          work, add the CURLINFO_HEADER_OUT option to the handle by calling 
          curl_setopt()
         
        
        
         
        CURLINFO_REQUEST_SIZE - Total size of issued requests, currently only for HTTP requests
         
        
        
         
          CURLINFO_SSL_VERIFYRESULT - Result of SSL certification verification requested by setting CURLOPT_SSL_VERIFYPEER
         
        
        
         
          CURLINFO_CONTENT_LENGTH_DOWNLOAD - content-length of download, read from Content-Length: field
         
        
        
         
          CURLINFO_CONTENT_LENGTH_UPLOAD - Specified size of upload
         
        
        
         
          CURLINFO_CONTENT_TYPE - Content-Type: of the requested document, NULL indicates server did not send valid Content-Type: header
         
        
        
         
          CURLINFO_PRIVATE - Private data associated with this cURL handle, previously set with the CURLOPT_PRIVATE option of curl_setopt()
         
        
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   If opt is given, returns its value.
   Otherwise, returns an associative array with the following elements 
   (which correspond to opt), or FALSE on failure:
   
     
      &quot;url&quot;
     
    
    
     
      &quot;content_type&quot;
     
    
    
     
      &quot;http_code&quot;
     
    
    
     
      &quot;header_size&quot;
     
    
    
     
      &quot;request_size&quot;
     
    
    
     
      &quot;filetime&quot;
     
    
    
     
      &quot;ssl_verify_result&quot;
     
    
    
     
      &quot;redirect_count&quot;
     
    
    
     
      &quot;total_time&quot;
     
    
    
     
      &quot;namelookup_time&quot;
     
    
    
     
      &quot;connect_time&quot;
     
    
    
     
      &quot;pretransfer_time&quot;
     
    
    
     
      &quot;size_upload&quot;
     
    
    
     
      &quot;size_download&quot;
     
    
    
     
      &quot;speed_download&quot;
     
    
    
     
      &quot;speed_upload&quot;
     
    
    
     
      &quot;download_content_length&quot;
     
    
    
     
      &quot;upload_content_length&quot;
     
    
    
     
      &quot;starttransfer_time&quot;
     
    
    
     
      &quot;redirect_time&quot;
     
    
    
     
      &quot;certinfo&quot;
     
    
    
     
      &quot;primary_ip&quot;
     
    
    
     
      &quot;primary_port&quot;
     
    
    
     
      &quot;local_ip&quot;
     
    
    
     
      &quot;local_port&quot;
     
    
    
     
      &quot;redirect_url&quot;
     
    
    
     
      &quot;request_header&quot; (This is only set if the CURLINFO_HEADER_OUT 
      is set by a previous call to curl_setopt())
     
    
   
   Note that private data is not included in the associative array and must be retrieved individually with the CURLINFO_PRIVATE option.
  
 " 
"curl_init", "Initialize a cURL session
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ([ string $url = NULL
  ] )

  
   Initializes a new session and return a cURL handle for use with the
   curl_setopt(), curl_exec(),
   and curl_close() functions.  
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
url

     

      
       If provided, the CURLOPT_URL option will be set
       to its value. You can manually set this using the 
       curl_setopt() function.
      
      Note: 
       
        The file protocol is disabled by cURL if
        open_basedir is set.
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a cURL handle on success, FALSE on errors.
  
 " 
"curl_multi_add_handle", "Add a normal cURL handle to a cURL multi handle
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $mh
   , resource $ch
   )

  
   Adds the ch handle to the multi handle 
   mh
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
mh


A cURL multi handle returned by
curl_multi_init().

    
ch


A cURL handle returned by
curl_init().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns 0 on success, or one of the CURLM_XXX errors
   code.
  
 " 
"curl_multi_close", "Close a set of cURL handles
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( resource $mh
   )

  
   Closes a set of cURL handles.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
mh


A cURL multi handle returned by
curl_multi_init().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"curl_multi_exec", "Run the sub-connections of the current cURL handle
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $mh
   , int &amp;$still_running
   )

  
   Processes each of the handles in the stack.  This method can be called whether or not a handle
   needs to read or write data.
   
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
mh


A cURL multi handle returned by
curl_multi_init().

    
     
still_running

     

      
       A reference to a flag to tell whether the operations are still running.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   A cURL code defined in the cURL Predefined Constants.
  
  Note: 
   
    This only returns errors regarding the whole multi stack. There might still have 
    occurred problems on individual transfers even when this function returns 
    CURLM_OK.
   
  
 " 
"curl_multi_getcontent", "Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $ch
   )

  
   If CURLOPT_RETURNTRANSFER is an option that is set for a specific handle, 
   then this function will return the content of that cURL handle in the form
   of a string.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ch


A cURL handle returned by
curl_init().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Return the content of a cURL handle if CURLOPT_RETURNTRANSFER is set.
  
 " 
"curl_multi_info_read", "Get information about the current transfers
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $mh
   [, int &amp;$msgs_in_queue = NULL
  ] )

  
   Ask the multi handle if there are any messages or information from the individual transfers. 
   Messages may include information such as an error code from the transfer or just the fact 
   that a transfer is completed.
  
     
   Repeated calls to this function will return a new result each time, until a FALSE is returned 
   as a signal that there is no more to get at this point. The integer pointed to with 
   msgs_in_queue will contain the number of remaining messages after this 
   function was called.
  
  Warning
   
    The data the returned resource points to will not survive calling 
    curl_multi_remove_handle().
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
mh


A cURL multi handle returned by
curl_multi_init().

    
     
msgs_in_queue

     

      
       Number of messages that are still in the queue
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   On success, returns an associative array for the message, FALSE on failure.
  
  
   Contents of the returned array
    
     Key:
       Value:
      msg
       The CURLMSG_DONE constant. Other return values
       are currently not available.
      result
       One of the CURLE_* constants. If everything is
       OK, the CURLE_OK will be the result.
      handle
       Resource of type curl indicates the handle which it concerns.
      " 
"curl_multi_init", "Returns a new cURL multi handle
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( void
   )

  
   Allows the processing of multiple cURL handles asynchronously.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  This function has no parameters.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a cURL multi handle resource on success, FALSE on failure.
  
 " 
"curl_multi_remove_handle", "Remove a multi handle from a set of cURL handles
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $mh
   , resource $ch
   )

  
   Removes a given ch handle from the given mh
   handle. When the ch handle has been removed, it is again perfectly 
   legal to run curl_exec() on this handle.  Removing the ch handle while being 
   used, will effectively halt the transfer in progress involving that handle.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
mh


A cURL multi handle returned by
curl_multi_init().

    
ch


A cURL handle returned by
curl_init().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns 0 on success, or one of the CURLM_XXX error
   codes.
  
 " 
"curl_multi_select", "Wait for activity on any curl_multi connection
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $mh
   [, float $timeout = 1.0
  ] )

  
    Blocks until there is activity on any of the curl_multi connections.
  

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
mh


A cURL multi handle returned by
curl_multi_init().

    
     
timeout

     

      
       Time, in seconds, to wait for a response.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   On success, returns the number of descriptors contained in 
   the descriptor sets. This may be 0 if there was no activity on any
   of the descriptors. On failure, this function will return -1 on a select
   failure (from the underlying select system call). 
  
 " 
"curl_multi_setopt", "Set an option for the cURL multi handle
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $mh
   , int $option
   , mixed $value
   )

  

  

  WarningThis function is
currently not documented; only its argument list is available.


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
mh

    

     
      
     
    

   
   
    
option

    

     
      One of the CURLMOPT_* constants.
     
    

   
   
    
value

    

      
       The value to be set on option.
      
      
       value should be an int for the
       following values of the option parameter:
       Option
           Set value to
          CURLMOPT_PIPELINING
           
            Pass 1 to enable or 0 to disable. Enabling pipelining on a multi
            handle will make it attempt to perform HTTP Pipelining as far as
            possible for transfers using this handle. This means that if you add
            a second request that can use an already existing connection, the
            second request will be &quot;piped&quot; on the same connection.
            As of cURL 7.43.0 you can also pass 2 to try to multiplex the new
            transfer over an existing HTTP/2 connection if possible.
            Instead of integer literals, you can also use the CURLPIPE_*
            constants if available.
           
          CURLMOPT_MAXCONNECTS
           
            Pass a number that will be used as the maximum amount of
            simultaneously open connections that libcurl may cache. Default is
            10. When the cache is full, curl closes the oldest one in the cache
            to prevent the number of open connections from increasing.
           
          

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"curl_multi_strerror", "Return string describing error code
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( int $errornum
   )

  
   Returns a text error message describing the given CURLM error code.
  

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
errornum

    

     
      One of the » CURLM error codes constants.
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns error string for valid error code, NULL otherwise.
  
 " 
"curl_pause", "Pause and unpause a connection
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $ch
   , int $bitmask
   )

  

  

  WarningThis function is
currently not documented; only its argument list is available.


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
ch


A cURL handle returned by
curl_init().

   
    
bitmask

    

     
      One of CURLPAUSE_* constants.
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an error code (CURLE_OK for no error).
  
 " 
"curl_reset", "Reset all options of a libcurl session handle
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( resource $ch
   )

  
   This function re-initializes all options set on the given cURL handle to the default values.
  

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
ch


A cURL handle returned by
curl_init().

  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"curl_setopt", "Set an option for a cURL transfer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $ch
   , int $option
   , mixed $value
   )

  
   Sets an option on the given cURL session handle.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ch


A cURL handle returned by
curl_init().

    
     
option

     

      
       The CURLOPT_XXX option to set.
      
     

    
    
     
value

     

      
       The value to be set on option.
      
      
       value should be a bool for the
       following values of the option parameter:
       Option
           Set value to
           Notes
          CURLOPT_AUTOREFERER
           
            TRUE to automatically set the Referer: field in
            requests where it follows a Location: redirect.
           
           
           
          CURLOPT_BINARYTRANSFER
           
            TRUE to return the raw output when
            CURLOPT_RETURNTRANSFER is used.
           
           
            From PHP 5.1.3, this option has no effect: the raw output will
            always be returned when
            CURLOPT_RETURNTRANSFER is used.
           
          CURLOPT_COOKIESESSION
           
            TRUE to mark this as a new cookie &quot;session&quot;. It will force libcurl
            to ignore all cookies it is about to load that are &quot;session cookies&quot;
            from the previous session. By default, libcurl always stores and
            loads all cookies, independent if they are session cookies or not.
            Session cookies are cookies without expiry date and they are meant
            to be alive and existing for this &quot;session&quot; only.
           
           
           
          CURLOPT_CERTINFO
           
            TRUE to output SSL certification information to STDERR
            on secure transfers.
           
           
            Added in cURL 7.19.1. 
            Available since PHP 5.3.2. 
            Requires CURLOPT_VERBOSE to be on to have an effect.
           
          CURLOPT_CONNECT_ONLY
           
            TRUE tells the library to perform all the required proxy authentication 
            and connection setup, but no data transfer. This option is implemented for 
            HTTP, SMTP and POP3.
           
           
            Added in 7.15.2.
            Available since PHP 5.5.0.
           
          CURLOPT_CRLF
           
            TRUE to convert Unix newlines to CRLF newlines
            on transfers.
           
           
           
          CURLOPT_DNS_USE_GLOBAL_CACHE
           
            TRUE to use a global DNS cache. This option is
            not thread-safe and is enabled by default.
           
           
           
          CURLOPT_FAILONERROR
           
            TRUE to fail verbosely if the HTTP code returned
            is greater than or equal to 400. The default behavior is to return
            the page normally, ignoring the code.
           
           
           
          CURLOPT_FILETIME
           
            TRUE to attempt to retrieve the modification
            date of the remote document. This value can be retrieved using
            the CURLINFO_FILETIME option with
            curl_getinfo().
           
           
           
          CURLOPT_FOLLOWLOCATION
           
            TRUE to follow any
            &quot;Location: &quot; header that the server sends as
            part of the HTTP header (note this is recursive, PHP will follow as
            many &quot;Location: &quot; headers that it is sent,
            unless CURLOPT_MAXREDIRS is set).
           
           
           
          CURLOPT_FORBID_REUSE
           
            TRUE to force the connection to explicitly
            close when it has finished processing, and not be pooled for reuse.
           
           
           
          CURLOPT_FRESH_CONNECT
           
            TRUE to force the use of a new connection
            instead of a cached one.
           
           
           
          CURLOPT_FTP_USE_EPRT
           
            TRUE to use EPRT (and LPRT) when doing active
            FTP downloads. Use FALSE to disable EPRT and LPRT and use PORT
            only.
           
           
           
          CURLOPT_FTP_USE_EPSV
           
            TRUE to first try an EPSV command for FTP
            transfers before reverting back to PASV. Set to FALSE
            to disable EPSV.
           
           
           
          CURLOPT_FTP_CREATE_MISSING_DIRS
           
            TRUE to create missing directories when an FTP operation
            encounters a path that currently doesn't exist.
           
           
           
          CURLOPT_FTPAPPEND
           
            TRUE to append to the remote file instead of
            overwriting it.
           
           
           
          CURLOPT_TCP_NODELAY
           
            TRUE to disable TCP's Nagle algorithm, which tries to minimize
            the number of small packets on the network.
           
           
            Available since PHP 5.2.1 for versions compiled with libcurl 7.11.2 or
            greater.
           
          CURLOPT_FTPASCII
           
            An alias of
            CURLOPT_TRANSFERTEXT. Use that instead.
           
           
           
          CURLOPT_FTPLISTONLY
           
            TRUE to only list the names of an FTP
            directory.
           
           
           
          CURLOPT_HEADER
           
            TRUE to include the header in the output.
           
           
           
          CURLINFO_HEADER_OUT
           
            TRUE to track the handle's request string.
           
           
            Available since PHP 5.1.3. The CURLINFO_
            prefix is intentional.
           
          CURLOPT_HTTPGET
           
            TRUE to reset the HTTP request method to GET.
            Since GET is the default, this is only necessary if the request
            method has been changed.
           
           
           
          CURLOPT_HTTPPROXYTUNNEL
           
            TRUE to tunnel through a given HTTP proxy.
           
           
           
          CURLOPT_MUTE
           
            TRUE to be completely silent with regards to
            the cURL functions.
           
           
            Removed in cURL 7.15.5 (You can use CURLOPT_RETURNTRANSFER instead)
           
          CURLOPT_NETRC
           
            TRUE to scan the ~/.netrc
            file to find a username and password for the remote site that
            a connection is being established with.
           
           
           
          CURLOPT_NOBODY
           
            TRUE to exclude the body from the output.
            Request method is then set to HEAD. Changing this to FALSE does
            not change it to GET.
           
           
           
          CURLOPT_NOPROGRESS
           
            TRUE to disable the progress meter for cURL transfers.
            Note: 
             
              PHP automatically sets this option to TRUE, this should only be
              changed for debugging purposes.
             
            
            
           
           
          CURLOPT_NOSIGNAL
           
            TRUE to ignore any cURL function that causes a
            signal to be sent to the PHP process. This is turned on by default
            in multi-threaded SAPIs so timeout options can still be used.
           
           
            Added in cURL 7.10.
           
          CURLOPT_POST
           
            TRUE to do a regular HTTP POST. This POST is the
            normal application/x-www-form-urlencoded kind,
            most commonly used by HTML forms.
           
           
           
          CURLOPT_PUT
           
            TRUE to HTTP PUT a file. The file to PUT must
            be set with CURLOPT_INFILE and
            CURLOPT_INFILESIZE.
           
           
           
          CURLOPT_RETURNTRANSFER
           
            TRUE to return the transfer as a string of the
            return value of curl_exec() instead of outputting
            it out directly.
           
           
           
          CURLOPT_SAFE_UPLOAD
           
            TRUE to disable support for the @ prefix for
            uploading files in CURLOPT_POSTFIELDS, which
            means that values starting with @ can be safely
            passed as fields. CURLFile may be used for
            uploads instead.
           
           
            Added in PHP 5.5.0 with FALSE as the default value. PHP 5.6.0
            changes the default value to TRUE.
           
          CURLOPT_SSL_VERIFYPEER
           
            FALSE to stop cURL from verifying the peer's
            certificate. Alternate certificates to verify against can be
            specified with the CURLOPT_CAINFO option
            or a certificate directory can be specified with the
            CURLOPT_CAPATH option.
           
           
            TRUE by default as of cURL 7.10. Default bundle installed as of
            cURL 7.10.
           
          CURLOPT_TRANSFERTEXT
           
            TRUE to use ASCII mode for FTP transfers.
            For LDAP, it retrieves data in plain text instead of HTML. On
            Windows systems, it will not set STDOUT to binary
            mode.
           
           
           
          CURLOPT_UNRESTRICTED_AUTH
           
            TRUE to keep sending the username and password
            when following locations (using
            CURLOPT_FOLLOWLOCATION), even when the
            hostname has changed.
           
           
           
          CURLOPT_UPLOAD
           
            TRUE to prepare for an upload.
           
           
           
          CURLOPT_VERBOSE
           
            TRUE to output verbose information. Writes
            output to STDERR, or the file specified using
            CURLOPT_STDERR.
           
           
           
          
       value should be an integer for the
       following values of the option parameter:
       Option
           Set value to
           Notes
          CURLOPT_BUFFERSIZE
           
            The size of the buffer to use for each read. There is no guarantee
            this request will be fulfilled, however.
           
           
            Added in cURL 7.10.
           
          CURLOPT_CLOSEPOLICY
           
            One of the CURLCLOSEPOLICY_* values.
            Note: 
             
              This option is deprecated, as it was never implemented in cURL and
              never had any effect.
             
            
           
           
            Removed in PHP 5.6.0.
           
          CURLOPT_CONNECTTIMEOUT
           
            The number of seconds to wait while trying to connect. Use 0 to
            wait indefinitely.
           
           
           
          CURLOPT_CONNECTTIMEOUT_MS
           
            The number of milliseconds to wait while trying to connect. Use 0 to
            wait indefinitely.
            
            If libcurl is built to use the standard system name resolver, that
            portion of the connect will still use full-second resolution for
            timeouts with a minimum timeout allowed of one second.
           
           
            Added in cURL 7.16.2. Available since PHP 5.2.3.
           
          CURLOPT_DNS_CACHE_TIMEOUT
           
            The number of seconds to keep DNS entries in memory. This
            option is set to 120 (2 minutes) by default.
           
           
           
          CURLOPT_FTPSSLAUTH
           
            The FTP authentication method (when is activated):
            CURLFTPAUTH_SSL (try SSL first),
            CURLFTPAUTH_TLS (try TLS first), or
            CURLFTPAUTH_DEFAULT (let cURL decide).
           
           
            Added in cURL 7.12.2.
           
          CURLOPT_HTTP_VERSION
           
            CURL_HTTP_VERSION_NONE (default, lets CURL
            decide which version to use),
            CURL_HTTP_VERSION_1_0 (forces HTTP/1.0),
            or CURL_HTTP_VERSION_1_1 (forces HTTP/1.1).
           
           
           
          CURLOPT_HTTPAUTH
           
            
             The HTTP authentication method(s) to use. The options are:
             CURLAUTH_BASIC,
             CURLAUTH_DIGEST,
             CURLAUTH_GSSNEGOTIATE,
             CURLAUTH_NTLM,
             CURLAUTH_ANY, and
             CURLAUTH_ANYSAFE.
            
            
             The bitwise | (or) operator can be used to combine
             more than one method. If this is done, cURL will poll the server to see
             what methods it supports and pick the best one.
            
            
             CURLAUTH_ANY is an alias for
             CURLAUTH_BASIC | CURLAUTH_DIGEST | CURLAUTH_GSSNEGOTIATE | CURLAUTH_NTLM.
            
            
             CURLAUTH_ANYSAFE is an alias for
             CURLAUTH_DIGEST | CURLAUTH_GSSNEGOTIATE | CURLAUTH_NTLM.
            
           
           
           
          CURLOPT_INFILESIZE
           
            The expected size, in bytes, of the file when uploading a file to
            a remote site. Note that using this option will not stop libcurl
            from sending more data, as exactly what is sent depends on
            CURLOPT_READFUNCTION.
           
           
           
          CURLOPT_LOW_SPEED_LIMIT
           
            The transfer speed, in bytes per second, that the transfer should be
            below during the count of CURLOPT_LOW_SPEED_TIME
            seconds before PHP considers the transfer too slow and aborts.
           
           
           
          CURLOPT_LOW_SPEED_TIME
           
            The number of seconds the transfer speed should be below
            CURLOPT_LOW_SPEED_LIMIT before PHP considers
            the transfer too slow and aborts.
           
           
           
          CURLOPT_MAXCONNECTS
           
            The maximum amount of persistent connections that are allowed.
            When the limit is reached,
            CURLOPT_CLOSEPOLICY is used to determine
            which connection to close.
           
           
           
          CURLOPT_MAXREDIRS
           
            The maximum amount of HTTP redirections to follow. Use this option
            alongside CURLOPT_FOLLOWLOCATION.
           
           
           
          CURLOPT_PORT
           
            An alternative port number to connect to.
           
           
           
          CURLOPT_POSTREDIR
           
            A bitmask of 1 (301 Moved Permanently), 2 (302 Found)
            and 4 (303 See Other) if the HTTP POST method should be maintained
            when CURLOPT_FOLLOWLOCATION is set and a
            specific type of redirect occurs.
           
           
            Added in cURL 7.19.1. Available since PHP 5.3.2.
           
          CURLOPT_PROTOCOLS
           
            
             Bitmask of CURLPROTO_* values. If used, this bitmask 
             limits what protocols libcurl may use in the transfer. This allows you to have
             a libcurl built to support a wide range of protocols but still limit specific
             transfers to only be allowed to use a subset of them. By default libcurl will
             accept all protocols it supports. 
             See also CURLOPT_REDIR_PROTOCOLS.
            
            
             Valid protocol options are: 
             CURLPROTO_HTTP,
             CURLPROTO_HTTPS,
             CURLPROTO_FTP,
             CURLPROTO_FTPS,
             CURLPROTO_SCP,
             CURLPROTO_SFTP,
             CURLPROTO_TELNET,
             CURLPROTO_LDAP,
             CURLPROTO_LDAPS,
             CURLPROTO_DICT,
             CURLPROTO_FILE,
             CURLPROTO_TFTP,
             CURLPROTO_ALL
            
           
           
            Added in cURL 7.19.4.
           
          CURLOPT_PROXYAUTH
           
            The HTTP authentication method(s) to use for the proxy connection.
            Use the same bitmasks as described in
            CURLOPT_HTTPAUTH. For proxy authentication,
            only CURLAUTH_BASIC and
            CURLAUTH_NTLM are currently supported.
           
           
            Added in cURL 7.10.7.
           
          CURLOPT_PROXYPORT
           
            The port number of the proxy to connect to. This port number can
            also be set in CURLOPT_PROXY.
           
           
           
          CURLOPT_PROXYTYPE
           
            Either CURLPROXY_HTTP (default),
            CURLPROXY_SOCKS4,
            CURLPROXY_SOCKS5,
            CURLPROXY_SOCKS4A or
            CURLPROXY_SOCKS5_HOSTNAME.
           
           
            Added in cURL 7.10.
           
          CURLOPT_REDIR_PROTOCOLS
           
            Bitmask of CURLPROTO_* values. If used, this bitmask
            limits what protocols libcurl may use in a transfer that it follows to in
            a redirect when CURLOPT_FOLLOWLOCATION is enabled.
            This allows you to limit specific transfers to only be allowed to use a subset
            of protocols in redirections. By default libcurl will allow all protocols
            except for FILE and SCP. This is a difference compared to pre-7.19.4 versions
            which unconditionally would follow to all protocols supported. 
            See also CURLOPT_PROTOCOLS for protocol constant values.
           
           
            Added in cURL 7.19.4.
           
          CURLOPT_RESUME_FROM
           
            The offset, in bytes, to resume a transfer from.
           
           
           
          CURLOPT_SSL_VERIFYHOST
           
            1 to check the existence of a common name in the
            SSL peer certificate. 2 to check the existence of
            a common name and also verify that it matches the hostname
            provided. In production environments the value of this option
            should be kept at 2 (default value).
           
           
            Support for value 1 removed in cURL 7.28.1
           
          CURLOPT_SSLVERSION
           
            One of CURL_SSLVERSION_DEFAULT (0),
            CURL_SSLVERSION_TLSv1 (1),
            CURL_SSLVERSION_SSLv2 (2),
            CURL_SSLVERSION_SSLv3 (3),
            CURL_SSLVERSION_TLSv1_0 (4),
            CURL_SSLVERSION_TLSv1_1 (5) or
            CURL_SSLVERSION_TLSv1_2 (6).
            Note: 
             
              Your best bet is to not set this and let it use the default.
              Setting it to 2 or 3 is very dangerous given the known
              vulnerabilities in SSLv2 and SSLv3.
             
            
           
           
           
          CURLOPT_TIMECONDITION
           
            How CURLOPT_TIMEVALUE is treated.
            Use CURL_TIMECOND_IFMODSINCE to return the
            page only if it has been modified since the time specified in
            CURLOPT_TIMEVALUE. If it hasn't been modified,
            a &quot;304 Not Modified&quot; header will be returned
            assuming CURLOPT_HEADER is TRUE.
            Use CURL_TIMECOND_IFUNMODSINCE for the reverse
            effect. CURL_TIMECOND_IFMODSINCE is the
            default.
           
           
           
          CURLOPT_TIMEOUT
           
            The maximum number of seconds to allow cURL functions to execute.
           
           
           
          CURLOPT_TIMEOUT_MS
           
            The maximum number of milliseconds to allow cURL functions to
            execute.
            
            If libcurl is built to use the standard system name resolver, that
            portion of the connect will still use full-second resolution for
            timeouts with a minimum timeout allowed of one second.
           
           
            Added in cURL 7.16.2. Available since PHP 5.2.3.
           
          CURLOPT_TIMEVALUE
           
            The time in seconds since January 1st, 1970. The time will be used
            by CURLOPT_TIMECONDITION. By default,
            CURL_TIMECOND_IFMODSINCE is used.
           
           
           
          CURLOPT_MAX_RECV_SPEED_LARGE
           
            If a download exceeds this speed (counted in bytes per second) on
            cumulative average during the transfer, the transfer will pause to
            keep the average rate less than or equal to the parameter value.
            Defaults to unlimited speed.
           
           
            Added in cURL 7.15.5. Available since PHP 5.4.0.
           
          CURLOPT_MAX_SEND_SPEED_LARGE
           
            If an upload exceeds this speed (counted in bytes per second) on
            cumulative average during the transfer, the transfer will pause to
            keep the average rate less than or equal to the parameter value.
            Defaults to unlimited speed.
           
           
            Added in cURL 7.15.5. Available since PHP 5.4.0.
           
          CURLOPT_SSH_AUTH_TYPES
           
            A bitmask consisting of one or more of 
            CURLSSH_AUTH_PUBLICKEY, 
            CURLSSH_AUTH_PASSWORD, 
            CURLSSH_AUTH_HOST, 
            CURLSSH_AUTH_KEYBOARD. Set to 
            CURLSSH_AUTH_ANY to let libcurl pick one.
           
           
            Added in cURL 7.16.1. 
           
          CURLOPT_IPRESOLVE
           
            Allows an application to select what kind of IP addresses to use when
            resolving host names. This is only interesting when using host names that
            resolve addresses using more than one version of IP, possible values are
            CURL_IPRESOLVE_WHATEVER, 
            CURL_IPRESOLVE_V4, 
            CURL_IPRESOLVE_V6, by default
            CURL_IPRESOLVE_WHATEVER.
           
           
            Added in cURL 7.10.8.
           
          
       value should be a string for the
       following values of the option parameter:
       Option
           Set value to
           Notes
          CURLOPT_CAINFO
           
            The name of a file holding one or more certificates to verify the
            peer with. This only makes sense when used in combination with
            CURLOPT_SSL_VERIFYPEER.
           
           
            Might require an absolute path.
           
          CURLOPT_CAPATH
           
            A directory that holds multiple CA certificates. Use this option
            alongside CURLOPT_SSL_VERIFYPEER.
           
           
           
          CURLOPT_COOKIE
           
            The contents of the &quot;Cookie: &quot; header to be
            used in the HTTP request.
            Note that multiple cookies are separated with a semicolon followed
            by a space (e.g., &quot;fruit=apple; colour=red&quot;)
           
           
           
          CURLOPT_COOKIEFILE
           
            The name of the file containing the cookie data. The cookie file can
            be in Netscape format, or just plain HTTP-style headers dumped into
            a file.
            If the name is an empty string, no cookies are loaded, but cookie
            handling is still enabled.
           
           
           
          CURLOPT_COOKIEJAR
           
            The name of a file to save all internal cookies to when the handle is closed, 
            e.g. after a call to curl_close.
           
           
           
          CURLOPT_CUSTOMREQUEST
           
            A custom request method to use instead of
            &quot;GET&quot; or &quot;HEAD&quot; when doing
            a HTTP request. This is useful for doing
            &quot;DELETE&quot; or other, more obscure HTTP requests.
            Valid values are things like &quot;GET&quot;,
            &quot;POST&quot;, &quot;CONNECT&quot; and so on;
            i.e. Do not enter a whole HTTP request line here. For instance,
            entering &quot;GET /index.html HTTP/1.0\r\n\r\n&quot;
            would be incorrect.
            Note: 
             
              Don't do this without making sure the server supports the custom
              request method first.
             
            
            
           
           
          CURLOPT_EGDSOCKET
           
            Like CURLOPT_RANDOM_FILE, except a filename
            to an Entropy Gathering Daemon socket.
           
           
           
          CURLOPT_ENCODING
           
            The contents of the &quot;Accept-Encoding: &quot; header.
            This enables decoding of the response. Supported encodings are
            &quot;identity&quot;, &quot;deflate&quot;, and
            &quot;gzip&quot;. If an empty string, &quot;&quot;,
            is set, a header containing all supported encoding types is sent.
           
           
            Added in cURL 7.10.
           
          CURLOPT_FTPPORT
           
            The value which will be used to get the IP address to use
            for the FTP &quot;PORT&quot; instruction. The &quot;PORT&quot; instruction tells
            the remote server to connect to our specified IP address.  The
            string may be a plain IP address, a hostname, a network
            interface name (under Unix), or just a plain '-' to use the
            systems default IP address.
           
           
           
          CURLOPT_INTERFACE
           
            The name of the outgoing network interface to use. This can be an
            interface name, an IP address or a host name.
           
           
           
          CURLOPT_KEYPASSWD
           
            The password required to use the CURLOPT_SSLKEY 
            or CURLOPT_SSH_PRIVATE_KEYFILE private key. 
           
           
            Added in cURL 7.16.1. 
           
          CURLOPT_KRB4LEVEL
           
            The KRB4 (Kerberos 4) security level. Any of the following values
            (in order from least to most powerful) are valid:
            &quot;clear&quot;,
            &quot;safe&quot;,
            &quot;confidential&quot;,
            &quot;private&quot;..
            If the string does not match one of these,
            &quot;private&quot; is used. Setting this option to NULL
            will disable KRB4 security. Currently KRB4 security only works
            with FTP transactions.
           
           
           
          CURLOPT_POSTFIELDS
           
            
             The full data to post in a HTTP &quot;POST&quot; operation.
             To post a file, prepend a filename with @ and
             use the full path. The filetype can be explicitly specified by
             following the filename with the type in the format
             ';type=mimetype'. This parameter can either be
             passed as a urlencoded string like 'para1=val1&amp;para2=val2&amp;...' 
             or as an array with the field name as key and field data as value.
             If value is an array, the
             Content-Type header will be set to
             multipart/form-data.
            
            
             As of PHP 5.2.0, value must be an array if
             files are passed to this option with the @ prefix.
            
            
             As of PHP 5.5.0, the @ prefix is deprecated and
             files can be sent using CURLFile. The 
             @ prefix can be disabled for safe passing of
             values beginning with @ by setting the 
             CURLOPT_SAFE_UPLOAD option to TRUE.
            
           
           
           
          CURLOPT_PROXY
           
            The HTTP proxy to tunnel requests through.
           
           
           
          CURLOPT_PROXYUSERPWD
           
            A username and password formatted as
            &quot;[username]:[password]&quot; to use for the
            connection to the proxy.
           
           
           
          CURLOPT_RANDOM_FILE
           
            A filename to be used to seed the random number generator for SSL.
           
           
           
          CURLOPT_RANGE
           
            Range(s) of data to retrieve in the format
            &quot;X-Y&quot; where X or Y are optional. HTTP transfers
            also support several intervals, separated with commas in the format
            &quot;X-Y,N-M&quot;.
           
           
           
          CURLOPT_REFERER
           
            The contents of the &quot;Referer: &quot; header to be used
            in a HTTP request.
           
           
           
          CURLOPT_SSH_HOST_PUBLIC_KEY_MD5
           
            A string containing 32 hexadecimal digits. The string should be the 
            MD5 checksum of the remote host's public key, and libcurl will reject 
            the connection to the host unless the md5sums match. 
            This option is only for SCP and SFTP transfers.
           
           
            Added in cURL 7.17.1. 
           
          CURLOPT_SSH_PUBLIC_KEYFILE
           
            The file name for your public key. If not used, libcurl defaults to 
            $HOME/.ssh/id_dsa.pub if the HOME environment variable is set, 
            and just &quot;id_dsa.pub&quot; in the current directory if HOME is not set.
           
           
            Added in cURL 7.16.1. 
           
          CURLOPT_SSH_PRIVATE_KEYFILE
           
            The file name for your private key. If not used, libcurl defaults to 
            $HOME/.ssh/id_dsa if the HOME environment variable is set, 
            and just &quot;id_dsa&quot; in the current directory if HOME is not set. 
            If the file is password-protected, set the password with 
            CURLOPT_KEYPASSWD.
           
           
            Added in cURL 7.16.1. 
           
          CURLOPT_SSL_CIPHER_LIST
           
            A list of ciphers to use for SSL. For example,
            RC4-SHA and TLSv1 are valid
            cipher lists.
           
           
           
          CURLOPT_SSLCERT
           
            The name of a file containing a PEM formatted certificate.
           
           
           
          CURLOPT_SSLCERTPASSWD
           
            The password required to use the
            CURLOPT_SSLCERT certificate.
           
           
           
          CURLOPT_SSLCERTTYPE
           
            The format of the certificate. Supported formats are
            &quot;PEM&quot; (default), &quot;DER&quot;,
            and &quot;ENG&quot;.
           
           
            Added in cURL 7.9.3.
           
          CURLOPT_SSLENGINE
           
            The identifier for the crypto engine of the private SSL key
            specified in CURLOPT_SSLKEY.
           
           
           
          CURLOPT_SSLENGINE_DEFAULT
           
            The identifier for the crypto engine used for asymmetric crypto
            operations.
           
           
           
          CURLOPT_SSLKEY
           
            The name of a file containing a private SSL key.
           
           
           
          CURLOPT_SSLKEYPASSWD
           
            The secret password needed to use the private SSL key specified in
            CURLOPT_SSLKEY.
            Note: 
             
              Since this option contains a sensitive password, remember to keep
              the PHP script it is contained within safe.
             
            
            
           
           
          CURLOPT_SSLKEYTYPE
           
            The key type of the private SSL key specified in
            CURLOPT_SSLKEY. Supported key types are
            &quot;PEM&quot; (default), &quot;DER&quot;,
            and &quot;ENG&quot;.
           
           
           
          CURLOPT_URL
           
            The URL to fetch. This can also be set when initializing a
            session with curl_init().
           
           
           
          CURLOPT_USERAGENT
           
            The contents of the &quot;User-Agent: &quot; header to be
            used in a HTTP request.
           
           
           
          CURLOPT_USERPWD
           
            A username and password formatted as
            &quot;[username]:[password]&quot; to use for the
            connection.
           
           
           
          
       value should be an array for the
       following values of the option parameter:
       Option
           Set value to
           Notes
          CURLOPT_HTTP200ALIASES
           
            An array of HTTP 200 responses that will be treated as valid
            responses and not as errors.
           
           
            Added in cURL 7.10.3.
           
          CURLOPT_HTTPHEADER
           
            An array of HTTP header fields to set, in the format
            
             array('Content-type: text<BR>lain', 'Content-length: 100')
            
           
           
           
          CURLOPT_POSTQUOTE
           
            An array of FTP commands to execute on the server after the FTP
            request has been performed.
           
           
           
          CURLOPT_QUOTE
           
            An array of FTP commands to execute on the server prior to the FTP
            request.
           
           
           
          
       value should be a stream resource (using
       fopen(), for example) for the following values of the
       option parameter:
       Option
           Set value to
          CURLOPT_FILE
           
            The file that the transfer should be written to. The default
            is STDOUT (the browser window).
           
          CURLOPT_INFILE
           
            The file that the transfer should be read from when uploading.
           
          CURLOPT_STDERR
           
            An alternative location to output errors to instead of
            STDERR.
           
          CURLOPT_WRITEHEADER
           
            The file that the header part of the transfer is written to.
           
          
       value should be the name of a valid function or a Closure 
       for the following values of the option parameter:
       Option
           Set value to
          CURLOPT_HEADERFUNCTION
           
            A callback accepting two parameters.
            The first is the cURL resource, the second is a
            string with the header data to be written. The header data must
            be written by this callback. Return the number of 
            bytes written.
           
          CURLOPT_PASSWDFUNCTION
           
            A callback accepting three parameters. 
            The first is the cURL resource, the second is a
            string containing a password prompt, and the third is the maximum
            password length. Return the string containing the password.
           
          CURLOPT_PROGRESSFUNCTION
           
            
             A callback accepting five parameters.
             The first is the cURL resource, the second is the total number of
             bytes expected to be downloaded in this transfer, the third is
             the number of bytes downloaded so far, the fourth is the total
             number of bytes expected to be uploaded in this transfer, and the
             fifth is the number of bytes uploaded so far.
            
            Note: 
             
              The callback is only called when the CURLOPT_NOPROGRESS
              option is set to FALSE.
             
            
            
             Return a non-zero value to abort the transfer. In which case, the
             transfer will set a CURLE_ABORTED_BY_CALLBACK
             error.
            
           
          CURLOPT_READFUNCTION
           
            A callback accepting three parameters. 
            The first is the cURL resource, the second is a
            stream resource provided to cURL through the option
            CURLOPT_INFILE, and the third is the maximum
            amount of data to be read. The callback must return a string
            with a length equal or smaller than the amount of data requested,
            typically by reading it from the passed stream resource. It should
            return an empty string to signal EOF.
           
          CURLOPT_WRITEFUNCTION
           
            A callback accepting two parameters. 
            The first is the cURL resource, and the second is a
            string with the data to be written. The data must be saved by
            this callback. It must return the exact number of bytes written 
            or the transfer will be aborted with an error.
           
          
       Other values:
       Option
           Set value to
          CURLOPT_SHARE
           
            A result of curl_share_init(). Makes the cURL
            handle to use the data from the shared handle.
           
          

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"curl_setopt_array", "Set multiple options for a cURL transfer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $ch
   , array $options
   )

  
   Sets multiple options for a cURL session. This function is
   useful for setting a large amount of cURL options without repetitively
   calling curl_setopt().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ch


A cURL handle returned by
curl_init().

    
     
options

     

      
       An array specifying which options to set and their values.
       The keys should be valid curl_setopt() constants or
       their integer equivalents.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if all options were successfully set. If an option could
   not be successfully set, FALSE is immediately returned, ignoring any
   future options in the options array.
  
 " 
"curl_share_close", "Close a cURL share handle
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( resource $sh
   )

  
   Closes a cURL share handle and frees all resources.
  

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
sh

    

     
      A cURL share handle returned by curl_share_init()
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"curl_share_init", "Initialize a cURL share handle
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( void
   )

  
   Allows to share data between cURL handles.
  

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  This function has no parameters.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns resource of type &quot;cURL Share Handle&quot;.
  
 " 
"curl_share_setopt", "Set an option for a cURL share handle.
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $sh
   , int $option
   , string $value
   )

  
   Sets an option on the given cURL share handle.
  

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
sh

    

     
      A cURL share handle returned by curl_share_init().
     
    

   
   
    
option

    

     
      Option
           </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
          CURLSHOPT_SHARE
           
               Specifies a type of data that should be shared.
           
          CURLSHOPT_UNSHARE
           
               Specifies a type of data that will be no longer shared.
           
          

   
   
    
value

    

     
      Value
           </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
          CURL_LOCK_DATA_COOKIE
           
               Shares cookie data.
           
          CURL_LOCK_DATA_DNS
           
               Shares DNS cache. Note that when you use cURL multi handles,
               all handles added to the same multi handle will share DNS cache
               by default.
           
          CURL_LOCK_DATA_SSL_SESSION
           
               Shares SSL session IDs, reducing the time spent on the SSL
               handshake when reconnecting to the same server. Note that SSL
               session IDs are reused within the same handle by default.
           
          

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"curl_strerror", "Return string describing the given error code
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( int $errornum
   )

  
   Returns a text error message describing the given error code.
  

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
errornum

    

     
      One of the » cURL error codes constants.
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns error description or NULL for invalid error code.
  
 " 
"curl_unescape", "Decodes the given URL encoded string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $ch
   , string $str
   )

  
   This function decodes the given URL encoded string.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
ch


A cURL handle returned by
curl_init().

   
    
str

    

     
      The URL encoded string to be decoded.
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns decoded string  or FALSE on failure.
  
 " 
"curl_version", "Gets cURL version information
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ([ int $age = CURLVERSION_NOW
  ] )

  
   Returns information about the cURL version.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
age

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an associative array with the following elements: 
   Indice
       Value description
      version_number
       cURL 24 bit version number
      version
       cURL version number, as a string
      ssl_version_number
       OpenSSL 24 bit version number
      ssl_version
       OpenSSL version number, as a string
      libz_version
       zlib version number, as a string
      host
       Information about the host where cURL was built
      age
        
      features
       A bitmask of the CURL_VERSION_XXX constants
      protocols
       An array of protocols names supported by cURL
      " 
"current", "Return theelement in an array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( array &amp;$array
   )

  
   Every array has an internal pointer to its &quotquot; element,
   which is initialized to the first element inserted into the
   array.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The array.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The) function simply returns the
   value of the array element that's NAMEly being pointed to by the
   internal pointer.  It does not move the pointer in any way.  If the
   internal pointer points beyond the end of the elements list or the array is 
   empty,) returns FALSE.
  
  WarningThis function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function.
 " 
"date", "Format a local time/NAME
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $format
   [, int $timestamp = time()
  ] )

  
   Returns a string formatted according to the given format string using the
   given integer timestamp or the current time
   if no timestamp is given.  In other words, timestamp
   is optional and defaults to the value of time().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
format

     

      
       The format of the outputtedstring. See the formatting
       options below. There are also several
       predefinedconstants
       that may be used instead, so for example DATE_RSS
       contains the format string 'D, d M Y H:i:s'.
      
      
       The following characters are recognized in the
        format parameter string
        
         format character
           </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
           Example returned values
          Day
           ---
           ---
          d
           Day of the month, 2 digits with leading zeros
           01 to 31
          D
           A textual representation of a day, three letters
           Mon through Sun
          j
           Day of the month without leading zeros
           1 to 31
          l (lowercase 'L')
           A full textual representation of the day of the week
           Sunday through Saturday
          N
           ISO-8601 numeric representation of the day of the week (added in
           PHP 5.1.0)
           1 (for Monday) through 7 (for Sunday)
          S
           English ordinal suffix for the day of the month, 2 characters
           
            st, nd, rd or
            th.  Works well with j
           
          w
           Numeric representation of the day of the week
           0 (for Sunday) through 6 (for Saturday)
          z
           The day of the year (starting from 0)
           0 through 365
          Week
           ---
           ---
          W
           ISO-8601 week number of year, weeks starting on Monday (added in PHP 4.1.0)
           Example: 42 (the 42nd week in the year)
          Month
           ---
           ---
          F
           A full textual representation of a month, such as January or March
           January through December
          m
           Numeric representation of a month, with leading zeros
           01 through 12
          M
           A short textual representation of a month, three letters
           Jan through Dec
          n
           Numeric representation of a month, without leading zeros
           1 through 12
          t
           Number of days in the given month
           28 through 31
          Year
           ---
           ---
          L
           Whether it's a leap year
           1 if it is a leap year, 0 otherwise.
          o
           ISO-8601 year number. This has the same value as
            Y, except that if the ISO week number
            (W) belongs to the previous or next year, that year
            is used instead. (added in PHP 5.1.0)
           Examples: 1999 or 2003
          Y
           A full numeric representation of a year, 4 digits
           Examples: 1999 or 2003
          y
           A two digit representation of a year
           Examples: 99 or 03
          Time
           ---
           ---
          a
           Lowercase Ante meridiem and Post meridiem
           am or pm
          A
           Uppercase Ante meridiem and Post meridiem
           AM or PM
          B
           Swatch Internet time
           000 through 999
          g
           12-hour format of an hour without leading zeros
           1 through 12
          G
           24-hour format of an hour without leading zeros
           0 through 23
          h
           12-hour format of an hour with leading zeros
           01 through 12
          H
           24-hour format of an hour with leading zeros
           00 through 23
          i
           Minutes with leading zeros
           00 to 59
          s
           Seconds, with leading zeros
           00 through 59
          u
           
            Microseconds (added in PHP 5.2.2). Note that
           ) will always generate
            000000 since it takes an integer
            parameter, whereas DateTime::format() does
            support microseconds if DateTime was
            created with microseconds.
           
           Example: 654321
          Timezone
           ---
           ---
          e
           Timezone identifier (added in PHP 5.1.0)
           Examples: UTC, GMT, Atlantic/Azores
          I (capital i)
           Whether or not theis in daylight saving time
           1 if Daylight Saving Time, 0 otherwise.
          O
           Difference to Greenwich time (GMT) in hours
           Example: +0200
          P
           Difference to Greenwich time (GMT) with colon between hours and minutes (added in PHP 5.1.3)
           Example: +02:00
          T
           Timezone abbreviation
           Examples: EST, MDT ...
          Z
           Timezone offset in seconds. The offset for timezones west of UTC is always
           negative, and for those east of UTC is always positive.
           -43200 through 50400
          Full Date/Time
           ---
           ---
          c
           ISO 8601(added in PHP 5)
           2004-02-12T15:19:21+00:00
          r
           » RFC 2822 formatted           Example: Thu, 21 Dec 2000 16:01:07 +0200
          U
           Seconds since the Unix Epoch (January 1 1970 00:00:00 GMT)
           See also time()
          
       Unrecognized characters in the format string will be printed
       as-is.  The Z format will always return
       0 when using gmNAME().
             
      Note: 
       
        Since this function only accepts integer timestamps the
        u format character is only useful when using the
        NAME_format() function with user based timestamps
        created with NAME_create().
       
      
     

    
    
    

timestamp


The optional timestamp parameter is an
integer Unix timestamp that defaults to the current
local time if a timestamp is not given. In other
words, it defaults to the value of time().


   
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a formattedstring. If a non-numeric value is used for 
   timestamp, FALSE is returned and an 
   E_WARNING level error is emitted.
  
 " 
"date_add", "Alias of DateTime::add()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  DateTime::add()
  
 " 
"date_create", "Alias of DateTime::__construct()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  DateTime::__construct()
  
 " 
"date_create_from_format", "Alias of DateTime::createFromFormat()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  DateTime::createFromFormat()
  
 " 
"date_create_immutable", "Alias of DateTimeImmutable::__construct()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  DateTimeImmutable::__construct()
  
 " 
"date_create_immutable_from_format", "Alias of DateTimeImmutable::createFromFormat()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  DateTimeImmutable::createFromFormat()
  
 " 
"date_date_set", "Alias of DateTime::setDate()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  DateTime::setDate()
  
 " 
"date_default_timezone_get", "
   Gets the default timezone used by all date/time functions in a script
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( void
   )

  
   In order of preference, this function returns the default timezone by:
   
     
      Reading the timezone set using the
      date_default_timezone_set() function (if any)
     
    
    
     
      Prior to PHP 5.4.0 only: Reading the TZ
      environment variable (if non empty)
     
    
    
     
      Reading the value of the date.timezone ini option
      (if set)
     
    
    
     
      Prior to PHP 5.4.0 only: Querying the host operating system (if supported
      and allowed by the OS). This uses an algorithm
      that has to guess the timezone. This is by no means going to work correctly for 
      every situation. A warning is shown when this stage is reached. Do not rely on it to be guessed
      correctly, and set date.timezone to the correct timezone
      instead.
     
    
   
   If none of the above succeed,)
   will return a default timezone of UTC.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string.
  
 " 
"date_default_timezone_set", "
   Sets the default timezone used by all date/time functions in a script
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $timezone_identifier
   )

  
  ) sets the default timezone
   used by all date/time functions.
  
  Note: 
   
    Since PHP 5.1.0 (when the date/time functions were rewritten), every call
    to a date/time function will generate a E_NOTICE if
    the timezone isn't valid, and/or a E_WARNING message
    if using the system settings or the TZ environment
    variable.
   
  
  
   Instead of using this function to set the default timezone in your script,
   you can also use the INI setting date.timezone to set the default
   timezone.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
timezone_identifier

     

      
       The timezone identifier, like UTC or
       Europe/Lisbon. The list of valid identifiers is
       available in the List of Supported Timezones.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function returns FALSE if the
   timezone_identifier isn't valid, or TRUE
   otherwise.
  
 " 
"date_diff", "Alias of DateTime::diff()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  DateTime::diff()
  
 " 
"date_format", "Alias of DateTime::format()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  DateTime::format()
  
 " 
"date_get_last_errors", "Alias of DateTime::getLastErrors()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  DateTime::getLastErrors()
  
 " 
"date_interval_create_from_date_string", "Alias of DateInterval::createFromDateString()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  DateInterval::createFromDateString()
  
 " 
"date_interval_format", "Alias of DateInterval::format()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  DateInterval::format()
  
 " 
"date_isodate_set", "Alias of DateTime::setISODate()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  DateTime::setISODate()
  
 " 
"date_modify", "Alias of DateTime::modify()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  DateTime::modify()
  
 " 
"date_offset_get", "Alias of DateTime::getOffset()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  DateTime::getOffset()
  
 " 
"date_parse", "Returns associative array with detailed info about given date
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $date
   )

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
date

     

      
       Date in format accepted by strtotime().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns array with information about the parsed date
   on success or FALSE on failure.
  
 " 
"date_parse_from_format", "Get info about given date formatted according to the specified format
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $format
   , string $date
   )

  
   Returns associative array with detailed info about given date.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
format

     

      
       Format accepted by DateTime::createFromFormat().
      
     

    
    
     
date

     

      
       String representing the date.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  
   Returns associative array with detailed info about given date.
  
 " 
"date_sub", "Alias of DateTime::sub()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  DateTime::sub()
  
 " 
"date_sun_info", "Returns an array with information about sunset/sunrise and twilight begin/end
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( int $time
   , float $latitude
   , float $longitude
   )

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
time

     

      
       Timestamp.
      
     

    
    
     
latitude

     

      
       Latitude in degrees.
      
     

    
    
     
longitude

     

      
       Longitude in degrees.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns array on success or FALSE on failure.
  
 " 
"date_sunrise", "Returns time of sunrise for a given day and location
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( int $timestamp
   [, int $format = SUNFUNCS_RET_STRING
   [, float $latitude = ini_get(&quot;date.default_latitude&quot;)
   [, float $longitude = ini_get(&quot;date.default_longitude&quot;)
   [, float $zenith = ini_get(&quot;date.sunrise_zenith&quot;)
   [, float $gmt_offset = 0
  ]]]]] )

  
  ) returns the sunrise time for a given
   day (specified as a timestamp) and location.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
timestamp

     

      
       The timestamp of the day from which the sunrise
       time is taken.
      
     

    
    
     
format

     

      
       format constants
        
         constant
           description
           example
          SUNFUNCS_RET_STRING
           returns the result as string
           16:46
          SUNFUNCS_RET_DOUBLE
           returns the result as float
           16.78243132
          SUNFUNCS_RET_TIMESTAMP
           returns the result as integer (timestamp)
           1095034606
          

    
    
     
latitude

     

      
       Defaults to North, pass in a negative value for South.
       See also: date.default_latitude
      
     

    
    
     
longitude

     

      
       Defaults to East, pass in a negative value for West.
       See also: date.default_longitude
      
     

    
    
     
zenith

     

      
       Default: date.sunrise_zenith
      
     

    
    
     
gmtoffset

     

      
       Specified in hours.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the sunrise time in a specified format on
   success or FALSE on failure.
  
 " 
"date_sunset", "
   Returns time of sunset for a given day and location
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( int $timestamp
   [, int $format = SUNFUNCS_RET_STRING
   [, float $latitude = ini_get(&quot;date.default_latitude&quot;)
   [, float $longitude = ini_get(&quot;date.default_longitude&quot;)
   [, float $zenith = ini_get(&quot;date.sunset_zenith&quot;)
   [, float $gmt_offset = 0
   ]]]]] )

   
   ) returns the sunset time for a given
    day (specified as a timestamp) and location.
   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
timestamp

     

      
       The timestamp of the day from which the sunset
       time is taken.
      
     

    
    
     
format

     

      
       format constants
        
         constant
           description
           example
          SUNFUNCS_RET_STRING
           returns the result as string
           16:46
          SUNFUNCS_RET_DOUBLE
           returns the result as float
           16.78243132
          SUNFUNCS_RET_TIMESTAMP
           returns the result as integer (timestamp)
           1095034606
          

    
    
     
latitude

     

      
       Defaults to North, pass in a negative value for South.
       See also: date.default_latitude
      
     

    
    
     
longitude

     

      
       Defaults to East, pass in a negative value for West.
       See also: date.default_longitude
      
     

    
    
     
zenith

     

      
       Default: date.sunset_zenith
      
     

    
    
     
gmtoffset

     

      
       Specified in hours.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the sunset time in a specified format on
   success or FALSE on failure.
  
 " 
"date_time_set", "Alias of DateTime::setTime()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  DateTime::setTime()
  
 " 
"date_timestamp_get", "Alias of DateTime::getTimestamp()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  DateTime::getTimestamp()
  
 " 
"date_timestamp_set", "Alias of DateTime::setTimestamp()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  DateTime::setTimestamp()
  
 " 
"date_timezone_get", "Alias of DateTime::getTimezone()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  DateTime::getTimezone()
  
 " 
"date_timezone_set", "Alias of DateTime::setTimezone()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  DateTime::setTimezone()
  
 " 
"dba_close", "Close a DBA database
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( resource $handle
   )

  
  ) closes the established database and frees
   all resources of the specified database handle.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handle

     

      
       The database handler, returned by dba_open() or
       dba_popen().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"dba_delete", "Delete DBA entry specified by key
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $key
   , resource $handle
   )

  
  ) deletes the specified entry from the database.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
key

     

      
       The key of the entry which is deleted.
      
     

    
    
     
handle

     

      
       The database handler, returned by dba_open() or
       dba_popen().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"dba_exists", "Check whether key exists
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $key
   , resource $handle
   )

  
  ) checks whether the specified
   key exists in the database.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
key

     

      
       The key the check is performed for.
      
     

    
    
     
handle

     

      
       The database handler, returned by dba_open() or
       dba_popen().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the key exists, FALSE otherwise.
  
 " 
"dba_fetch", "Fetch data specified by key
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $key
   , resource $handle
   )

   
    string     ( string $key
    , int $skip
    , resource $handle
    )

  
  ) fetches the data specified by
   key from the database specified with
   handle.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
key

     

      
       The key the data is specified by.
      
      Note: 
       
        When working with inifiles this function accepts arrays as keys
        where index 0 is the group and index 1 is the value name. See:
        dba_key_split().
       
      
     

    
    
     
skip

     

      
       The number of key-value pairs to ignore when using cdb databases. 
       This value is ignored for all other databases which do not support
       multiple keys with the same name.
      
     

    
    
     
handle

     

      
       The database handler, returned by dba_open() or
       dba_popen().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the associated string if the key/data pair is found, FALSE 
   otherwise.
  
 " 
"dba_firstkey", "Fetch first key
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $handle
   )

  
  ) returns the first key of the database
   and resets the internal key pointer. This permits a linear search through
   the whole database.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handle

     

      
       The database handler, returned by dba_open() or
       dba_popen().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the key on success or FALSE on failure. 
  
 " 
"dba_handlers", "List all the handlers available
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ([ bool $full_info = false
  ] )

  
  ) list all the handlers supported by this
   extension.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
full_info

     

      
       Turns on/off full information display in the result.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of database handlers. If full_info
   is set to TRUE, the array will be associative with the handlers names as
   keys, and their version information as value. Otherwise, the result will be
   an indexed array of handlers names.  
  
  Note: 
   
    When the internal cdb library is used you will see 
    cdb and cdb_make.
   
  
 " 
"dba_insert", "Insert entry
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $key
   , string $value
   , resource $handle
   )

  
  ) inserts the entry described with
   key and value into the
   database.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
key

     

      
       The key of the entry to be inserted. If this key already exist in the 
       database, this function will fail. Use dba_replace()
       if you need to replace an existent key.
      
     

    
    
     
value

     

      
       The value to be inserted.
      
     

    
    
     
handle

     

      
       The database handler, returned by dba_open() or
       dba_popen().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"dba_key_split", "
   Splits a key in string representation into array representation
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( mixed $key
   )

  
  ) splits a key (string representation)
   into an array representation.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
key

     

      
       The key in string representation.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of the form array(0 =&gt; group, 1 =&gt; 
   value_name). This function will return FALSE if 
   key is NULL or FALSE.
  
 " 
"dba_list", "List all open database files
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
  ) list all open database files.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   An associative array, in the form resourceid =&gt; filename.
  
 " 
"dba_nextkey", "Fetch next key
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $handle
   )

  
  ) returns the next key of the database
   and advances the internal key pointer.
   
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handle

     

      
       The database handler, returned by dba_open() or
       dba_popen().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the key on success or FALSE on failure. 
  
 " 
"dba_open", "Open database
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( string $path
   , string $mode
   [, string $handler
   [, mixed $...
  ]] )

  
  ) establishes a database instance for
   path with mode using
   handler.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
path

     

      
       Commonly a regular path in your filesystem.
      
     

    
    
     
mode

     

      
       It is r for read access, w for
       read/write access to an already existing database, c
       for read/write access and database creation if it doesn't currently exist,
       and n for create, truncate and read/write access.
       The database is created in BTree mode, other modes (like Hash or Queue)
       are not supported.
      
      
       Additionally you can set the database lock method with the next char. 
       Use l to lock the database with a .lck
       file or d to lock the databasefile itself. It is 
       important that all of your applications do this consistently.
      
      
       If you want to test the access and do not want to wait for the lock 
       you can add t as third character. When you are 
       absolutely sure that you do not require database locking you can do 
       so by using - instead of l or
       d. When none of d, 
       l or - is used, dba will lock
       on the database file as it would with d.
      
      Note: 
       
        There can only be one writer for one database file. When you use dba on 
        a web server and more than one request requires write operations they can
        only be done one after another. Also read during write is not allowed.
        The dba extension uses locks to prevent this. See the following table:
        DBA locking
         
          already open
            mode = &quot;rl&quot;
            mode = &quot;rlt&quot;
            mode = &quot;wl&quot;
            mode = &quot;wlt&quot;
            mode = &quot;rd&quot;
            mode = &quot;rdt&quot;
            mode = &quot;wd&quot;
            mode = &quot;wdt&quot;
           not open
            ok
            ok
            ok
            ok
            ok
            ok
            ok
            ok
           mode = &quot;rl&quot;
            ok
            ok
            wait
            false
            illegal
            illegal
            illegal
            illegal
           mode = &quot;wl&quot;
            wait
            false
            wait
            false
            illegal
            illegal
            illegal
            illegal
           mode = &quot;rd&quot;
            illegal
            illegal
            illegal
            illegal
            ok
            ok
            wait
            false
           mode = &quot;wd&quot;
            illegal
            illegal
            illegal
            illegal
            wait
            false
            wait
            false
           ok: the second call will be successfull.
         wait: the second call waits until dba_close() is called for the first.
         false: the second call returns false.
         illegal: you must not mix &quot;l&quot; and &quot;d&quot; modifiers for mode parameter.
        
     

    
    
     
handler

     

      
       The name of the handler which
       shall be used for accessing path. It is passed 
       all optional parameters given to) and 
       can act on behalf of them.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a positive handle on success or FALSE on failure.
  
 " 
"dba_optimize", "Optimize database
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $handle
   )

  
  ) optimizes the underlying database.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handle

     

      
       The database handler, returned by dba_open() or
       dba_popen().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"dba_popen", "Open database persistently
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( string $path
   , string $mode
   [, string $handler
   [, mixed $...
  ]] )

  
  ) establishes a persistent database instance
   for path with mode using
   handler.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
path

     

      
       Commonly a regular path in your filesystem.
     
     

    
    
     
mode

     

      
       It is r for read access, w for
       read/write access to an already existing database, c
       for read/write access and database creation if it doesn't currently exist,
       and n for create, truncate and read/write access.
      
     

    
    
     
handler

     

      
       The name of the handler which
       shall be used for accessing path. It is passed 
       all optional parameters given to) and 
       can act on behalf of them.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a positive handle on success or FALSE on failure.
  
 " 
"dba_replace", "Replace or insert entry
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $key
   , string $value
   , resource $handle
   )

  
  ) replaces or inserts the entry described
   with key and value into the
   database specified by handle.
   
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
key

     

      
       The key of the entry to be replaced.
      
     

    
    
     
value

     

      
       The value to be replaced.
      
     

    
    
     
handle

     

      
       The database handler, returned by dba_open() or
       dba_popen().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"dba_sync", "Synchronize database
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $handle
   )

  
  ) synchronizes the database. This will probably 
   trigger a physical write to the disk, if supported.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handle

     

      
       The database handler, returned by dba_open() or
       dba_popen().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"dcgettext", "Overrides the domain for a single lookup
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $domain
   , string $message
   , int $category
   )

  
   This function allows you to override the current domain for a
   single message lookup.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
domain

     

      
       The domain
      
     

    
    
     
message

     

      
       The message
      
     

    
    
     
category

     

      
       The category
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   A string on success.
  
 " 
"dcngettext", "Plural version of dcgettext
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $domain
   , string $msgid1
   , string $msgid2
   , int $n
   , int $category
   )

  
   This function allows you to override the current domain for a
   single plural message lookup.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
domain

     

      
       The domain
      
     

    
    
     
msgid1

     

      
      
     

    
    
     
msgid2

     

      
      
     

    
    
     
n

     

      
      
     

    
    
     
category

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   A string on success.
  
 " 
"debug_backtrace", "Generates a backtrace
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ([ int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT
   [, int $limit = 0
  ]] )

  
  ) generates a PHP backtrace.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
options

     

      
       As of 5.3.6, this parameter is a bitmask for the following options:
      ) options
        
         DEBUG_BACKTRACE_PROVIDE_OBJECT
           
            Whether or not to populate the &quot;object&quot; index.
           
          DEBUG_BACKTRACE_IGNORE_ARGS
           
            Whether or not to omit the &quot;args&quot; index, and thus all the function/method arguments,
            to save memory.
           
          

       Before 5.3.6, the only values recognized are TRUE or FALSE, which are the same as 
       setting or not setting the DEBUG_BACKTRACE_PROVIDE_OBJECT option respectively.
      
     

    
    
     
limit

     

      
       As of 5.4.0, this parameter can be used to limit the number of stack frames returned.
       By default (limit=0) it returns all stack frames.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of associative arrays. The possible returned elements
   are as follows:
  
  
   Possible returned elements from)
    
     Name
       Type
       </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
      function
       string
       
        The current function name.  See also
        __FUNCTION__.
       
      line
       integer
       
        The current line number.  See also
        __LINE__.
       
      file
       string
       
        The current file name.  See also
        __FILE__.
       
      class
       string
       
        The current class name.  See also
        __CLASS__
       
      object
       object
       
        The current object.
       
      type
       string
       
        The current call type. If a method call, &quot;-&gt;&quot; is returned. If a static
        method call, &quot;::&quot; is returned. If a function call, nothing is returned.
       
      args
       array
       
        If inside a function, this lists the functions arguments.  If
        inside an included file, this lists the included file name(s).
       
      " 
"debug_print_backtrace", "
     Prints a backtrace
    
    </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
    
     void      ([ int $options = 0
     [, int $limit = 0
    ]] )

    
    ) prints a PHP backtrace. It
     prints the function calls, included/required files and
     eval()ed stuff.
    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
options

     

      
       As of 5.3.6, this parameter is a bitmask for the following options:
      ) options
        
         DEBUG_BACKTRACE_IGNORE_ARGS
           
            Whether or not to omit the &quot;args&quot; index, and thus all the function/method arguments,
            to save memory.
           
          

    
    
     
limit

     

      
       As of 5.4.0, this parameter can be used to limit the number of stack frames printed.
       By default (limit=0) it prints all stack frames.
      
     

    
   
    </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
    
     No value is returned.
    
   " 
"debug_zval_dump", "Dumps a string representation of an internal zend value to output
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( mixed $variable
   [, mixed $...
  ] )

  
   Dumps a string representation of an internal zend value to output.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
variable

     

      
       The variable being evaluated.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"decbin", "Decimal to binary
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( int $number
   )

  
   Returns a string containing a binary representation of the given
   number argument.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
number

     

      
       Decimal value to convert
      

      Range of inputs on 32-bit machines
       
        positive number
          negative number
          return value
         0
           
          0
         1
           
          1
         2
           
          10
         ... normal progression ...
         2147483646
           
          1111111111111111111111111111110
         2147483647 (largest signed integer)
           
          1111111111111111111111111111111 (31 1's)
         2147483648
          -2147483648
          10000000000000000000000000000000
         ... normal progression ...
         4294967294
          -2
          11111111111111111111111111111110
         4294967295 (largest unsigned integer)
          -1
          11111111111111111111111111111111 (32 1's)
         Range of inputs on 64-bit machines
       
        positive number
          negative number
          return value
         0
           
          0
         1
           
          1
         2
           
          10
         ... normal progression ...
         9223372036854775806
           
          111111111111111111111111111111111111111111111111111111111111110
         9223372036854775807 (largest signed integer)
           
          111111111111111111111111111111111111111111111111111111111111111 (63 1's)
          
          -9223372036854775808
          1000000000000000000000000000000000000000000000000000000000000000
         ... normal progression ...
          
          -2
          1111111111111111111111111111111111111111111111111111111111111110
          
          -1
          1111111111111111111111111111111111111111111111111111111111111111 (64 1's)
         

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Binary string representation of number
  
 " 
"dechex", "Decimal to hexadecimal
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    string     ( int $number
    )

  
   Returns a string containing a hexadecimal representation of the given
   unsigned number argument.
  
  
   The largest number that can be converted is
   PHP_INT_MAX * 2 + 1 (or
   -1): on 32-bit platforms, this will be
   4294967295 in decimal, which results in
  ) returning ffffffff.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
number

     

      
       The decimal value to convert.
      
      
       As PHP's integer type is signed, but
      ) deals with unsigned integers, negative
       integers will be treated as though they were unsigned.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Hexadecimal string representation of number.
  
 " 
"decoct", "Decimal to octal
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    string     ( int $number
    )

  
   Returns a string containing an octal representation of the given
   number argument.  The largest number that can be converted is
   4294967295 in decimal resulting to &quot;37777777777&quot;. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
number

     

      
       Decimal value to convert
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Octal string representation of number
  
 " 
"define", "Defines a named constant
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $name
   , mixed $value
   [, bool $case_insensitive = false
  ] )

  
   Defines a named constant at runtime.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
name

     

      
       The name of the constant.
      
     

    
    
     
value

     

      
       The value of the constant. In PHP 5, value must
       be a scalar value (integer,
       float, string, boolean, or
       NULL). In PHP 7, array values are also accepted.
      
      Warning
       
        While it is possible toresource constants, it is
        not recommended and may cause unpredictable behavior.
       
      
     

    
    
     
case_insensitive

     

      
       If set to TRUE, the constant will be NAMEd case-insensitive. 
       The default behavior is case-sensitive; i.e. 
       CONSTANT and Constant represent
       different values.
      
      Note: 
       
        Case-insensitive constants are stored as lower-case.
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"defined", "Checks whether a given named constant exists
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $name
   )

  
   Checks whether the given constant exists and is
  
  Note: 
   
    If you want to see if a variable exists, use isset()
    as) only applies to constants. If you want to see if a
    function exists, use function_exists().
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
name

     

      
       The constant name.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the named constant given by name
   has been FALSE otherwise.
  
 " 
"deg2rad", "
   Converts the number in degrees to the radian equivalent
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    float     ( float $number
    )

  
   This function converts number from degrees
   to the radian equivalent.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
number

     

      
       Angular value in degrees 
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The radian equivalent of number
  
 " 
"dgettext", "Override the current domain
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $domain
   , string $message
   )

  
   The) function allows you to override
   the current domain for a single message lookup.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
domain

     

      
       The domain
      
     

    
    
     
message

     

      
       The message
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   A string on success.
  
 " 
"dir", "Return an instance of the Directory class
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   Directory    ( string $NAMEectory
   [, resource $context
  ] )

  
  
   A pseudo-object oriented mechanism for reading a NAMEectory.  The
   given NAMEectory is opened.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
NAMEectory

    

     
      Directory to open
     
    

   
   
    
context

    

     
      Note: Context support was added
with PHP 5.0.0. For a description of contexts, refer to
Streams.
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an instance of Directory, or NULL with
   wrong parameters, or FALSE in case of another error.
  
 " 
"dirname", "Returns a parent directory's path
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $path
   [, int $levels = 1
  ] )

  
   Given a string containing the path of a file or directory, this function
   will return the parent directory's path that is
   levels up from the current directory.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
path

     

      
       A path.
      
      
       On Windows, both slash (/) and backslash
       (\) are used as directory separator character. In
       other environments, it is the forward slash (/).
      
     

    
    
     
levels

     

      
       The number of parent directories to go up.
      
      
       This must be an integer greater than 0.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the path of a parent directory. If there are no slashes in
   path, a dot ('.') is returned,
   indicating the current directory. Otherwise, the returned string is
   path with any trailing
   /component removed.
  
 " 
"disk_free_space", "Returns available space on filesystem or disk partition
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   float    ( string $directory
   )

  
   Given a string containing a directory, this function will return the
   number of bytes available on the corresponding filesystem or disk
   partition.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
directory

     

      
       A directory of the filesystem or disk partition.
      
      Note: 
       
        Given a file name instead of a directory, the behaviour of the
        function is unspecified and may differ between operating systems and
        PHP versions.
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the number of available bytes as a float
    or FALSE on failure.
  
 " 
"disk_total_space", "Returns the total size of a filesystem or disk partition
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   float    ( string $directory
   )

  
   Given a string containing a directory, this function will return the total
   number of bytes on the corresponding filesystem or disk partition.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
directory

     

      
       A directory of the filesystem or disk partition.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the total number of bytes as a float
    or FALSE on failure.
  
 " 
"diskfreespace", "Alias of disk_free_space()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   disk_free_space().
  
 " 
"dl", "Loads a PHP extension at runtime
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $library
   )

  
   Loads the PHP extension given by the parameter
   library.
  
  
   Use extension_loaded() to test whether a given
   extension is already available or not. This works on both built-in
   extensions and dynamically loaded ones (either through php.ini or
  )).
  
  Warning
   
    This function was removed from most SAPIs in PHP 5.3.0, and was removed
    from PHP-FPM in PHP 7.0.0.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
library

     

      
       This parameter is only the filename of the
       extension to load which also depends on your platform. For example,
       the sockets extension (if compiled
       as a shared module, not the default!) would be called 
       sockets.so on Unix platforms whereas it is called
       php_sockets.NAMEl on the Windows platform.
      
      
       The directory where the extension is loaded from depends on your
       platform:
      
      
       Windows - If not explicitly set in the php.ini, the extension is
       loaded from C:\php4\extensions\ (PHP 4) or 
       C:\php5\ (PHP 5) by default.
      
      
       Unix - If not explicitly set in the php.ini, the default extension
       directory depends on
       
         
          whether PHP has been built with --enable-debug
          or not
         
        
        
         
          whether PHP has been built with (experimental) ZTS (Zend Thread Safety)
          support or not
         
        
        
         
          the current internal ZEND_MODULE_API_NO (Zend
          internal module API number, which is basically the date on which a
          major module API change happened, e.g. 20010901)
         
        
       
       Taking into account the above, the directory then defaults to
       /lib<BR>hp/extensions/ --ZEND_MODULE_API_NO,
       e.g.
       /usr/local<BR>hp/lib<BR>hp/extensions/debug-non-zts-20010901
       or
       /usr/local<BR>hp/lib<BR>hp/extensions/no-debug-zts-20010901.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure. If the functionality of loading modules is not available
   or has been disabled (either by setting
   enable_NAME off or by enabling safe mode
   in php.ini) an E_ERROR is emitted
   and execution is stopped. If) fails because the
   specified library couldn't be loaded, in addition to FALSE an
   E_WARNING message is emitted.
  
 " 
"dngettext", "Plural version of dgettext
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $domain
   , string $msgid1
   , string $msgid2
   , int $n
   )

  
   The) function allows you to override
   the current domain for a single plural message lookup.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
domain

     

      
       The domain
      
     

    
    
     
msgid1

     

      
      
     

    
    
     
msgid2

     

      
      
     

    
    
     
n

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   A string on success.
  
 " 
"dns_check_record", "Alias of checkdnsrr()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   checkdnsrr().
  
 " 
"dns_get_mx", "Alias of getmxrr()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   getmxrr().
  
 " 
"dns_get_record", "Fetch DNS Resource Records associated with a hostname
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $hostname
   [, int $type = DNS_ANY
   [, array &amp;$authns
   [, array &amp;$addtl
   [, bool &amp;$raw = false
  ]]]] )

  
   Fetch DNS Resource Records associated with the given
   hostname.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
hostname

     

      
       hostname should be a valid DNS hostname such
       as &quot;www.example.com&quot;. Reverse lookups can be generated
       using in-addr.arpa notation, but
       gethostbyaddr() is more suitable for
       the majority of reverse lookups.
      
      Note: 
       
        Per DNS standards, email addresses are given in user.host format (for
        example: hostmaster.example.com as opposed to hostmaster@example.com),
        be sure to check this value and modify if necessary before using it
        with a functions such as mail().
       
      
     

    
    
     
type

     

      
       By default,) will search for any
       resource records associated with hostname. 
       To limit the query, specify the optional type
       parameter. May be any one of the following:
       DNS_A, DNS_CNAME,
       DNS_HINFO, DNS_MX,
       DNS_NS, DNS_PTR,
       DNS_SOA, DNS_TXT,
       DNS_AAAA, DNS_SRV,
       DNS_NAPTR, DNS_A6,
       DNS_ALL or DNS_ANY.
      
      Note: 
       
        Because of eccentricities in the performance of libresolv
        between platforms, DNS_ANY will not
        always return every record, the slower DNS_ALL
        will collect all records more reliably.
       
      
     

    
    
     
authns

     

      
       Passed by reference and, if given, will be populated with Resource
       Records for the Authoritative Name Servers.
      
     

    
    
     
addtl

     

      
       Passed by reference and, if given, will be populated with any
       Additional Records.
      
     

    
    
     
raw

     

      
       In case of raw mode, we query only the requestd type instead of looping
       type by type before going with the additional info stuff.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function returns an array of associative arrays,
    or FALSE on failure. Each associative array contains
   at minimum the following keys:
   Basic DNS attributes
    
     Attribute
       Meaning
      host
       
        The record in the DNS namespace to which the rest of the associated data refers.
       
      class
       
       ) only returns Internet class records and as
        such this parameter will always return IN.
       
      type
       
        String containing the record type.  Additional attributes will also be contained
        in the resulting array dependant on the value of type. See table below.
       
      ttl
       
        &quot;Time To Live&quot; remaining for this record. This will not equal
        the record's original ttl, but will rather equal the original ttl minus whatever
        length of time has passed since the authoritative name server was queried.
       
      
   Other keys in associative arrays dependant on 'type'
    
     Type
       Extra Columns
      A
       
        ip: An IPv4 addresses in dotted decimal notation.
       
      MX
       
        pri: Priority of mail exchanger.
        Lower numbers indicate greater priority.
        target: FQDN of the mail exchanger.
        See also dns_get_mx().
       
      CNAME
       
        target: FQDN of location in DNS namespace to which
        the record is aliased.
       
      NS
       
        target: FQDN of the name server which is authoritative
        for this hostname.
       
      PTR
       
        target: Location within the DNS namespace to which
        this record points.
       
      TXT
       
        txt: Arbitrary string data associated with this record.
       
      HINFO
       
        cpu: IANA number designating the CPU of the machine
        referenced by this record.
        os: IANA number designating the Operating System on
        the machine referenced by this record.
        See IANA's » Operating System
        Names for the meaning of these values.
       
      SOA
       
        mname: FQDN of the machine from which the resource
        records originated.
        rname: Email address of the administrative contain
        for this domain.
        serial: Serial # of this revision of the requested
        domain.
        refresh: Refresh interval (seconds) secondary name
        servers should use when updating remote copies of this domain.
        retry: Length of time (seconds) to wait after a
        failed refresh before making a second attempt.
        expire: Maximum length of time (seconds) a secondary
        DNS server should retain remote copies of the zone data without a
        successful refresh before discarding.
        minimum-ttl: Minimum length of time (seconds) a
        client can continue to use a DNS resolution before it should request
        a new resolution from the server.  Can be overridden by individual
        resource records.
       
      AAAA
       
        ipv6: IPv6 address
       
      A6(PHP &gt;= 5.1.0)
       
        masklen: Length (in bits) to inherit from the target
        specified by chain.
        ipv6: Address for this specific record to merge with
        chain.
        chain: Parent record to merge with
        ipv6 data.
       
      SRV
       
        pri: (Priority) lowest priorities should be used first.
        weight: Ranking to weight which of commonly prioritized
        targets should be chosen at random.
        target and port: hostname and port
        where the requested service can be found.
        For additional information see: » RFC 2782
       
      NAPTR
       
        order and pref: Equivalent to
        pri and weight above.
        flags, services, regex,
        and replacement: </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre> as defined by
        » RFC 2915.
       
      " 
"dom_import_simplexml", "
   Gets a DOMElement object from a
   SimpleXMLElement object
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   DOMElement    ( SimpleXMLElement $node
   )

  
   This function takes the node node of class
   SimpleXML and makes it into a
   DOMElement node. This new object can then be used
   as a native DOMElement node. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
node

     

      
       The SimpleXMLElement node.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The DOMElement node added or FALSE if any errors occur.
  
 " 
"doubleval", "Alias of floatval()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   floatval().
  
 " 
"each", "Return the current key and value pair from an array and advance the array cursor
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array &amp;$array
   )

  
   Return the current key and value pair from an array and advance the array
   cursor.
  
  
   After) has executed, the array cursor
   will be left on the next element of the array, or past the last
   element if it hits the end of the array. You have to use
   reset() if you want to traverse the array
   again using
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The input array.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the current key and value pair from the array
   array. This pair is returned in a four-element
   array, with the keys 0, 1,
   key, and value. Elements
   0 and key contain the key name of
   the array element, and 1 and value
   contain the data.
  
  
   If the internal pointer for the array points past the end of the
   array contents,) returns
   FALSE.
  
 " 
"easter_date", "Get Unix timestamp for midnight on Easter of a given year
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ([ int $year = date(&quot;Y&quot;)
  ] )

  
   Returns the Unix timestamp corresponding to midnight on Easter of
   the given year.
  
  Warning
   
    This function will generate a warning if the year is outside
    of the range for Unix timestamps (i.e. before 1970 or after 2037).
   
  
  
   The date of Easter Day was defined by the Council of Nicaea in
   AD325 as the Sunday after the first full moon which falls on or
   after the Spring Equinox.  The Equinox is assumed to always fall
   on 21st March, so the calculation reduces to determining the date
   of the full moon and the date of the following Sunday.  The
   algorithm used here was introduced around the year 532 by
   Dionysius Exiguus.  Under the Julian Calendar (for years before
   1753) a simple 19-year cycle is used to track the phases of the
   Moon.  Under the Gregorian Calendar (for years after 1753 -
   devised by Clavius and Lilius, and introduced by Pope Gregory
   XIII in October 1582, and into Britain and its then colonies in
   September 1752) two correction factors are added to make the
   cycle more accurate.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
year

     

      
       The year as a number between 1970 an 2037. If omitted, defaults to the
       current year according to the local time.
      
     

      
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The easter date as a unix timestamp.
  
 " 
"easter_days", "Get number of days after March 21 on which Easter falls for a given year
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ([ int $year = date(&quot;Y&quot;)
   [, int $method = CAL_EASTER_DEFAULT
  ]] )

  
   Returns the number of days after March 21 on which Easter falls
   for a given year. If no year is specified, the current year is
   assumed.
  
  
   This function can be used instead of
   easter_date() to calculate Easter for years
   which fall outside the range of Unix timestamps (i.e. before 1970
   or after 2037).
  
  
   The date of Easter Day was defined by the Council of Nicaea in
   AD325 as the Sunday after the first full moon which falls on or
   after the Spring Equinox.  The Equinox is assumed to always fall
   on 21st March, so the calculation reduces to determining the date
   of the full moon and the date of the following Sunday.  The
   algorithm used here was introduced around the year 532 by
   Dionysius Exiguus.  Under the Julian Calendar (for years before
   1753) a simple 19-year cycle is used to track the phases of the
   Moon.  Under the Gregorian Calendar (for years after 1753 -
   devised by Clavius and Lilius, and introduced by Pope Gregory
   XIII in October 1582, and into Britain and its then colonies in
   September 1752) two correction factors are added to make the
   cycle more accurate.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
year

     

      
       The year as a positive number. If omitted, defaults to the
       current year according to the local time.
      
     

      
    
     
method

     

      
       Allows Easter dates to be calculated based
       on the Gregorian calendar during the years 1582 - 1752 when set to
       CAL_EASTER_ROMAN. See the calendar constants for more valid
       constants.      
       
     

      
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The number of days after March 21st that the Easter Sunday
   is in the given year.
  
 " 
"end", "Set the internal pointer of an array to its last element
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( array &amp;$array
   )

  
  ) advances array's
   internal pointer to the last element, and returns its value.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The array.  This array is passed by reference because it is modified by
       the function.  This means you must pass it a real variable and not
       a function returning an array because only actual variables may be
       passed by reference.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the value of the last element or FALSE for empty array.
  
 " 
"error_clear_last", "Clear the most recent error
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( void
   )

  
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Clears the most recent errors, making it unable to be retrieved with
   error_get_last().
  
 " 
"error_get_last", "Get the last occurred error
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
   Gets information about the last error that occurred.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an associative array describing the last error with keys &quot;type&quot;,
   &quot;message&quot;, &quot;file&quot; and &quot;line&quot;. If the error has been caused by a PHP
   internal function then the &quot;message&quot; begins with its name.
   Returns NULL if there hasn't been an error yet.
  
 " 
"error_log", "Send an error message to the defined error handling routines
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $message
   [, int $message_type = 0
   [, string $destination
   [, string $extra_headers
  ]]] )

  
   Sends an error message to the web server's error log or to a file.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
message

     

      
       The error message that should be logged.
      
     

    
    
     
message_type

     

      
       Says where the error should go. The possible message types are as 
       follows:
      
      
      ) log types
        
         0
           
            message is sent to PHP's system logger, using
            the Operating System's system logging mechanism or a file, depending
            on what the            configuration directive is set to.  This is the default option.
           
          1
           
            message is sent by email to the address in
            the destination parameter.  This is the only
            message type where the fourth parameter,
            extra_headers is used.
           
          2
           
            No longer an option.
           
          3
           
            message is appended to the file
            destination. A newline is not automatically 
            added to the end of the message string.
           
          4
           
           message is sent directly to the SAPI logging
           handler.
           
          

    
    
     
destination

     

      
       The destination. Its meaning depends on the 
       message_type parameter as described above.
      
     

    
    
     
extra_headers

     

      
       The extra headers. It's used when the message_type
       parameter is set to 1.
       This message type uses the same internal function as 
       mail() does.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"error_reporting", "Sets which PHP errors are reported
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ([ int $level
  ] )

  
   The) function sets the
     directive at runtime.  PHP has many levels of errors, using
   this function sets that level for the duration (runtime) of
   your script. If the optional level is
   not set,) will just return
   the current error reporting level.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
level

     

      
       The new       level. It takes on either a bitmask, or named constants. Using named 
       constants is strongly encouraged to ensure compatibility for future 
       versions. As error levels are added, the range of integers increases, 
       so older integer-based error levels will not always behave as expected.
      
      
       The available error level constants and the actual
       meanings of these error levels are described in the
       predefined constants.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the old   level or the current level if no level parameter is
   given.
  
 " 
"escapeshellarg", "Escape a string to be used as a shell argument
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $arg
   )

  
  ) adds single quotes around a string
   and quotes/escapes any existing single quotes allowing you to pass a
   string directly to a shell function and having it be treated as a single
   safe argument.  This function should be used to escape individual
   arguments to shell functions coming from user input.  The shell functions
   include exec(), system() and the
   backtick operator.
  
  
   On Windows,) instead removes percent
   signs, replaces double quotes with spaces and adds double quotes around the
   string.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
arg

     

      
       The argument that will be escaped.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The escaped string.
  
 " 
"escapeshellcmd", "Escape shell metacharacters
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $command
   )

  
  ) escapes any characters in a
   string that might be used to trick a shell command into executing
   arbitrary commands.  This function should be used to make sure
   that any data coming from user input is escaped before this data
   is passed to the exec() or
   system() functions, or to the backtick
   operator.
  
  
   Following characters are preceded by a backslash:
   #&amp;;`|*?~^()[]{}$\, \x0A
   and \xFF. ' and &quot;
   are escaped only if they are not paired. In Windows, all these characters
   plus % are replaced by a space instead.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
command

     

      
       The command that will be escaped.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The escaped string.
  
 " 
"exec", "Execute an external program
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $command
   [, array &amp;$output
   [, int &amp;$return_var
  ]] )

  
  ) NAMEutes the given
   command.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
command

     

      
       The command that will be NAMEuted.
      
     

    
    
     
output

     

      
       If the output argument is present, then the
       specified array will be filled with every line of output from the
       command.  Trailing whitespace, such as \n, is not
       included in this array.  Note that if the array already contains some
       elements,) will append to the end of the array.
       If you do not want the function to append elements, call
       unset() on the array before passing it to
      ).
      
     

    
    
     
return_var

     

      
       If the return_var argument is present
       along with the output argument, then the
       return status of the NAMEuted command will be written to this
       variable.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The last line from the result of the command.  If you need to NAMEute a 
   command and have all the data from the command passed directly back without 
   any interference, use the passthru() function.
  
  
   To get the output of the NAMEuted command, be sure to set and use the
   output parameter.
  
 " 
"exif_imagetype", "Determine the type of an image
   </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    int     ( string $filename
    )

   
   ) reads the first bytes of an image and
    checks its signature.
   
   
   ) can be used to avoid calls to other 
    exif functions with unsupported file types 
    or in conjunction with $_SERVER['HTTP_ACCEPT'] to check 
    whether or not the viewer is able to see a specific image in the browser.
   
  
   </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
   
    
filename

      

       
        The image being checked.
       
      

     
    
   </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
   
    When a correct signature is found, the appropriate constant value will be
    returned otherwise the return value is FALSE. The return value is the
    same value that getimagesize() returns in index 2 but
   ) is much faster.
   

   Note: 
    
    ) will emit an E_NOTICE
     and return FALSE if it is unable to read enough bytes from the file to
     determine the image type.
     
    
   
  " 
"exif_read_data", "Reads the EXIF headers from JPEG or TIFF
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $filename
   [, string $sections = NULL
   [, bool $arrays = false
   [, bool $thumbnail = false
  ]]] )

  
  ) reads the
   EXIF headers from a JPEG or 
   TIFF image file.  This way you can read meta data 
   generated by digital cameras.
  
  
   EXIF headers tend to be present in JPEG/TIFF images generated by digital
   cameras, but unfortunately each digital camera maker has a different
   idea of how to actually tag their images, so you can't always rely on
   a specific Exif header being present.
  
  
   Height and Width are computed the 
   same way getimagesize() does so their values must not be 
   part of any header returned.  Also, html is a 
   height/width text string to be used inside normal HTML.
  
  
   When an Exif header contains a Copyright note, this itself can contain two
   values. As the solution is inconsistent in the Exif 2.10 standard, the
   COMPUTED section will return both entries
   Copyright.Photographer and
   Copyright.Editor while the IFD0
   sections contains the byte array with the NULL character that splits both
   entries. Or just the first entry if the datatype was wrong (normal behaviour
   of Exif). The COMPUTED will also contain the entry
   Copyright which is either the original copyright string,
   or a comma separated list of the photo and editor copyright.
  
  
   The tag UserComment has the same problem as the Copyright
   tag. It can store two values.  First the encoding used, and second the value
   itself. If so the IFD section only contains the encoding
   or a byte array. The COMPUTED section will store both in
   the entries UserCommentEncoding and
   UserComment. The entry UserComment
   is available in both cases so it should be used in preference to the value
   in IFD0 section.
  
  
  ) also validates EXIF data tags according
   to the EXIF specification (» http://exif.org/Exif2-2.PDF, page 20).
  
  Note: 
   
    Windows Me/XP can both wipe the Exif headers when connecting to a camera.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       The name of the image file being read.  This cannot be an
       URL.
      
     

    
    
     
sections

     

      
       Is a comma separated list of sections that need to be present in file 
       to produce a result array.  If none of the requested 
       sections could be found the return value is FALSE.
       FILE
           FileName, FileSize, FileDateTime, SectionsFound
          COMPUTED
           
            html, Width, Height, IsColor, and more if available.  Height and 
            Width are computed the same way getimagesize()
            does so their values must not be part of any header returned. 
            Also, html is a height/width text string to be used inside normal 
            HTML.
           
          ANY_TAG
           Any information that has a Tag e.g. IFD0, EXIF, ...
          IFD0
           
            All tagged data of IFD0. In normal imagefiles this contains
            image size and so forth.
           
          THUMBNAIL
           
            A file is supposed to contain a thumbnail if it has a second IFD.
            All tagged information about the embedded thumbnail is stored in 
            this section.
           
          COMMENT
           Comment headers of JPEG images.
          EXIF
           
            The EXIF section is a sub section of IFD0. It contains
            more detailed information about an image. Most of these entries
            are digital camera related.
           
          

    
    
     
arrays

      

      
       Specifies whether or not each section becomes an array. The 
       sections COMPUTED,
       THUMBNAIL, and COMMENT 
       always become arrays as they may contain values whose names conflict
       with other sections.
      
     

    
    
     
thumbnail

     

      
       When set to TRUE the thumbnail itself is read.  Otherwise, only the
       tagged data is read.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   It returns an associative array where the array indexes are 
   the header names and the array values are the values associated with 
   those headers. If no data can be returned, 
  ) will return FALSE.
  
 " 
"exif_tagname", "Get the header name for an index
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    
    ( int $index
   )

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
index

     

      
       The Tag ID for which a Tag Name will be looked up.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the header name, or FALSE if index is
   not a defined EXIF tag id.
  
 " 
"exif_thumbnail", "Retrieve the embedded thumbnail of a TIFF or JPEG image
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $filename
   [, int &amp;$width
   [, int &amp;$height
   [, int &amp;$imagetype
  ]]] )

  
  ) reads the embedded thumbnail of a 
   TIFF or JPEG image. 
  
  
   If you want to deliver thumbnails through this function, you should send
   the mimetype information using the header() function.
  
  
   It is possible that) cannot create an 
   image but can determine its size. In this case, the return value is 
   FALSE but width and height 
   are set.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       The name of the image file being read.  This image contains an
       embedded thumbnail.
      
     

    
    
     
width

     

      
       The return width of the returned thumbnail.
      
     

    
    
     
height

     

      
       The returned height of the returned thumbnail.
      
     

    
    
     
imagetype

     

      
       The returned image type of the returned thumbnail.  This is either
       TIFF or JPEG.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the embedded thumbnail, or FALSE if the image contains no 
   thumbnail.
  
 " 
"exp", "Calculates the NAMEonent of e
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    float     ( float $arg
    )

  
   Returns e raised to the power of arg.
  
  Note: 
   
    'e' is the base of the natural system of logarithms, or approximately
    2.718282.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
arg

     

      
       The argument to process
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   'e' raised to the power of arg
  
 " 
"explode", "Split a string by string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $delimiter
   , string $string
   [, int $limit = PHP_INT_MAX
  ] )

  
   Returns an array of strings, each of which is a substring of
   string formed by splitting it on
   boundaries formed by the string delimiter.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
delimiter

     

      
       The boundary string.
      
     

    
    
     
string

     

      
       The input string.
      
     

    
    
     
limit

     

      
       If limit is set and positive, the returned array will contain
       a maximum of limit elements with the last
       element containing the rest of string.
      
      
       If the limit parameter is negative, all components
       except the last -limit are returned.
      
      
       If the limit parameter is zero, then this is treated as 1.
      
     

    
   Note: 
   
    Although implode() can, for historical reasons,
    accept its parameters in either order,
   ) cannot. You must ensure that the
    delimiter argument comes before the
    string argument.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of strings
   created by splitting the string parameter on
   boundaries formed by the delimiter.
  
  
   If delimiter is an empty string (&quot;&quot;),
  ) will return FALSE.
   If delimiter contains a value that is not
   contained in string and a negative
   limit is used, then an empty array will be
   returned, otherwise an array containing
   string will be returned.
  
 " 
"expm1", "
   Returns exp(number) - 1, computed in a way that is accurate even
   when the value of number is close to zero
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   float    ( float $arg
   )

  
  ) returns the equivalent to
   'exp(arg) -  1' computed in a way that is
   accurate even if the value of arg is near zero,
   a case where 'exp (arg) - 1' would be
   inaccurate due to subtraction of two numbers that are nearly equal.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
arg

     

      
       The argument to process
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   'e' to the power of arg minus one
  
 " 
"extension_loaded", "Find out whether an extension is loaded
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $name
   )

  
   Finds out whether the extension is loaded.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
name

     

      
       The extension name. This parameter is case-insensitive.
      
      
       You can see the names of various extensions by using
       phpinfo() or if you're using the
       CGI or CLI version of
       PHP you can use the -m
 switch to
       list all available extensions:
       

$ php -m
[PHP Modules]
xml
tokenizer
standard
sockets
session
posix
pcre
overload
mysql
mbstring
ctype

[Zend Modules]

       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the extension identified by name
   is loaded, FALSE otherwise.
  
 " 
"extract", "Import variables into the current symbol table from an array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( array &amp;$array
   [, int $flags = EXTR_OVERWRITE
   [, string $prefix = NULL
  ]] )

  
   Import variables from an array into the current symbol table.
  
  
   Checks each key to see whether it has a valid variable name. 
   It also checks for collisions with existing variables in
   the symbol table.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       An associative array. This function treats keys as variable names and
       values as variable values.  For each key/value pair it will create a
       variable in the current symbol table, subject to
       flags and prefix parameters.
      
      
       You must use an associative array; a numerically indexed array
       will not produce results unless you use EXTR_PREFIX_ALL or
       EXTR_PREFIX_INVALID.
      
     

    
    
     
flags

     

      
       The way invalid/numeric keys and collisions are treated is determined
       by the NAMEion flags. It can be one of the
       following values:
       
EXTR_OVERWRITE

         

          
           If there is a collision, overwrite the existing variable.
          
         

        
        
         
EXTR_SKIP

         

          
           If there is a collision, don't overwrite the existing
           variable.
          
         

        
        
         
EXTR_PREFIX_SAME

         

          If there is a collision, prefix the variable name with
           prefix.
          
         

        
        
         
EXTR_PREFIX_ALL

         

          
           Prefix all variable names with
           prefix.
          
         

        
        
         
EXTR_PREFIX_INVALID

         

          
           Only prefix invalid/numeric variable names with
           prefix.
          
         

        
        
         
EXTR_IF_EXISTS

         

          
           Only overwrite the variable if it already exists in the
           current symbol table, otherwise do nothing.  This is useful
           for defining a list of valid variables and then NAMEing
           only those variables you have defined out of
           $_REQUEST, for example.
          
         

        
        
         
EXTR_PREFIX_IF_EXISTS

         

          
           Only create prefixed variable names if the non-prefixed version
           of the same variable exists in the current symbol table.
          
         

        
        
         
EXTR_REFS

         

          
           Extracts variables as references. This effectively means that the
           values of the imported variables are still referencing the values of
           the array parameter. You can use this flag
           on its own or combine it with any other flag by OR'ing the
           flags.
          
         

        
       
       If flags is not specified, it is
       assumed to be EXTR_OVERWRITE.
      
     

    
    
     
prefix

     

      
       Note that prefix is only required if
       flags is EXTR_PREFIX_SAME,
       EXTR_PREFIX_ALL, EXTR_PREFIX_INVALID
       or EXTR_PREFIX_IF_EXISTS. If
       the prefixed result is not a valid variable name, it is not
       imported into the symbol table. Prefixes are automatically separated from
       the array key by an underscore character.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the number of variables successfully imported into the symbol
   table.
  
 " 
"ezmlm_hash", "Calculate the hash value needed by EZMLM
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $addr
   )

  
  ) calculates the hash value needed
   when keeping EZMLM mailing lists in a MySQL database.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
addr

     

      
       The email address that's being hashed.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The hash value of addr.
  
 " 
"fclose", "Closes an open file pointer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $handle
   )

  
   The file pointed to by handle is closed.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handle

     

      
       The file pointer must be valid, and must point to a file successfully
       opened by fopen() or fsockopen().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"feof", "Tests for end-of-file on a file pointer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $handle
   )

  
   Tests for end-of-file on a file pointer.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handle

     

      The file pointer must be valid, and must point to
a file successfully opened by fopen() or
fsockopen() (and not yet closed by
fclose()).
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the file pointer is at EOF or an error occurs
   (including socket timeout); otherwise returns FALSE.
  
 " 
"fflush", "Flushes the output to a file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $handle
   )

  
   This function forces a write of all buffered output to the resource
   pointed to by the file handle.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handle

     

      The file pointer must be valid, and must point to
a file successfully opened by fopen() or
fsockopen() (and not yet closed by
fclose()).
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"fgetc", "Gets character from file pointer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $handle
   )

  
   Gets a character from the given file pointer.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handle

     

      The file pointer must be valid, and must point to
a file successfully opened by fopen() or
fsockopen() (and not yet closed by
fclose()).
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string containing a single character read from the file pointed
   to by handle. Returns FALSE on EOF.
  
  WarningThis function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function.
 " 
"fgetcsv", "Gets line from file pointer and parse for CSV fields
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $handle
   [, int $length = 0
   [, string $delimiter = &quot;,&quot;
   [, string $enclosure = '&quot;'
   [, string $escape = &quot;\&quot;
  ]]]] )

  
   Similar to fgets() except that
  ) parses the line it reads for fields in
   CSV format and returns an array containing the fields
   read.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handle

     

      
       A valid file pointer to a file successfully opened by
       fopen(), popen(), or
       fsockopen().
      
     

    
    
     
length

     

      
       Must be greater than the longest line (in characters) to be found in
       the CSV file (allowing for trailing line-end characters). It became
       optional in PHP 5. Omitting this parameter (or setting it to 0 in PHP
       5.1.0 and later) the maximum line length is not limited, which is
       slightly slower.
      
     

    
    
     
delimiter

     

      
       The optional delimiter parameter sets the field delimiter (one character only).
      
     

    
    
     
enclosure

     

      
       The optional enclosure parameter sets the field enclosure character (one character only).
      
     

    
    
     
escape

     

      
       The optional escape parameter sets the escape character (one character only).
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an indexed array containing the fields read.
  
  Note: 
   
    A blank line in a CSV file will be returned as an array
    comprising a single null field, and will not be treated
    as an error.
   
  
  Note: If PHP is not properly recognizing
the line endings when reading files either on or created by a Macintosh
computer, enabling the
auto_detect_line_endings
run-time configuration option may help resolve the problem.
  
  ) returns NULL if an invalid
   handle is supplied or FALSE on other errors,
   including end of file.
  
 " 
"fgets", "Gets line from file pointer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $handle
   [, int $length
  ] )

  
   Gets a line from file pointer.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handle

     

      The file pointer must be valid, and must point to
a file successfully opened by fopen() or
fsockopen() (and not yet closed by
fclose()).
     

    
    
     
length

     

      
       Reading ends when length - 1 bytes have been
       read, or a newline (which is included in the return value), or an EOF
       (whichever comes first). If no length is specified, it will keep
       reading from the stream until it reaches the end of the line.
      
      Note: 
       
        Until PHP 4.3.0, omitting it would assume 1024 as the line length.
        If the majority of the lines in the file are all larger than 8KB,
        it is more resource efficient for your script to specify the maximum
        line length.
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string of up to length - 1 bytes read from
   the file pointed to by handle. If there is no more data 
   to read in the file pointer, then FALSE is returned.
  
  
   If an error occurs, FALSE is returned.
  
 " 
"fgetss", "Gets line from file pointer and strip HTML tags
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $handle
   [, int $length
   [, string $allowable_tags
  ]] )

  
   Identical to fgets(), except that
  ) attempts to strip any NUL bytes, HTML and PHP tags from
   the text it reads.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handle

     

      The file pointer must be valid, and must point to
a file successfully opened by fopen() or
fsockopen() (and not yet closed by
fclose()).
     

    
    
     
length

     

      
       Length of the data to be retrieved.
      
     

    
    
     
allowable_tags

     

      
       You can use the optional third parameter to specify tags which should
       not be stripped.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string of up to length - 1 bytes read from
   the file pointed to by handle, with all HTML and PHP
   code stripped.
  
  
   If an error occurs, returns FALSE.
  
 " 
"file", "Reads entireinto an array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $NAMEname
   [, int $flags = 0
   [, resource $context
  ]] )

  
   Reads an entireinto an array.
  
  Note: 
   
    You can use NAME_get_contents() to return the contents
    of aas a string.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
NAMEname

     

      
       Path to the
      
      TipA URL can be used as a
NAMEname with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the
NAMEname. See the Supported Protocols and Wrappers for links to information
about what abilities the various wrappers have, notes on their usage,
and information on any predefined variables they may
provide.
     

    
    
     
flags

     

      
       The optional parameter flags can be one, or
       more, of the following constants:
       

          FILE_USE_INCLUDE_PATH
         

         

          
           Search for thein the include_path.
          
         

        
        
         

          FILE_IGNORE_NEW_LINES
         

         

          
           Do not add newline at the end of each array element
          
         

        
        
         

          FILE_SKIP_EMPTY_LINES
         

         

          
           Skip empty lines
          
         

        
       

    
    
     
context

     

      
       A context resource created with the 
       stream_context_create() function.
      
      
       Note: Context support was added
with PHP 5.0.0. For a description of contexts, refer to
Streams.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns thein an array. Each element of the array corresponds to a
   line in the with the newline still attached. Upon failure,
  ) returns FALSE.
  
  Note: 
   
    Each line in the resulting array will include the line ending, unless
    FILE_IGNORE_NEW_LINES is used, so you still need to
    use rtrim() if you do not want the line ending
    present.
   
  
  Note: If PHP is not properly recognizing
the line endings when reading NAMEs either on or created by a Macintosh
computer, enabling the
auto_detect_line_endings
run-time configuration option may help resolve the problem.
 " 
"file_exists", "Checks whether a file or directory exists
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $filename
   )

  
   Checks whether a file or directory exists.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the file or directory.
      
      
       On windows, use //computername/share/filename or
       \\computername\share\filename to check files on
       network shares.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the file or directory specified by
   filename exists; FALSE otherwise.
  
  Note: 
   
    This function will return FALSE for symlinks pointing to non-existing
    files.
   
  
  Warning
   
    This function returns FALSE for files inaccessible due to safe mode restrictions. However these
    files still can be included if
    they are located in safe_mode_include_dir.
   
  
  Note: 
   
    The check is done using the real UID/GID instead of the effective one.
   
  
  Note: 
    Because PHP's integer type is signed and many platforms use 32bit integers,
    some filesystem functions may return unexpected results for files which
    are larger than 2GB.
   
 " 
"file_get_contents", "Reads entire file into a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $filename
   [, bool $use_include_path = false
   [, resource $context
   [, int $offset = 0
   [, int $maxlen
  ]]]] )

   
   This function is similar to file(), except that
  ) returns the file in a 
   string, starting at the specified offset 
   up to maxlen bytes. On failure, 
  ) will return FALSE.
  
  
  ) is the preferred way to read the
   contents of a file into a string.  It will use memory mapping techniques if
   supported by your OS to enhance performance.
  
  Note: 
   
    If you're opening a URI with special characters, such as spaces, you
    need to encode the URI with urlencode().
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Name of the file to read.
      
     

    
    
     
use_include_path

     

      Note: 
       
        As of PHP 5 the FILE_USE_INCLUDE_PATH constant can be used
        to trigger include path
        search.
       
      
     

    
    
     
context

     

      
       A valid context resource created with 
       stream_context_create(). If you don't need to use a
       custom context, you can skip this parameter by NULL.
      
     

    
    
     
offset

     

      
       The offset where the reading starts on the original stream.
      
      
       Seeking (offset) is not supported with remote files.
       Attempting to seek on non-local files may work with small offsets, but this
       is unpredictable because it works on the buffered stream.
      
     

    
    
     
maxlen

     

      
       Maximum length of data read. The default is to read until end
       of file is reached. Note that this parameter is applied to the 
       stream processed by the filters.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The function returns the read data  or FALSE on failure.
  
  WarningThis function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function.
 " 
"file_put_contents", "Write a string to a file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $filename
   , mixed $data
   [, int $flags = 0
   [, resource $context
  ]] )

   
   This function is identical to calling fopen(), 
   fwrite() and fclose() successively
   to write data to a file.
  
  
   If filename does not exist, the file is created.
   Otherwise, the existing file is overwritten, unless the 
   FILE_APPEND flag is set.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the file where to write the data.
      
     

    
    
     
data

     

      
       The data to write. Can be either a string, an
       array or a stream resource.
      
      
       If data is a stream resource, the
       remaining buffer of that stream will be copied to the specified file.
       This is similar with using stream_copy_to_stream().
      
      
       You can also specify the data parameter as a single
       dimension array. This is equivalent to
      $filename, implode('', $array)).
      
     

    
    
     
flags

     

      
       The value of flags can be any combination of 
       the following flags, joined with the binary OR (|)
       operator.
      
      
       Available flags
        
         Flag
           </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
          
            FILE_USE_INCLUDE_PATH
           
           
            Search for filename in the include directory.
            See include_path for more
            information.
           
          
            FILE_APPEND
           
           
            If file filename already exists, append 
            the data to the file instead of overwriting it.
           
          
            LOCK_EX
           
           
            Acquire an exclusive lock on the file while proceeding to the 
            writing. In other words, a flock() call happens
            between the fopen() call and the 
            fwrite() call. This is not identical to an 
            fopen() call with mode &quot;x&quot;.
           
          

    
    
     
context

     

      
       A valid context resource created with 
       stream_context_create().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function returns the number of bytes that were written to the file, or
   FALSE on failure.
  
  WarningThis function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function.
 " 
"fileatime", "Gets last access time of file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $filename
   )

  
   Gets the last access time of the given file.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the file.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the time the file was last accessed,  or FALSE on failure.
   The time is returned as a Unix timestamp.
  
 " 
"filectime", "Gets inode change time of file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $filename
   )

  
   Gets the inode change time of a file.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the file.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the time the file was last changed,  or FALSE on failure.
   The time is returned as a Unix timestamp.
  
 " 
"filegroup", "Gets file group
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $filename
   )

  
   Gets the file group. The group ID is returned in numerical format, use
   posix_getgrgid() to resolve it to a group name.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the file.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the group ID of the file, or FALSE if
   an error occurs. The group ID is returned in numerical format, use
   posix_getgrgid() to resolve it to a group name.
   Upon failure, FALSE is returned.
  
 " 
"fileinode", "Gets file inode
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $filename
   )

  
   Gets the file inode.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the file.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the inode number of the file,  or FALSE on failure.
  
 " 
"filemtime", "Gets file modification time
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $filename
   )

  
   This function returns the time when the data blocks of a file were being
   written to, that is, the time when the content of the file was changed.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the file.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the time the file was last modified,  or FALSE on failure.
   The time is returned as a Unix timestamp, which is
   suitable for the date() function.
  
 " 
"fileowner", "Gets file owner
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $filename
   )

  
   Gets the file owner.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the file.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the user ID of the owner of the file,  or FALSE on failure.
   The user ID is returned in numerical format, use
   posix_getpwuid() to resolve it to a username.
  
 " 
"fileperms", "Gets file permissions
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $filename
   )

  
   Gets permissions for the given file.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the file.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the file's permissions as a numeric mode. Lower bits of this mode
   are the same as the permissions expected by chmod(),
   however on most platforms the return value will also include information on
   the type of file given as filename. The examples
   below demonstrate how to test the return value for specific permissions and
   file types on POSIX systems, including Linux and Mac OS X.
  
  
   For local files, the specific return value is that of the
   st_mode member of the structure returned by the C
   library's stat() function. Exactly which bits are set
   can vary from platform to platform, and looking up your specific platform's
   documentation is recommended if parsing the non-permission bits of the
   return value is required.
  
 " 
"filesize", "Gets file size
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $filename
   )

  
   Gets the size for the given file.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the file.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the size of the file in bytes, or FALSE (and generates an error
   of level E_WARNING) in case of an error.
  
  Note: 
    Because PHP's integer type is signed and many platforms use 32bit integers,
    some filesystem functions may return unexpected results for files which
    are larger than 2GB.
   
 " 
"filetype", "Gets file type
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $filename
   )

  
   Returns the type of the given file.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the file.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the type of the file. Possible values are fifo, char,
   dir, block, link, file, socket and unknown.
  
  
   Returns FALSE if an error occurs.) will also
   produce an E_NOTICE message if the stat call fails
   or if the file type is unknown.
  
 " 
"filter_has_var", "Checks if variable of specified type exists
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( int $type
   , string $variable_name
   )


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
type

     

      
       One of INPUT_GET, INPUT_POST,
       INPUT_COOKIE, INPUT_SERVER, or
       INPUT_ENV.
      
     

    
    
     
variable_name

     

      
       Name of a variable to check.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"filter_id", "Returns the filter ID belonging to a named filter
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $filtername
   )


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filtername

     

      
       Name of a filter to get.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   ID of a filter on success or FALSE if filter doesn't exist.
  
 " 
"filter_input", "Gets a specific external variable by name and optionally filters it
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( int $type
   , string $variable_name
   [, int $filter = FILTER_DEFAULT
   [, mixed $options
  ]] )


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
type

     

      
       One of INPUT_GET, INPUT_POST,
       INPUT_COOKIE, INPUT_SERVER, or
       INPUT_ENV.
      
     

    
    
     
variable_name

     

      
       Name of a variable to get.
      
     

    
    
 
  
filter

  

   
    The ID of the filter to apply. The Types of filters
    manual page lists the available filters.
   
   
    If omitted, FILTER_DEFAULT will be used, which is
    equivalent to
    FILTER_UNSAFE_RAW.
    This will result in no filtering taking place by default.
   
  

 

    
     
options

     

      
       Associative array of options or bitwise disjunction of flags. If filter
       accepts options, flags can be provided in &quot;flags&quot; field of array.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Value of the requested variable on success, FALSE if the filter fails,
   or NULL if the variable_name variable is not set.
   If the flag FILTER_NULL_ON_FAILURE is used, it
   returns FALSE if the variable is not set and NULL if the filter fails.
   
 " 
"filter_input_array", "Gets external variables and optionally filters them
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( int $type
   [, mixed $definition
   [, bool $add_empty = true
  ]] )

  
   This function is useful for retrieving many values without
   repetitively calling filter_input().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
type

     

      
       One of INPUT_GET, INPUT_POST,
       INPUT_COOKIE, INPUT_SERVER, or
       INPUT_ENV.
      
     

    
    
     
definition

     

      
       An array defining the arguments. A valid key is a string
       containing a variable name and a valid value is either a filter type, or an array
       optionally specifying the filter, flags and options. If the value is an
       array, valid keys are filter which specifies the
       filter type,
       flags which specifies any flags that apply to the
       filter, and options which specifies any options that
       apply to the filter. See the example below for a better understanding.
      
      
       This parameter can be also an integer holding a filter constant. Then all values in the
       input array are filtered by this filter.
      
     

    
    
     
add_empty

     

      
       Add missing keys as NULL to the return value.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   An array containing the values of the requested variables on success, or FALSE 
   on failure. An array value will be FALSE if the filter fails, or NULL if 
   the variable is not set. Or if the flag FILTER_NULL_ON_FAILURE
   is used, it returns FALSE if the variable is not set and NULL if the filter 
   fails.
  
 " 
"filter_list", "Returns a list of all supported filters
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of names of all supported filters, empty array if there
   are no such filters. Indexes of this array are not filter IDs, they can be
   obtained with filter_id() from a name instead.
  
 " 
"filter_var", "Filters a variable with a specified filter
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( mixed $variable
   [, int $filter = FILTER_DEFAULT
   [, mixed $options
  ]] )


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
variable

     

      
       Value to filter.
      
     

    
    
 
  
filter

  

   
    The ID of the filter to apply. The Types of filters
    manual page lists the available filters.
   
   
    If omitted, FILTER_DEFAULT will be used, which is
    equivalent to
    FILTER_UNSAFE_RAW.
    This will result in no filtering taking place by default.
   
  

 

    
     
options

     

      
       Associative array of options or bitwise disjunction of flags. If filter
       accepts options, flags can be provided in &quot;flags&quot; field of array. For
       the &quot;callback&quot; filter, callable type should be passed.  The
       callback must accept one argument, the value to be filtered, and return
       the value after filtering/sanitizing it.
      
      
       
        



       

      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the filtered data, or FALSE if the filter fails.
  
 " 
"filter_var_array", "Gets multiple variables and optionally filters them
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( array $data
   [, mixed $definition
   [, bool $add_empty = true
  ]] )

  
   This function is useful for retrieving many values without
   repetitively calling filter_var().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
data

     

      
       An array with string keys containing the data to filter.
      
     

    
    
     
definition

     

      
       An array defining the arguments. A valid key is a string
       containing a variable name and a valid value is either a
       filter type, or an
       array optionally specifying the filter, flags and options.
       If the value is an array, valid keys are filter
       which specifies the filter type,
       flags which specifies any flags that apply to the
       filter, and options which specifies any options that
       apply to the filter. See the example below for a better understanding.
      
      
       This parameter can be also an integer holding a filter constant. Then all values in the
       input array are filtered by this filter.
      
     

    
    
     
add_empty

     

      
       Add missing keys as NULL to the return value.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   An array containing the values of the requested variables on success, or FALSE 
   on failure. An array value will be FALSE if the filter fails, or NULL if 
   the variable is not set.
  
 " 
"finfo_buffer", "Return information about a string buffer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Procedural style
  
   string    ( resource $finfo
   , string $string = NULL
   [, int $options = FILEINFO_NONE
   [, resource $context = NULL
  ]] )

  Object oriented style
  
   public string finfo::buffer
    ( string $string = NULL
   [, int $options = FILEINFO_NONE
   [, resource $context = NULL
  ]] )


  
   This function is used to get information about binary data in a string.
  

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
finfo

     

      
       Fileinfo resource returned by finfo_open().
      
     

    
    
     
string

     

      
       Content of a file to be checked.
      
     

    
    
     
options

     

      
       One or disjunction of more Fileinfo
       constants.
      
     

    
    
     
context

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a textual description of the string
   argument, or FALSE if an error occurred.
  
 " 
"finfo_close", "Close fileinfo resource
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $finfo
   )


  
   This function closes the resource opened by finfo_open().
  

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
finfo

     

      
       Fileinfo resource returned by finfo_open().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"finfo_file", "Return information about a file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Procedural style
  
   string    ( resource $finfo
   , string $file_name = NULL
   [, int $options = FILEINFO_NONE
   [, resource $context = NULL
  ]] )

  Object oriented style
  
   public string finfo::file
    ( string $file_name = NULL
   [, int $options = FILEINFO_NONE
   [, resource $context = NULL
  ]] )


  
   This function is used to get information about a file.
  

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
finfo

     

      
       Fileinfo resource returned by finfo_open().
      
     

    
    
     
file_name

     

      
       Name of a file to be checked.
      
     

    
    
     
options

     

      
       One or disjunction of more Fileinfo
       constants.
      
     

    
    
     
context

     

      
       For a description of contexts, refer to Stream Functions.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a textual description of the contents of the
   file_name argument, or FALSE if an error occurred.
  
 " 
"finfo_open", "Create a new fileinfo resource
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Procedural style
  
   resource    ([ int $options = FILEINFO_NONE
   [, string $magic_file = NULL
  ]] )

  Object oriented style (constructor):
  
   public finfo::__construct
    ([ int $options = FILEINFO_NONE
   [, string $magic_file = NULL
  ]] )

  
   This function opens a magic database and returns its resource.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
options

     

      
       One or disjunction of more Fileinfo
       constants.
      
     

    
    
     
magic_file

     

      
       Name of a magic database file, usually something like
       <BR>ath/to/magic.mime. If not specified, the
       MAGIC environment variable is used. If the
       environment variable isn't set, then PHP's bundled magic database will
       be used.
      
      
       Passing NULL or an empty string will be equivalent to the default
       value.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   (<br />Procedural style only)
   Returns a magic database resource on success or FALSE on failure.
  
 " 
"finfo_set_flags", "Set libmagic configuration options
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Procedural style
  
   bool    ( resource $finfo
   , int $options
   )

  Object oriented style
  
   public bool finfo::set_flags
    ( int $options
   )


  
   This function sets various Fileinfo options. Options can be set also
   directly in finfo_open() or other Fileinfo functions.
  

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
finfo

     

      
       Fileinfo resource returned by finfo_open().
      
     

    
    
     
options

     

      
       One or disjunction of more Fileinfo
       constants.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"floatval", "Get float value of a variable
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   float    ( mixed $var
   )

  
   Gets the float value of var.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
var

     

      
       May be any scalar type.) should not be used
       on objects, as doing so will emit an E_NOTICE level
       error and return 1.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The float value of the given variable. Empty arrays return 0, non-empty
   arrays return 1.
  
  
   Strings will most likely return 0 although this depends on the 
   leftmost characters of the string. The common rules of 
   float casting 
   apply.
  
 " 
"flock", "Portable advisory file locking
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $handle
   , int $operation
   [, int &amp;$wouldblock
  ] )

  
  ) allows you to perform a simple reader/writer
   model which can be used on virtually every platform (including most Unix
   derivatives and even Windows).
  
  
   On versions of PHP before 5.3.2, the lock is released also by
   fclose() (which is also called automatically when script
   finished).
  
  
   PHP supports a portable way of locking complete files in an advisory way
   (which means all accessing programs have to use the same way of locking
   or it will not work). By default, this function will block until the
   requested lock is acquired; this may be controlled with the LOCK_NB option documented below.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handle

     

      A file system pointer resource
that is typically created using fopen().
     

    
    
     
operation

     

      
       operation is one of the following:
       
         
          LOCK_SH to acquire a shared lock (reader).
         
        
        
         
          LOCK_EX to acquire an exclusive lock (writer).
         
        
        
         
          LOCK_UN to release a lock (shared or exclusive).
         
        
       
       It is also possible to add LOCK_NB as a bitmask to one 
       of the above operations if you don't want) to 
       block while locking.
      
     

    
    
     
wouldblock

     

      
       The optional third argument is set to 1 if the lock would block
       (EWOULDBLOCK errno condition).
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"floor", "Round fractions down
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    mixed     ( float $value
    )

  
   Returns the next lowest integer value (as float) by rounding down
   value if necessary. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
value

     

      
       The numeric value to round
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   value rounded to the next lowest integer.
   The return value of) is still of type
   float because the value range of float is 
   usually bigger than that of integer. This function returns FALSE in case of an error (e.g. passing an array).
  
 " 
"flush", "Flush system output buffer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( void
   )

  
   Flushes the system write buffers of PHP and whatever backend PHP is using (CGI,
   a web server, etc).  This attempts to push current output all the way to
   the browser with a few caveats.
  
  
  ) may not be able to override the buffering scheme
   of your web server and it has no effect on any client-side buffering in the
   browser.  It also doesn't affect PHP's userspace output buffering mechanism.
   This means you will have to call both ob_NAME() and
  ) tothe ob output buffers if you are using
   those.
  
  
   Several servers, especially on Win32, will still buffer the output from
   your script until it terminates before transmitting the results to the
   browser.
  
  
   Server modules for Apache like mod_gzip may do buffering of their own that
   will cause) to not result in data being sent
   immediately to the client.
  
  
   Even the browser may buffer its input before displaying it. Netscape, for
   example, buffers text until it receives an end-of-line or the beginning of
   a tag, and it won't render tables until the  tag of the
   outermost table is seen.
  
  
   Some versions of Microsoft Internet Explorer will only start to display
   the page after they have received 256 bytes of output, so you may need to
   send extra whitespace before NAMEing to get those browsers to display the
   page.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"fmod", "Returns the floating point remainder (modulo) of the division
  of the arguments
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    float     ( float $x
    , float $y
    )

  
   Returns the floating point remainder of dividing the dividend
   (x) by the divisor (y).
   The remainder (r) is defined as: x = i * y + r, for 
   some integer i. If y is
   non-zero, r has the same sign as
   x and a magnitude less than the magnitude of
   y.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
x

     

      
       The dividend
      
     

    
    
     
y

     

      
       The divisor
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The floating point remainder of 
   x/y
  
 " 
"fnmatch", "Match filename against a pattern
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $pattern
   , string $string
   [, int $flags = 0
  ] )

  
  ) checks if the passed string would
   match the given shell wildcard pattern.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pattern

     

      
       The shell wildcard pattern.
      
     

    
    
     
string

     

      
       The tested string. This function is especially useful for filenames,
       but may also be used on regular strings.
      
      
       The average user may be used to shell patterns or at least in their
       simplest form to '?' and '*'
       wildcards so using) instead of
       preg_match() for
       frontend search expression input may be way more convenient for
       non-programming users.
      
     

    
    
     
flags

     

      
       The value of flags can be any combination of 
       the following flags, joined with the
       binary OR (|) operator.
       
         A list of possible flags for)
        
        
         Flag
           </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
          FNM_NOESCAPE
           
            Disable backslash escaping.
           
          FNM_PATHNAME
           
            Slash in string only matches slash in the given pattern.
           
          FNM_PERIOD
           
            Leading period in string must be exactly matched by period in the given pattern.
           
          FNM_CASEFOLD
           
            Caseless match. Part of the GNU extension.
           
          

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if there is a match, FALSE otherwise.
  
 " 
"fopen", "Opens file or URL
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( string $filename
   , string $mode
   [, bool $use_include_path = false
   [, resource $context
  ]] )

  
  ) binds a named resource, specified by
   filename, to a stream. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       If filename is of the form &quot;scheme://...&quot;, it
       is assumed to be a URL and PHP will search for a protocol handler
       (also known as a wrapper) for that scheme. If no wrappers for that
       protocol are registered, PHP will emit a notice to help you track
       potential problems in your script and then continue as though
       filename specifies a regular file.
      
      
       If PHP has decided that filename specifies
       a local file, then it will try to open a stream on that file.
       The file must be accessible to PHP, so you need to ensure that
       the file access permissions allow this access.
       If you have enabled safe mode
       or open_basedir further
       restrictions may apply.
      
      
       If PHP has decided that filename specifies
       a registered protocol, and that protocol is registered as a
       network URL, PHP will check to make sure that
       allow_url_NAME is
       enabled. If it is switched off, PHP will emit a warning and
       thecall will fail.
      
      Note: 
       
        The list of supported protocols can be found in Supported Protocols and Wrappers. Some protocols (also referred to as
        wrappers) support context
        and/or php.ini options. Refer to the specific page for the
        protocol in use for a list of options which can be set. (e.g.
        php.ini value user_agent used by the
        http wrapper).
       
      
      
       On the Windows platform, be careful to escape any backslashes
       used in the path to the file, or use forward slashes.
       
        




        

       
      
     

    
    
     
mode

     

      
       The mode parameter specifies the type of access
       you require to the stream.  It may be any of the following:
       
         A list of possible modes for)
         using mode
        
        
         mode
           </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
          'r'
           
            Open for reading only; place the file pointer at the
            beginning of the file.
           
          'r+'
           
            Open for reading and writing; place the file pointer at
            the beginning of the file.
           
          'w'
           
            Open for writing only; place the file pointer at the
            beginning of the file and truncate the file to zero length.
            If the file does not exist, attempt to create it.
           
          'w+'
           
            Open for reading and writing; place the file pointer at
            the beginning of the file and truncate the file to zero
            length.  If the file does not exist, attempt to create it.
           
          'a'
           
            Open for writing only; place the file pointer at the end of
            the file. If the file does not exist, attempt to create it.
            In this mode, fseek() has no effect, writes are always appended.
           
          'a+'
           
            Open for reading and writing; place the file pointer at
            the end of the file. If the file does not exist, attempt to
            create it. In this mode, fseek() only affects
            the reading position, writes are always appended.
           
          'x'
           
            Create and open for writing only; place the file pointer at the
            beginning of the file.  If the file already exists, the
           ) call will fail by returning FALSE and
            generating an error of level E_WARNING.  If
            the file does not exist, attempt to create it.  This is equivalent
            to specifying O_EXCL|O_CREAT flags for the
            underlying open(2) system call. 
           
          'x+'
           
            Create and open for reading and writing; otherwise it has the
            same behavior as 'x'.
           
          'c'
           
            Open the file for writing only. If the file does not exist, it is
            created. If it exists, it is neither truncated (as opposed to
            'w'), nor the call to this function fails (as is
            the case with 'x'). The file pointer is
            positioned on the beginning of the file. This may be useful if it's
            desired to get an advisory lock (see flock())
            before attempting to modify the file, as using
            'w' could truncate the file before the lock
            was obtained (if truncation is desired,
            ftruncate() can be used after the lock is
            requested).
           
          'c+'
           
            Open the file for reading and writing; otherwise it has the same
            behavior as 'c'.
           
          Note: 
       
        Different operating system families have different line-ending
        conventions.  When you write a text file and want to insert a line
        break, you need to use the correct line-ending character(s) for your
        operating system.  Unix based systems use \n as the
        line ending character, Windows based systems use \r\n
        as the line ending characters and Macintosh based systems use
        \r as the line ending character.
       
       
        If you use the wrong line ending characters when writing your files, you
        might find that other applications that open those files will &quot;look
        funny&quot;.
       
       
        Windows offers a text-mode translation flag ('t')
        which will transparently translate \n to
        \r\n when working with the file.  In contrast, you
        can also use 'b' to force binary mode, which will not
        translate your data.  To use these flags, specify either
        'b' or 't' as the last character
        of the mode parameter.
       
       
        The default translation mode depends on the SAPI and version of PHP that
        you are using, so you are encouraged to always specify the appropriate
        flag for portability reasons.  You should use the 't'
        mode if you are working with plain-text files and you use
        \n to delimit your line endings in your script, but
        expect your files to be readable with applications such as notepad.  You
        should use the 'b' in all other cases.
       
       
        If you do not specify the 'b' flag when working with binary files, you
        may experience strange problems with your data, including broken image
        files and strange problems with \r\n characters.
       
      
      Note: 
       
        For portability, it is strongly recommended that you always
        use the 'b' flag when opening files with).
       
      
      Note: 
       
        Again, for portability, it is also strongly recommended that
        you re-write code that uses or relies upon the 't'
        mode so that it uses the correct line endings and
        'b' mode instead.
       
      
     

    
    
     
use_include_path

     

      
       The optional third use_include_path parameter
       can be set to '1' or TRUE if you want to search for the file in the
       include_path, too.
      
     

    
    
     
context

     

      Note: Context support was added
with PHP 5.0.0. For a description of contexts, refer to
Streams.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a file pointer resource on success, or FALSE on error.
  
 " 
"forward_static_call", "Call a static method
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( callable $function
   [, mixed $parameter
   [, mixed $...
  ]] )

  
   Calls a user defined function or method given by the function
   parameter, with the following arguments. This function must be called within a method
   context, it can't be used outside a class.
   It uses the late static
   binding.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
function

     

      
       The function or method to be called. This parameter may be an array,
       with the name of the class, and the method, or a string, with a function
       name.
      
     

    
    
     
parameter

     

      
       Zero or more parameters to be passed to the function.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the function result, or FALSE on error.
  
 " 
"forward_static_call_array", "Call a static method and pass the arguments as array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( callable $function
   , array $parameters
   )

  
   Calls a user defined function or method given by the function
   parameter. This function must be called within a method context, it can't be 
   used outside a class.
   It uses the late static
   binding.
   All arguments of the forwarded method are passed as values,
   and as an array, similarly to call_user_func_array().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
function

     

      
       The function or method to be called. This parameter may be an array,
       with the name of the class, and the method, or a string, with a function
       name.
      
     

    
    
     
parameter

     

      
       One parameter, gathering all the method parameter in one array.
      
      Note: 
       
        Note that the parameters for) are
        not passed by reference.
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the function result, or FALSE on error.
  
 " 
"fpassthru", "Output all remaining data on a file pointer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $handle
   )

  
   Reads to EOF on the given file pointer from the current position and
   writes the results to the output buffer.
  
  
   You may need to call rewind() to reset the file
   pointer to the beginning of the file if you have already written data
   to the file.
  
  
   If you just want to dump the contents of a file to the output buffer,
   without first modifying it or seeking to a particular offset, you may
   want to use the readfile(), which saves you
   the fopen() call.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handle

     

      The file pointer must be valid, and must point to
a file successfully opened by fopen() or
fsockopen() (and not yet closed by
fclose()).
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   If an error occurs,) returns
   FALSE.  Otherwise,) returns
   the number of characters read from handle
   and passed through to the output.
  
 " 
"fprintf", "Write a formatted string to a stream
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $handle
   , string $format
   [, mixed $args
   [, mixed $...
  ]] )

  
   Write a string produced according to format to the
   stream resource specified by handle.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handle

     

      A file system pointer resource
that is typically created using fopen().
     

    
    
     
format

     

      
       See sprintf() for a description of 
       format.
      
     

    
    
     
args

     

      
      
     

    
    
     
...

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the length of the string written.
  
 " 
"fputcsv", "Format line as CSV and write to file pointer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $handle
   , array $fields
   [, string $delimiter = &quot;,&quot;
   [, string $enclosure = '&quot;'
   [, string $escape_char = &quot;\&quot;
  ]]] )

  
  ) formats a line (passed as a
   fields array) as CSV and write it (terminated by a
   newline) to the specified file handle. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handle

     

      The file pointer must be valid, and must point to
a file successfully opened by fopen() or
fsockopen() (and not yet closed by
fclose()).
     

    
    
     
fields

     

      
       An array of values.
      
     

    
    
     
delimiter

     

      
       The optional delimiter parameter sets the field
       delimiter (one character only).
      
     

    
    
     
enclosure

     

      
       The optional enclosure parameter sets the field
       enclosure (one character only).
      
     

    
    
     
escape_char

     

      
       The optional escape_char parameter sets the
       escape character (one character only).
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the length of the written string or FALSE on failure.
  
 " 
"fputs", "Alias of fwrite()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   fwrite().
  
 " 
"fread", "Binary-safe file read
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $handle
   , int $length
   )

  
  ) reads up to
   length bytes from the file pointer
   referenced by handle. Reading stops as soon as one
   of the following conditions is met:
   
     
      length bytes have been read
     
    
    
     
      EOF (end of file) is reached
     
    
    
     
      a packet becomes available or the 
      socket timeout occurs (for network streams)
     
    
    
     
      if the stream is read buffered and it does not represent a plain file, at
      most one read of up to a number of bytes equal to the chunk size (usually
      8192) is made; depending on the previously buffered data, the size of the
      returned data may be larger than the chunk size.
     
    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handle

     

      A file system pointer resource
that is typically created using fopen().
     

    
    
     
length

     

      
       Up to length number of bytes read.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the read string  or FALSE on failure.
  
 " 
"frenchtojd", "Converts a date from the French Republican Calendar to a Julian Day Count
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( int $month
   , int $day
   , int $year
   )

  
   Converts a date from the French Republican Calendar to a Julian
   Day Count.
  
  
   These routines only convert dates in years 1 through 14
   (Gregorian dates 22 September 1792 through 22 September
   1806). This more than covers the period when the calendar was in
   use.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
month

     

      
       The month as a number from 1 (for Vendémiaire) to 13 (for the period of 5-6 days at the end of each year)
      
     

    
    
     
day

     

      
       The day as a number from 1 to 30
      
     

    
    
     
year

     

      
       The year as a number between 1 and 14
      
     

      
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The julian day for the given french revolution date as an integer.
  
 " 
"fscanf", "Parses input from a file according to a format
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( resource $handle
   , string $format
   [, mixed &amp;$...
  ] )

  
   The function) is similar to
   sscanf(), but it takes its input from a file
   associated with handle and interprets the
   input according to the specified format, which is
   described in the documentation for sprintf(). 
  
  
   Any whitespace in the format string matches any whitespace in the input
   stream. This means that even a tab \t in the format
   string can match a single space character in the input stream.
  
  
   Each call to) reads one line from the file.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handle

     

      A file system pointer resource
that is typically created using fopen().
     

    
    
     
format

     

      
       The specified format as described in the 
       sprintf() documentation.
      
     

    
    
     
...

     

      
       The optional assigned values.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   If only two parameters were passed to this function, the values parsed will be
   returned as an array. Otherwise, if optional parameters are passed, the
   function will return the number of assigned values. The optional
   parameters must be passed by reference. 
  
 " 
"fseek", "Seeks on a file pointer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $handle
   , int $offset
   [, int $whence = SEEK_SET
  ] )

  
   Sets the file position indicator for the file referenced by
   handle. The new position, measured in bytes
   from the beginning of the file, is obtained by adding
   offset to the position specified by
   whence.
  
  
   In general, it is allowed to seek past the end-of-file; if data is then
   written, reads in any unwritten region between the end-of-file and the
   sought position will yield bytes with value 0. However, certain streams
   may not support this behavior, especially when they have an underlying
   fixed size storage.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handle

     

      A file system pointer resource
that is typically created using fopen().
     

    
    
     
offset

     

      
       The offset.
      
      
       To move to a position before the end-of-file, you need to pass
       a negative value in offset and
       set whence
       to SEEK_END.
      
     

    
    
     
whence

     

      
       whence values are:
       SEEK_SET - Set position equal to offset bytes.
        SEEK_CUR - Set position to current location plus offset.
        SEEK_END - Set position to end-of-file plus offset.
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Upon success, returns 0; otherwise, returns -1.
  
 " 
"fsockopen", "Open Internet or Unix domain socket connection
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( string $hostname
   [, int $port = -1
   [, int &amp;$errno
   [, string &amp;$errstr
   [, float $timeout = ini_get(&quot;default_socket_timeout&quot;)
  ]]]] )

  
   Initiates a socket connection to the resource specified by
   hostname.
  
  
   PHP supports targets in the Internet and Unix domains as described in
   List of Supported Socket Transports.  A list of supported transports can also be
   retrieved using stream_get_transports().
  
  
   The socket will by default be opened in blocking mode.  You can
   switch it to non-blocking mode by using
   stream_set_blocking().
  
  
   The function stream_socket_client() is similar but
   provides a richer set of options, including non-blocking connection and the
   ability to provide a stream context.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
hostname

     

      
       If OpenSSL support is
       installed, you may prefix the hostname
       with either ssl:// or tls:// to
       use an SSL or TLS client connection over TCP/IP to connect to the
       remote host.
      
     

    
    
     
port

     

      
       The port number. This can be omitted and skipped with
       -1 for transports that do not use ports, such as
       unix://.
      
     

    
    
     
errno

     

      
       If provided, holds the system level error number that occurred in the
       system-level connect() call.
      
      
       If the value returned in errno is
       0 and the function returned FALSE, it is an
       indication that the error occurred before the 
       connect() call. This is most likely due to a
       problem initializing the socket.
      
     

    
    
     
errstr

     

      
       The error message as a string.
      
     

    
    
     
timeout

     

      
       The connection timeout, in seconds.
      
      Note: 
       
        If you need to set a timeout for reading/writing data over the
        socket, use stream_set_timeout(), as the 
        timeout parameter to
       ) only applies while connecting the
        socket.
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns a file pointer which may be used
   together with the other file functions (such as
   fgets(), fgetss(),
   fwrite(), fclose(), and
   feof()). If the call fails, it will return FALSE
  
 " 
"fstat", "Gets information about a file using an open file pointer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $handle
   )

  
   Gathers the statistics of the file opened by the file
   pointer handle. This function is similar to the
   stat() function except that it operates
   on an open file pointer instead of a filename.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handle

     

      A file system pointer resource
that is typically created using fopen().
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array with the statistics of the file; the format of the array
   is described in detail on the stat() manual page.
  
 " 
"ftell", "Returns the current position of the file read/write pointer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $handle
   )

  
   Returns the position of the file pointer referenced by handle.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handle

     

      
       The file pointer must be valid, and must point to a file successfully
       opened by fopen() or popen().
      ) gives undefined results for append-only streams
       (opened with &quot;a&quot; flag).
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the position of the file pointer referenced by
   handle as an integer; i.e., its offset into the file stream.
  
  
   If an error occurs, returns FALSE.
  
  Note: 
    Because PHP's integer type is signed and many platforms use 32bit integers,
    some filesystem functions may return unexpected results for files which
    are larger than 2GB.
   
 " 
"ftok", "Convert a pathname and a project identifier to a System V IPC key
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $pathname
   , string $proj
   )

  
   The function converts the pathname of an existing
   accessible file and a project identifier into an
   integer for use with for example
   shmop_open() and other System V IPC keys. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pathname

     

      
       Path to an accessible file.
      
     

    
    
     
proj

     

      
       Project identifier. This must be a one character string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   On success the return value will be the created key value, otherwise
   -1 is returned.
  
 " 
"ftp_alloc", "Allocates space for a file to be uploaded
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $ftp_stream
   , int $filesize
   [, string &amp;$result
  ] )

  
   Sends an ALLO command to the remote FTP server to 
   allocate space for a file to be uploaded.
  
  Note: 
   
    Many FTP servers do not support this command.  These servers may return a failure 
    code (FALSE) indicating the command is not supported or a success code (TRUE)
    to indicate that pre-allocation is not necessary and the client should continue
    as though the operation were successful.  Because of this, it may be best to reserve
    this function for servers which explicitly require preallocation.
   
  
  
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
    
     
filesize

     

      
       The number of bytes to allocate.
      
     

    
    
     
result

     

      
       A textual representation of the servers response will be returned by 
       reference in result if a variable is provided.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"ftp_cdup", "Changes to the parent directory
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $ftp_stream
   )

   
   Changes to the parent directory.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"ftp_chdir", "Changes the current directory on a FTP server
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $ftp_stream
   , string $directory
   )

   
   Changes the current directory to the specified one.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
    
     
directory

     

      
       The target directory.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
   If changing directory fails, PHP will also throw a warning.
  
 " 
"ftp_chmod", "Set permissions on a file via FTP
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $ftp_stream
   , int $mode
   , string $filename
   )

   
   Sets the permissions on the specified remote file to 
   mode.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
    
     
mode

     

      
       The new permissions, given as an octal value.
      
     

    
    
     
filename

     

      
       The remote file.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the new file permissions on success or FALSE on error.
  
 " 
"ftp_close", "Closes an FTP connection
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $ftp_stream
   )

  
  ) closes the given link identifier
   and releases the resource.
  
  Note: 
   
    After calling this function, you can no longer use the FTP connection and
    must create a new one with ftp_connect().
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"ftp_connect", "Opens an FTP connection
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( string $host
   [, int $port = 21
   [, int $timeout = 90
  ]] )

  
  ) opens an FTP connection to the
   specified host.  
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
host

     

      
       The FTP server address. This parameter shouldn't have any trailing 
       slashes and shouldn't be prefixed with ftp://.
      
     

    
    
     
port

     

      
       This parameter specifies an alternate port to connect to. If it is
       omitted or set to zero, then the default FTP port, 21, will be used.
      
     

    
    
     
timeout

     

      
       This parameter specifies the timeout for all subsequent network operations.
       If omitted, the default value is 90 seconds. The timeout can be changed and
       queried at any time with ftp_set_option() and
       ftp_get_option().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a FTP stream on success or FALSE on error.
  
 " 
"ftp_delete", "Deletes a file on the FTP server
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $ftp_stream
   , string $path
   )

  
  ) deletes the file specified by
   path from the FTP server.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
    
     
path

     

      
       The file to delete.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"ftp_exec", "Requests execution of a command on the FTP server
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $ftp_stream
   , string $command
   )

  
   Sends a SITE EXEC command request to the FTP
   server. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
    
     
command

     

      
       The command to execute.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the command was successful (server sent response code:
   200); otherwise returns FALSE.
  
 " 
"ftp_fget", "Downloads a file from the FTP server and saves to an open file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $ftp_stream
   , resource $handle
   , string $remote_file
   , int $mode
   [, int $resumepos = 0
  ] )

  
  ) retrieves remote_file
   from the FTP server, and writes it to the given file pointer.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
    
     
handle

     

      
       An open file pointer in which we store the data.
      
     

    
    
     
remote_file

     

      
       The remote file path.
      
     

    
    
     
mode

     

      
       The transfer mode. Must be either FTP_ASCII or
       FTP_BINARY.
      
     

    
    
     
resumepos

     

      
       The position in the remote file to start downloading from.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"ftp_fput", "Uploads from an open file to the FTP server
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $ftp_stream
   , string $remote_file
   , resource $handle
   , int $mode
   [, int $startpos = 0
  ] )

  
  ) uploads the data from a file pointer
   to a remote file on the FTP server.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
    
     
remote_file

     

      
       The remote file path.
      
     

    
    
     
handle

     

      
       An open file pointer on the local file. Reading stops at end of file.
      
     

    
    
     
mode

     

      
       The transfer mode. Must be either FTP_ASCII or
       FTP_BINARY.
      
     

    
    
     
startpos

     

      The position in the remote file to start uploading to.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"ftp_get", "Downloads a file from the FTP server
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $ftp_stream
   , string $local_file
   , string $remote_file
   , int $mode
   [, int $resumepos = 0
  ] )

  
  ) retrieves a remote file from the FTP server,
   and saves it into a local file. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
    
     
local_file

     

      
       The local file path (will be overwritten if the file already exists).
      
     

    
    
     
remote_file

     

      
       The remote file path.
      
     

    
    
     
mode

     

      
       The transfer mode. Must be either FTP_ASCII or
       FTP_BINARY.
      
     

    
    
     
resumepos

     

      
       The position in the remote file to start downloading from.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"ftp_get_option", "Retrieves various runtime behaviours of the current FTP stream
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( resource $ftp_stream
   , int $option
   )

  
   This function returns the value for the requested 
   option from the specified FTP connection.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
    
     
option

     

      
       Currently, the following options are supported:
       Supported runtime FTP options
        
         FTP_TIMEOUT_SEC
           
            Returns the current timeout used for network related operations.
           
          FTP_AUTOSEEK
           
            Returns TRUE if this option is on, FALSE otherwise. 
           
          

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the value on success or FALSE if the given 
   option is not supported. In the latter case, a
   warning message is also thrown.
  
 " 
"ftp_login", "Logs in to an FTP connection
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $ftp_stream
   , string $username
   , string $password
   )

   
   Logs in to the given FTP stream.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
    
     
username

     

      
       The username (USER).
      
     

    
    
     
password

     

      
       The password (PASS).
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
   If login fails, PHP will also throw a warning.
  
 " 
"ftp_mdtm", "Returns the last modified time of the given file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $ftp_stream
   , string $remote_file
   )

  
  ) gets the last modified time for a remote
   file.
  
  Note: 
   
    Not all servers support this feature!
   
  
  Note: 
   
   ) does not work with directories.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
    
     
remote_file

     

      
       The file from which to extract the last modification time.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the last modified time as a Unix timestamp on success, or -1 on 
   error.
  
 " 
"ftp_mkdir", "Creates a directory
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $ftp_stream
   , string $directory
   )

   
   Creates the specified directory on the FTP server.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
    
     
directory

     

      
       The name of the directory that will be created.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the newly created directory name on success or FALSE on error.
  
 " 
"ftp_nb_continue", "Continues retrieving/sending a file (non-blocking)
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $ftp_stream
   )

   
   Continues retrieving/sending a file non-blocking.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns FTP_FAILED or FTP_FINISHED
   or FTP_MOREDATA.
  
 " 
"ftp_nb_fget", "Retrieves a file from the FTP server and writes it to an open file (non-blocking)
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $ftp_stream
   , resource $handle
   , string $remote_file
   , int $mode
   [, int $resumepos = 0
  ] )

  
  ) retrieves a remote file from the FTP 
   server.
  
  
   The difference between this function and ftp_fget() is 
   that this function retrieves the file asynchronously, so your program can 
   perform other operations while the file is being downloaded.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
    
     
handle

     

      
       An open file pointer in which we store the data.
      
     

    
    
     
remote_file

     

      
       The remote file path.
      
     

    
    
     
mode

     

      
       The transfer mode. Must be either FTP_ASCII or
       FTP_BINARY.
      
     

    
    
     
resumepos

     

      The position in the remote file to start downloading from.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns FTP_FAILED or FTP_FINISHED
   or FTP_MOREDATA.
  
 " 
"ftp_nb_fput", "Stores a file from an open file to the FTP server (non-blocking)
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $ftp_stream
   , string $remote_file
   , resource $handle
   , int $mode
   [, int $startpos = 0
  ] )

  
  ) uploads the data from a file pointer to
   a remote file on the FTP server.
  
  
   The difference between this function and the ftp_fput() 
   is that this function uploads the file asynchronously, so your program can
   perform other operations while the file is being uploaded.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
    
     
remote_file

     

      
       The remote file path.
      
     

    
    
     
handle

     

      
       An open file pointer on the local file. Reading stops at end of file.
      
     

    
    
     
mode

     

      
       The transfer mode. Must be either FTP_ASCII or
       FTP_BINARY.
      
     

    
    
     
startpos

     

      The position in the remote file to start uploading to.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns FTP_FAILED or FTP_FINISHED
   or FTP_MOREDATA.
  
 " 
"ftp_nb_get", "Retrieves a file from the FTP server and writes it to a local file (non-blocking)
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $ftp_stream
   , string $local_file
   , string $remote_file
   , int $mode
   [, int $resumepos = 0
  ] )

  
  ) retrieves a remote file from the FTP server,
   and saves it into a local file. 
  
  
   The difference between this function and ftp_get() is that
   this function retrieves the file asynchronously, so your program can perform 
   other operations while the file is being downloaded.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
    
     
local_file

     

      
       The local file path (will be overwritten if the file already exists).
      
     

    
    
     
remote_file

     

      
       The remote file path.
      
     

    
    
     
mode

     

      
       The transfer mode. Must be either FTP_ASCII or
       FTP_BINARY.
      
     

    
    
     
resumepos

     

      The position in the remote file to start downloading from.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns FTP_FAILED or FTP_FINISHED
   or FTP_MOREDATA.
  
 " 
"ftp_nb_put", "Stores a file on the FTP server (non-blocking)
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $ftp_stream
   , string $remote_file
   , string $local_file
   , int $mode
   [, int $startpos = 0
  ] )

  
  ) stores a local file on the FTP server.
  
  
   The difference between this function and the ftp_put()
   is that this function uploads the file asynchronously, so your program can
   perform other operations while the file is being uploaded.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
    
     
remote_file

     

      
       The remote file path.
      
     

    
    
     
local_file

     

      
       The local file path.
      
     

    
    
     
mode

     

      
       The transfer mode. Must be either FTP_ASCII or
       FTP_BINARY.
      
     

    
    
     
startpos

     

      The position in the remote file to start uploading to.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns FTP_FAILED or FTP_FINISHED
   or FTP_MOREDATA.
  
 " 
"ftp_nlist", "Returns a list of files in the given directory
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $ftp_stream
   , string $directory
   )

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
    
     
directory

     

      
       The directory to be listed. This parameter can also include arguments, eg.
      $conn_id, &quot;-la /your/dir&quot;);
       Note that this parameter isn't escaped so there may be some issues with
       filenames containing spaces and other characters. 
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of filenames from the specified directory on success or
   FALSE on error.
  
 " 
"ftp_pasv", "Turns passive mode on or off
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $ftp_stream
   , bool $pasv
   )

  
  ) turns on or off passive mode. In
   passive mode, data connections are initiated by the client,
   rather than by the server.
   It may be needed if the client is behind firewall.
  
  
   Please note that) can only be called after a
   successfull login or otherwise it will fail.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
    
     
pasv

     

      
       If TRUE, the passive mode is turned on, else it's turned off.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"ftp_put", "Uploads a file to the FTP server
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $ftp_stream
   , string $remote_file
   , string $local_file
   , int $mode
   [, int $startpos = 0
  ] )

  
  ) stores a local file on the FTP server.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
    
     
remote_file

     

      
       The remote file path.
      
     

    
    
     
local_file

     

      
       The local file path.
      
     

    
    
     
mode

     

      
       The transfer mode. Must be either FTP_ASCII or
       FTP_BINARY.
      
     

    
    
     
startpos

     

      The position in the remote file to start uploading to.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"ftp_pwd", "Returns the current directory name
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $ftp_stream
   )

  
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the current directory name or FALSE on error.
  
 " 
"ftp_quit", "Alias of ftp_close()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   ftp_close().
  
 " 
"ftp_raw", "Sends an arbitrary command to an FTP server
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $ftp_stream
   , string $command
   )

  
   Sends an arbitrary command to the FTP server. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
    
     
command

     

      
       The command to execute.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the server's response as an array of strings.
   No parsing is performed on the response string, nor does 
  ) determine if the command succeeded.  
  
 " 
"ftp_rawlist", "Returns a detailed list of files in the given directory
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( resource $ftp_stream
   , string $directory
   [, bool $recursive = false
  ] )

  
  ) executes the FTP 
   LIST command, and returns the result as an array.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
    
     
directory

     

      
       The directory path. May include arguments for the LIST
       command.
      
     

    
    
     
recursive

     

      
       If set to TRUE, the issued command will be LIST -R.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array where each element corresponds to one line of text. Returns
   FALSE when passed directory is invalid.
  
  
   The output is not parsed in any way. The system type identifier returned by
   ftp_systype() can be used to determine how the results 
   should be interpreted.
  
 " 
"ftp_rename", "Renames a file or a directory on the FTP server
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $ftp_stream
   , string $oldname
   , string $newname
   )

  
  ) renames a file or a directory on the FTP
   server.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
    
     
oldname

     

      
       The old file/directory name.
      
     

    
    
     
newname

     

      
       The new name.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"ftp_rmdir", "Removes a directory
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $ftp_stream
   , string $directory
   )

   
   Removes the specified directory on the FTP server.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
    
     
directory

     

      
       The directory to delete. This must be either an absolute or relative
       path to an empty directory.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"ftp_set_option", "Set miscellaneous runtime FTP options
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $ftp_stream
   , int $option
   , mixed $value
   )

  
   This function controls various runtime options for the specified FTP 
   stream.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
    
     
option

     

      
       Currently, the following options are supported:
       Supported runtime FTP options
        
         FTP_TIMEOUT_SEC
           
            Changes the timeout in seconds used for all network related 
            functions. value must be an integer that
            is greater than 0. The default timeout is 90 seconds.
           
          FTP_AUTOSEEK
           
            When enabled, GET or PUT requests with a 
            resumepos or startpos
            parameter will first seek to the requested position within the file.
            This is enabled by default.
           
          

    
    
     
value

     

      
       This parameter depends on which option is chosen
       to be altered.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the option could be set; FALSE if not. A warning
   message will be thrown if the option is not
   supported or the passed value doesn't match the
   expected value for the given option.
  
 " 
"ftp_site", "Sends a SITE command to the server
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $ftp_stream
   , string $command
   )

  
  ) sends the given SITE 
   command to the FTP server.
  
  
   SITE commands are not standardized, and vary from server
   to server. They are useful for handling such things as file permissions and 
   group membership.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
    
     
command

     

      
       The SITE command. Note that this parameter isn't escaped so there may
       be some issues with filenames containing spaces and other characters.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"ftp_size", "Returns the size of the given file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $ftp_stream
   , string $remote_file
   )

  
  ) returns the size of the given file in
   bytes.
  
  Note: 
   
    Not all servers support this feature.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
    
     
remote_file

     

      
       The remote file.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the file size on success, or -1 on error.
  
 " 
"ftp_ssl_connect", "Opens an Secure SSL-FTP connection
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( string $host
   [, int $port = 21
   [, int $timeout = 90
  ]] )

  
  ) opens an explicit SSL-FTP connection to the
   specified host.
  
  Note: 
   Why this function may not exist
   ) is only available if both
    the ftp module and the OpenSSL
    support is built statically into php, this means that on Windows this
    function will be undefined in the official PHP builds. To make this
    function available on Windows you must compile your own PHP binaries.
   
  
  Note: 
   
   ) is not intended for use with sFTP.
    To use sFTP with PHP, please see ssh2_sftp().
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
host

     

      
       The FTP server address. This parameter shouldn't have any trailing 
       slashes and shouldn't be prefixed with ftp://.
      
     

    
    
     
port

     

      
       This parameter specifies an alternate port to connect to. If it is
       omitted or set to zero, then the default FTP port, 21, will be used.
      
     

    
    
     
timeout

     

      
       This parameter specifies the timeout for all subsequent network operations.
       If omitted, the default value is 90 seconds. The timeout can be changed and
       queried at any time with ftp_set_option() and
       ftp_get_option().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a SSL-FTP stream on success or FALSE on error.
  
 " 
"ftp_systype", "Returns the system type identifier of the remote FTP server
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $ftp_stream
   )

  
   Returns the system type identifier of the remote FTP server.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ftp_stream

     

      
       The link identifier of the FTP connection.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the remote system type, or FALSE on error.
  
 " 
"ftruncate", "Truncates a file to a given length
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $handle
   , int $size
   )

  
   Takes the filepointer, handle, and truncates the file to
   length, size.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handle

     

      
       The file pointer.
      
      Note: 
       
        The handle must be open for writing.
       
      
     

    
    
     
size

     

      
       The size to truncate to.
      
      Note: 
       
        If size is larger than the file then the file
        is extended with null bytes.
       
       
        If size is smaller than the file then the file
        is truncated to that size.
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"func_get_arg", "Return an item from the argument list
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( int $arg_num
   )

  
   Gets the specified argument from a user-defined function's argument list.
  
  
   This function may be used in conjunction with 
   NAMEs() and func_num_args()
   to allow user-defined functions to accept variable-length argument lists.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
arg_num

     

      
       The argument offset. Function arguments are counted starting from
       zero.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the specified argument, or FALSE on error.
  
 " 
"func_get_args", "Returns an array comprising a function's argument list
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
   Gets an array of the function's argument list.
  
  
   This function may be used in conjunction with 
   func_get_arg() and func_num_args()
   to allow user-defined functions to accept variable-length argument lists.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array in which each element is a copy of the corresponding
   member of the current user-defined function's argument list. 
  
 " 
"func_num_args", "Returns the number of arguments passed to the function
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   Gets the number of arguments passed to the function.
  
  
   This function may be used in conjunction with 
   func_get_arg() and func_get_args()
   to allow user-defined functions to accept variable-length argument lists.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the number of arguments passed into the current user-defined
   function.
  
 " 
"function_exists", "Return TRUE if the given function has been defined
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $function_name
   )

  
   Checks the list of defined functions, both built-in (internal) and
   user-defined, for function_name. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
function_name

     

      
       The function name, as a string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if function_name exists and is a
   function, FALSE otherwise.
  
  Note: 
   
    This function will return FALSE for constructs, such as 
    include_once and echo.
   
  
 " 
"fwrite", "Binary-safe file write
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $handle
   , string $string
   [, int $length
  ] )

  
  ) writes the contents of
   string to the file stream pointed to by
   handle. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handle

     

      A file system pointer resource
that is typically created using fopen().
     

    
    
     
string

     

      
       The string that is to be written.
      
     

    
    
     
length

     

      
       If the length argument is given, writing will
       stop after length bytes have been written or
       the end of string is reached, whichever comes
       first.
      
      
       Note that if the length argument is given,
       then the magic_quotes_runtime
       configuration option will be ignored and no slashes will be
       stripped from string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns the number of bytes
   written, or FALSE on error.
  
 " 
"gc_collect_cycles", "Forces collection of any existing garbage cycles
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   Forces collection of any existing garbage cycles.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  This function has no parameters.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns number of collected cycles.
  
 " 
"gc_disable", "Deactivates the circular reference collector
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( void
   )

  
   Deactivates the circular reference collector, setting
   zend.enable_gc to 0.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  This function has no parameters.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"gc_enable", "Activates the circular reference collector
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( void
   )

  
   Activates the circular reference collector, setting
   zend.enable_gc to 1.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  This function has no parameters.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"gc_enabled", "Returns status of the circular reference collector
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( void
   )

  
   Returns status of the circular reference collector.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  This function has no parameters.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the garbage collector is enabled, FALSE otherwise.
  
 " 
"gc_mem_caches", "
   Reclaims memory used by the Zend Engine memory manager
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   Reclaims memory used by the Zend Engine memory manager.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  This function has no parameters.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the number of bytes freed.
  
 " 
"gd_info", "Retrieve information about the currently installed GD library
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
   Gets information about the version and capabilities of the installed GD
   library.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an associative array.
  
  
   Elements of array returned by)
    
     Attribute
       Meaning
      GD Version
       string value describing the installed
        libgd version.
      FreeType Support
       boolean value.  TRUE
        if FreeType Support is installed.
      FreeType Linkage
       string value describing the way in which
        FreeType was linked. Expected values are: 'with freetype',
        'with TTF library', and 'with unknown library'.  This element will
        only be defined if FreeType Support evaluated to
        TRUE.
      T1Lib Support
       boolean value.  TRUE
        if T1Lib support is included.
      GIF Read Support
       boolean value.  TRUE
        if support for reading GIF
        images is included.
      GIF Create Support
       boolean value.  TRUE
        if support for creating GIF
        images is included.
      JPEG Support
       boolean value.  TRUE
        if JPEG support is included.
      PNG Support
       boolean value.  TRUE
        if PNG support is included.
      WBMP Support
       boolean value.  TRUE
        if WBMP support is included.
      XBM Support
       boolean value.  TRUE
        if XBM support is included.
      WebP Support
       boolean value.  TRUE
        if WebP support is included.
      Note: 
   
    Previous to PHP 5.3.0, the JPEG Support attribute was named
    JPG Support.
   
  
 " 
"get_browser", "Tells what the user's browser is capable of
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ([ string $user_agent
   [, bool $return_array = false
  ]] )

  
   Attempts to determine the capabilities of the user's browser, by looking
   up the browser's information in the browscap.ini
   file.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
user_agent

     

      
       The User Agent to be analyzed. By default, the value of HTTP
       User-Agent header is used; however, you can alter this (i.e., look up
       another browser's info) by passing this parameter.
      
      
       You can bypass this parameter with a NULL value.
      
     

    
    
     
return_array

     

      
       If set to TRUE, this function will return an array
       instead of an object.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The information is returned in an object or an array which will contain
   various data elements representing, for instance, the browser's major and
   minor version numbers and ID string; TRUE/FALSE values for features
   such as frames, JavaScript, and cookies; and so forth.
  
  
   The cookies value simply means that the browser
   itself is capable of accepting cookies and does not mean the user has
   enabled the browser to accept cookies or not. The only way to test if
   cookies are accepted is to set one with setcookie(),
   reload, and check for the value.
  
 " 
"get_called_class", "the &quot;Late Static Binding&quot; class name
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( void
   )

  
   Gets the name of the class the static method is called in.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the class name.  Returns FALSE if called from outside a class.
  
 " 
"get_cfg_var", "Gets the value of a PHP configuration option
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $option
   )

  
   Gets the value of a PHP configuration option.
  
  
   This function will not return configuration information set when the PHP
   was compiled, or read from an Apache configuration file.
  
  
   To check whether the system is using a configuration file, try retrieving the
   value of the cfg_file_path configuration setting. If this is available, a
   configuration file is being used.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
option

     

      
       The configuration option name.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the current value of the PHP configuration variable specified by
   option, or FALSE if an error occurs.
  
 " 
"get_class", "Returns the name of the class of an object
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ([ object $object = NULL
  ] )

  
   Gets the name of the class of the given object.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
object

     

      
       The tested object. This parameter may be omitted when inside a class.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the name of the class of which object is an
   instance. Returns FALSE if object is not an 
   object.
  
  
   If object is omitted when inside a class, the
   name of that class is returned.
  
 " 
"get_class_methods", "Gets the class methods' names
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( mixed $class_name
   )

  
   Gets the class methods names.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
class_name

     

      
       The class name or an object instance
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of method names defined for the class specified by
   class_name. In case of an error, it returns NULL.
  
 " 
"get_class_vars", "Get the default properties of the class
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $class_name
   )

  
   Get the default properties of the given class.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
class_name

     

      
       The class name
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an associative array of declared properties visible from the
   current scope, with their default value.
   The resulting array elements are in the form of 
   varname =&gt; value.
   In case of an error, it returns FALSE.
  
 " 
"get_current_user", "Gets the name of the owner of the current PHP script
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( void
   )

  
   Returns the name of the owner of the current PHP script.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the username as a string.
  
 " 
"get_declared_classes", "Returns an array with the name of the defined classes
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
   Gets the declared classes.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of the names of the declared classes in the current
   script.
  
  Note: 
   
    Note that depending on what extensions you have compiled or
    loaded into PHP, additional classes could be present. This means that
    you will not be able to define your own classes using these
    names. There is a list of predefined classes in the Predefined Classes section of
    the appendices.
   
  
 " 
"get_declared_interfaces", "Returns an array of all declared interfaces
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
   Gets the declared interfaces.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of the names of the declared interfaces in the current
   script.
  
 " 
"get_declared_traits", "Returns an array of all declared traits
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  

  

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  This function has no parameters.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array with names of all declared traits in values.
   Returns NULL in case of a failure.
  
 " 
"get_defined_constants", "Returns an associative array with the names of all the constants and their values
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ([ bool $categorize = false
  ] )

  
   Returns the names and values of all the constants currently defined.
   This includes those created by extensions as well as those created with
   the define() function.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
categorize

     

      
       Causing this function to return a multi-dimensional
       array with categories in the keys of the first dimension and constants
       and their values in the second dimension.
       
        




        

        The above example will output
something similar to:
        

Array
(
    [Core] =&gt; Array
        (
            [E_ERROR] =&gt; 1
            [E_WARNING] =&gt; 2
            [E_PARSE] =&gt; 4
            [E_NOTICE] =&gt; 8
            [E_CORE_ERROR] =&gt; 16
            [E_CORE_WARNING] =&gt; 32
            [E_COMPILE_ERROR] =&gt; 64
            [E_COMPILE_WARNING] =&gt; 128
            [E_USER_ERROR] =&gt; 256
            [E_USER_WARNING] =&gt; 512
            [E_USER_NOTICE] =&gt; 1024
            [E_ALL] =&gt; 2047
            [TRUE] =&gt; 1
        )

    [pcre] =&gt; Array
        (
            [PREG_PATTERN_ORDER] =&gt; 1
            [PREG_SET_ORDER] =&gt; 2
            [PREG_OFFSET_CAPTURE] =&gt; 256
            [PREG_SPLIT_NO_EMPTY] =&gt; 1
            [PREG_SPLIT_DELIM_CAPTURE] =&gt; 2
            [PREG_SPLIT_OFFSET_CAPTURE] =&gt; 4
            [PREG_GREP_INVERT] =&gt; 1
        )

    [user] =&gt; Array
        (
            [MY_CONSTANT] =&gt; 1
        )

)

        
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of constant name =&gt; constant value array, optionally
   groupped by extension name registering the constant.
  
 " 
"get_defined_functions", "Returns an array of all defined functions
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
   Gets an array of all defined functions.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a multidimensional array containing a list of all defined
   functions, both built-in (internal) and user-defined. The internal
   functions will be accessible via $arr[&quot;internal&quot;], and
   the user defined ones using $arr[&quot;user&quot;] (see example
   below).
  
 " 
"get_defined_vars", "
   Returns an array of all defined variables
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
   This function returns a multidimensional array containing a list of
   all defined variables, be them environment, server or user-defined
   variables, within the scope that) is
   called. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   A multidimensional array with all the variables.
  
 " 
"get_extension_funcs", "Returns an array with the names of the functions of a module
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $module_name
   )

  
   This function returns the names of all the functions defined in
   the module indicated by module_name.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
module_name

     

      
       The module name.
      
      Note: 
       
        This parameter must be in lowercase.
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array with all the functions, or FALSE if 
   module_name is not a valid extension.
  
 " 
"get_headers", "Fetches all the headers sent by the server in response to a HTTP request
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $url
   [, int $format = 0
  ] )

  
  ) returns an array with the headers sent
   by the server in response to a HTTP request.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
url

     

      
       The target URL.
      
     

    
    
     
format

     

      
       If the optional format parameter is set to non-zero,
      ) parses the response and sets the 
       array's keys.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an indexed or associative array with the headers, or FALSE on
   failure.
  
 " 
"get_html_translation_table", "Returns the translation table used by htmlspecialchars() and htmlentities()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ([ int $table = HTML_SPECIALCHARS
   [, int $flags = ENT_COMPAT | ENT_HTML401
   [, string $encoding = &quot;UTF-8&quot;
  ]]] )

  
  ) will return the
   translation table that is used internally for
   htmlspecialchars() and
   htmlentities().
  
  Note: 
   
    Special characters can be encoded in several ways. E.g.
    &quot; can be encoded as &amp;quot;,
    &amp;#34; or &amp;#x22.
   ) returns only the form used
    by htmlspecialchars() and
    htmlentities().
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
table

     

      
       Which table to return. Either HTML_ENTITIES or
       HTML_SPECIALCHARS.
      
     

    
    
     
flags

     

      
       A bitmask of one or more of the following flags, which specify which quotes the
       table will contain as well as which document type the table is for. The default is
       ENT_COMPAT | ENT_HTML401.
       Available flags constants
        
         Constant Name
           </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
          ENT_COMPAT
           Table will contain entities for double-quotes, but not for single-quotes.
          ENT_QUOTES
           Table will contain entities for both double and single quotes.
          ENT_NOQUOTES
           Table will neither contain entities for single quotes nor for double quotes.
          ENT_HTML401
           Table for HTML 4.01.
          ENT_XML1
           Table for XML 1.
          ENT_XHTML
           Table for XHTML.
          ENT_HTML5
           Table for HTML 5.
          

    
    
     
encoding

     

      
       Encoding to use.
       If omitted, the default value for this argument is ISO-8859-1 in
       versions of PHP prior to 5.4.0, and UTF-8 from PHP 5.4.0 onwards.
      
      


 The following character sets are supported:
 Supported charsets
  
   Charset
     Aliases
     </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
    ISO-8859-1
     ISO8859-1
     
      Western European, Latin-1.
     
    ISO-8859-5
     ISO8859-5
     
      Little used cyrillic charset (Latin/Cyrillic).
     
    ISO-8859-15
     ISO8859-15
     
      Western European, Latin-9. Adds the Euro sign, French and Finnish
      letters missing in Latin-1 (ISO-8859-1).
     
    UTF-8
      
     
      ASCII compatible multi-byte 8-bit Unicode.
     
    cp866
     ibm866, 866
     
      DOS-specific Cyrillic charset.
     
    cp1251
     Windows-1251, win-1251, 1251
     
      Windows-specific Cyrillic charset.
     
    cp1252
     Windows-1252, 1252
     
      Windows specific charset for Western European.
     
    KOI8-R
     koi8-ru, koi8r
     
      Russian.
     
    BIG5
     950
     
      Traditional Chinese, mainly used in Taiwan.
     
    GB2312
     936
     
      Simplified Chinese, national standard character set.
     
    BIG5-HKSCS
      
     
      Big5 with Hong Kong extensions, Traditional Chinese.
     
    Shift_JIS
     SJIS, SJIS-win, cp932, 932
     
      Japanese
     
    EUC-JP
     EUCJP, eucJP-win
     
      Japanese
     
    MacRoman
      
     
      Charset that was used by Mac OS.
     
    ''
      
     
      An empty string activates detection from script encoding (Zend multibyte),
      default_charset and current
      locale (see nl_langinfo() and
      setlocale()), in this order. Not recommended.
     
    Note: 
  
   Any other character sets are not recognized. The default encoding will be
   used instead and a warning will be emitted.
  
 



     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the translation table as an array, with the original characters
   as keys and entities as values.
  
 " 
"get_include_path", "Gets the current include_path configuration option
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( void
   )

  
   Gets the current include_path
   configuration option value.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the path, as a string.
  
 " 
"get_included_files", "Returns an array with the names of included or required files
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
   Gets the names of all files that have been included using
   include, include_once,
   require or require_once.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of the names of all files.
  
  
   The script originally called is considered an &quot;included file,&quot; so it will
   be listed together with the files referenced by 
   include and family.
  
  
   Files that are included or required multiple times only show up once in
   the returned array.
  
 " 
"get_loaded_extensions", "Returns an array with the names of all modules compiled and loaded
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ([ bool $zend_extensions = false
  ] )

  
   This function returns the names of all the modules compiled and
   loaded in the PHP interpreter.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
zend_extensions

     

      
       Only return Zend extensions, if not then regular extensions, like 
       mysqli are listed. Defaults to FALSE (return regular extensions).
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an indexed array of all the modules names.
  
 " 
"get_magic_quotes_gpc", "Gets the current configuration setting of magic_quotes_gpc
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( void
   )

  
   Returns the current configuration setting of magic_quotes_gpc 
  
  
   Keep in mind that attempting to set 
   magic_quotes_gpc at runtime will not work.
  
  
   For more information about magic_quotes, see this
   security section.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns 0 if magic_quotes_gpc is off, 1 otherwise. 
   Or always returns FALSE as of PHP 5.4.0. 
  
 " 
"get_magic_quotes_runtime", "Gets the current active configuration setting of magic_quotes_runtime
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( void
   )

  
   Returns the current active configuration setting of magic_quotes_runtime.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns 0 if magic_quotes_runtime is off, 1 otherwise. 
   Or always returns FALSE as of PHP 5.4.0. 
  
 " 
"get_meta_tags", "Extracts all meta tag content attributes from a file and returns an array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $filename
   [, bool $use_include_path = false
  ] )

  
   Opens filename and parses it line by line for
    tags in the file. The parsing stops at
   .
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       The path to the HTML file, as a string. This can be a local file or an
       URL.
      
      
       
        Example #1 What) parses
        




 

        

       
       (pay attention to line endings - PHP uses a native function to
       parse the input, so a Mac file won't work on Unix).
      
     

    
    
     
use_include_path

     

      
       Setting use_include_path to TRUE will result
       in PHP trying to open the file along the standard include path as per
       the include_path directive.
       This is used for local files, not URLs.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array with all the parsed meta tags.
  
  
   The value of the name property becomes the key, the value of the content
   property becomes the value of the returned array, so you can easily use
   standard array functions to traverse it or access single values. 
   Special characters in the value of the name property are substituted with
   '_', the rest is converted to lower case.  If two meta tags have the same
   name, only the last one is returned.
  
 " 
"get_object_vars", "Gets the properties of the given object
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( object $object
   )

  
   Gets the accessible non-static properties of the given 
   object according to scope.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
object

     

      
       An object instance.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an associative array of defined object accessible non-static properties 
   for the specified object in scope. If a property has
   not been assigned a value, it will be returned with a NULL value.
  
 " 
"get_parent_class", "Retrieves the parent class name for object or class
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ([ mixed $object
  ] )

  
   Retrieves the parent class name for object or class.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
object

     

      
       The tested object or class name. This parameter is optional if called
       from the object's method.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the name of the parent class of the class of which
   object is an instance or the name.
  
  Note: 
   
    If the object does not have a parent or the class given does not exist FALSE will be returned.
   
  
  
   If called without parameter outside object, this function returns FALSE.
  
 " 
"get_required_files", "Alias of get_included_files()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  get_included_files().
  
 " 
"get_resource_type", "
   Returns the resource type
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $handle
   )

  
   This function gets the type of the given resource.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handle

     

      
       The evaluated resource handle.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   If the given handle is a resource, this function
   will return a string representing its type. If the type is not identified
   by this function, the return value will be the string 
   Unknown.
  
  
   This function will return FALSE and generate an error if 
   handle is not a resource.
  
 " 
"get_resources", "Returns active resources
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ([ string $type
  ] )

  
   Returns an array of all currently active resources, optionally
   filtered by resource type.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
type

     

      
       If defined, this will cause) to only
       return resources of the given type.
       A list of resource types is available.
      
      
       If the string Unknown is provided as
       the type, then only resources that are of an unknown type will be
       returned.
      
      
       If omitted, all resources will be returned.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of currently active resources, indexed by
   resource number.
  
 " 
"getcwd", "Gets the current working directory
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( void
   )

  
   Gets the current working directory.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the current working directory on success, or FALSE on
   failure.
   
  
   On some Unix variants,) will return
   FALSE if any one of the parent directories does not have the
   readable or search mode set, even if the current directory
   does. See chmod() for more information on
   modes and permissions.
  
 " 
"getdate", "Get date/time information
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ([ int $timestamp = time()
  ] )

  
   Returns an associative array containing the date
   information of the timestamp, or the current
   local time if no timestamp is given.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
timestamp


The optional timestamp parameter is an
integer Unix timestamp that defaults to the current
local time if a timestamp is not given. In other
words, it defaults to the value of time().


   
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an associative array of information related to
   the timestamp. Elements from the returned 
   associative array are as follows:
  
  
   Key elements of the returned associative array
    
     Key
       </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
       Example returned values
      &quot;seconds&quot;
       Numeric representation of seconds
       0 to 59
      &quot;minutes&quot;
       Numeric representation of minutes
       0 to 59
      &quot;hours&quot;
       Numeric representation of hours
       0 to 23
      &quot;mday&quot;
       Numeric representation of the day of the month
       1 to 31
      &quot;wday&quot;
       Numeric representation of the day of the week
       0 (for Sunday) through 6 (for Saturday)
      &quot;mon&quot;
       Numeric representation of a month
       1 through 12
      &quot;year&quot;
       A full numeric representation of a year, 4 digits
       Examples: 1999 or 2003
      &quot;yday&quot;
       Numeric representation of the day of the year
       0 through 365
      &quot;weekday&quot;
       A full textual representation of the day of the week
       Sunday through Saturday
      &quot;month&quot;
       A full textual representation of a month, such as January or March
       January through December
      0
       
        Seconds since the Unix Epoch, similar to the values returned by
        time() and used by date().
       
       
        System Dependent, typically -2147483648 through
        2147483647.
       
      " 
"getenv", "Gets the value of an environment variable
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $varname
   )

  
   Gets the value of an environment variable.
  
  
   You can see a list of all the environmental variables by using
   phpinfo(). Many of these variables are listed within
   » RFC 3875, specifically
   section 4.1, &quot;Request Meta-Variables&quot;.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
varname

     

      
       The variable name.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the value of the environment variable
   varname, or FALSE if the environment
   variable varname does not exist.
  
 " 
"gethostbyaddr", "
   Get the Internet host name corresponding to a given IP address
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $ip_address
   )

  
   Returns the host name of the Internet host specified by
   ip_address.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ip_address

     

      
       The host IP address.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the host name on success, the unmodified ip_address
   on failure, or FALSE on malformed input.
  
 " 
"gethostbyname", "
   Get the IPv4 address corresponding to a given Internet host name
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $hostname
   )

  
   Returns the IPv4 address of the Internet host specified by
   hostname.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
hostname

     

      
       The host name.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the IPv4 address or a string containing the unmodified
   hostname on failure.
  
 " 
"gethostbynamel", "
   Get a list of IPv4 addresses corresponding to a given Internet host
   name
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $hostname
   )

  
   Returns a list of IPv4 addresses to which the Internet host
   specified by hostname resolves. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
hostname

     

      
       The host name.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of IPv4 addresses or FALSE if
   hostname could not be resolved.
  
 " 
"gethostname", "Gets the host name
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( void
   )

  
  ) gets the standard host name for 
   the local machine.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string with the hostname on success, otherwise FALSE is 
   returned.
  
 " 
"getimagesize", "Get the size of an image
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $filename
   [, array &amp;$imageinfo
  ] )

  
   The) function will determine the
   size of any given image file and return the dimensions along with
   the file type and a height/width text string to be used inside a
   normal HTML IMG tag and the
   correspondent HTTP content type.
  
  
  ) can also return some more information
   in imageinfo parameter.
  
  Note: 
   
    Note that JPC and JP2 are capable of having components with different 
    bit depths. In this case, the value for &quot;bits&quot; is the highest bit depth encountered. Also, JP2
    files may contain multiple JPEG 2000 codestreams. In this case,
   ) returns the values for the first
    codestream it encounters in the root of the file.
   
  
  Note: 
   
    The information about icons are retrieved from the icon with the highest
    bitrate.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
        This parameter specifies the file you wish to retrieve information
        about. It can reference a local file or (configuration permitting) a
        remote file using one of the supported streams. 
      
     

    
    
     
imageinfo

     

      
       This optional parameter allows you to extract some extended
       information from the image file. Currently, this will return the
       different JPG APP markers as an associative array.
       Some programs use these APP markers to embed text information in 
       images. A very common one is to embed 
       » IPTC information in the APP13 marker.
       You can use the iptcparse() function to parse the
       binary APP13 marker into something readable.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array with up to 7 elements. Not all image types will include
   the channels and bits elements.
  
  
   Index 0 and 1 contains respectively the width and the height of the image.
  
  Note: 
   
    Some formats may contain no image or may contain multiple images. In these
    cases,) might not be able to properly
    determine the image size.) will return
    zero for width and height in these cases.
   
  
  
   Index 2 is one of the IMAGETYPE_XXX constants indicating 
   the type of the image.
  
  
   Index 3 is a text string with the correct 
   height=&quot;yyy&quot; width=&quot;xxx&quot; string that can be used
   directly in an IMG tag.
  
  
   mime is the correspondant MIME type of the image.
   This information can be used to deliver images with the correct HTTP 
   Content-type header:
   
    Example #1) and MIME types
    

" 
"getimagesizefromstring", "Get the size of an image from a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $imagedata
   [, array &amp;$imageinfo
  ] )

  
   Identical to getimagesize() except that)
   accepts a string instead of a file name as the first parameter.
  
  
   See the getimagesize() documentation for details on how this
   function works.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
imagedata

    

     
      The image data, as a string.
     
    

   
   
    
imageinfo

    

     
      See getimagesize().
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   See getimagesize().
  
 " 
"getlastmod", "Gets time of last page modification
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   Gets the time of the last modification of the main script of execution.
  
  
   If you're interested in getting the last modification time
   of a different file, consider using filemtime().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the time of the last modification of the current
   page. The value returned is a Unix timestamp, suitable for
   feeding to date(). Returns FALSE on error.
  
 " 
"getmxrr", "Get MX records corresponding to a given Internet host name
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $hostname
   , array &amp;$mxhosts
   [, array &amp;$weight
  ] )

  
   Searches DNS for MX records corresponding to 
   hostname. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
hostname

     

      
       The Internet host name.
      
     

    
    
     
mxhosts

     

      
       A list of the MX records found is placed into the array
       mxhosts. 
      
     

    
    
     
weight

     

      
       If the weight array is given, it will be filled
       with the weight information gathered.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if any records are found; returns FALSE if no records
   were found or if an error occurred.
  
 " 
"getmygid", "Get PHP script owner's GID
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   Gets the group ID of the current script.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the group ID of the current script, or FALSE on error.
  
 " 
"getmyinode", "Gets the inode of the current script
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   Gets the inode of the current script.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the current script's inode as an integer, or FALSE on error.
  
 " 
"getmypid", "Gets PHP's process ID
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   Gets the current PHP process ID.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the current PHP process ID, or FALSE on error.
  
 " 
"getmyuid", "Gets PHP script owner's UID
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   Gets the user ID of the current script.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the user ID of the current script, or FALSE on error.
  
 " 
"getopt", "Gets options from the command line argument list
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $options
   [, array $longopts
  ] )

  
   Parses options passed to the script.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
options

     

      
       Each character in this string will be used as option characters and
       matched against options passed to the script starting with a single
       hyphen (-).
      
      
       For example, an option string &quot;x&quot; recognizes an
       option -x.
      
      
       Only a-z, A-Z and 0-9 are allowed.
      
     

    
    
     
longopts

     

      
       An array of options. Each element in this array will be used as option
       strings and matched against options passed to the script starting with
       two hyphens (--).
      
      
       For example, an longopts element &quot;opt&quot; recognizes an
       option --opt.
      
     

    
   
   The options parameter may contain the following
   elements:
   Individual characters (do not accept values)
    Characters followed by a colon (parameter requires value)
    Characters followed by two colons (optional value)
   
   Option values are the first argument after the string. If a value is required,
   it does not matter whether the value has leading white space or not. See note.
   Note: 
    
     Optional values do not accept &quot; &quot; (space) as a separator.
    
   
  
  Note: 
   
    The format for the options and
    longopts is almost the same, the only difference is
    that longopts takes an array of options (where each
    element is the option) whereas options takes a
    string (where each character is the option).
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function will return an array of option / argument pairs, or FALSE on failure.
  
  Note: 
   
    The parsing of options will end at the first non-option found, anything
    that follows is discarded.
   
  
 " 
"getprotobyname", "Get protocol number associated with protocol name
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $name
   )

  
  ) returns the protocol number
   associated with the protocol name as per
   /etc<BR>rotocols.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
name

     

      
       The protocol name.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the protocol number,  or FALSE on failure.
  
 " 
"getprotobynumber", "Get protocol name associated with protocol number
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( int $number
   )

  
  ) returns the protocol name
   associated with protocol number as per
   /etc<BR>rotocols.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
number

     

      
       The protocol number.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the protocol name as a string,  or FALSE on failure.
  
 " 
"getrandmax", "Show largest possible random value
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    int     ( void
    )

  
   Returns the maximum value that can be returned by a call to
   rand().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The largest possible random value returned by rand()
  
 " 
"getrusage", "Gets the current resource usages
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ([ int $who = 0
  ] )

  
   This is an interface to2). It gets data returned
   from the system call. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
who

     

      
       If who is 1,will be called with
       RUSAGE_CHILDREN.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an associative array containing the data returned from the system
   call. All entries are accessible by using their documented field names.
  
 " 
"getservbyname", "Get port number associated with an Internet service and protocol
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $service
   , string $protocol
   )

  
  ) returns the Internet port
   which corresponds to service for the
   specified protocol as per
   /etc/services.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
service

     

      
       The Internet service name, as a string.
      
     

    
    
     
protocol

     

      
       protocol is either &quot;tcp&quot;
       or &quot;udp&quot; (in lowercase).
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the port number, or FALSE if service or
   protocol is not found.
  
 " 
"getservbyport", "Get Internet service which corresponds to port and protocol
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( int $port
   , string $protocol
   )

  
  ) returns the Internet service
   associated with port for the specified
   protocol as per /etc/services.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
port

     

      
       The port number.
      
     

    
    
     
protocol

     

      
       protocol is either &quot;tcp&quot;
       or &quot;udp&quot; (in lowercase).
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the Internet service name as a string.
  
 " 
"gettext", "Lookup a message in the current domain
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $message
   )

  
   Looks up a message in the current domain.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
message

     

      
       The message being translated.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a translated string if one is found in the 
   translation table, or the submitted message if not found.
  
 " 
"gettimeofday", "Get current time
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ([ bool $return_float = false
  ] )

  
   This is an interface to2). It returns an
   associative array containing the data returned from the system
   call.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
return_float

     

      
       When set to TRUE, a float instead of an array is returned.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   By default an array is returned. If return_float
   is set, then a float is returned.
  
  
   Array keys:
   
     
      &quot;sec&quot; - seconds since the Unix Epoch
     
    
    
     
      &quot;usec&quot; - microseconds
     
    
    
     
      &quot;minuteswest&quot; - minutes west of Greenwich
     
    
    
     
      &quot;dsttime&quot; - type of dst correction
     
    
   " 
"gettype", "Get the type of a variable
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( mixed $var
   )

  
   Returns the type of the PHP variable var. For
   type checking, use is_* functions.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
var

     

      
       The variable being type checked.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Possible values for the returned string are:
   
     
      &quot;boolean&quot;
     
    
    
     
      &quot;integer&quot;
     
    
    
     
      &quot;double&quot; (for historical reasons &quot;double&quot; is
      returned in case of a float, and not simply
      &quot;float&quot;)
     
    
    
     
      &quot;string&quot;
     
    
    
     
      &quot;array&quot;
     
    
    
     
      &quot;object&quot;
     
    
    
     
      &quot;resource&quot;
     
    
    
     
      &quot;NULL&quot;
     
    
    
     
      &quot;unknown type&quot;
     
    
   " 
"glob", "Find pathnames matching a pattern
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $pattern
   [, int $flags = 0
  ] )

  
   The) function searches for all the pathnames
   matching pattern according to the rules used by
   the libc) function, which is similar to the rules used by common
   shells.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pattern

     

      
       The pattern. No tilde expansion or parameter substitution is done.
      
     

    
    
     
flags

     

      
       Valid flags:
       
         
          GLOB_MARK - Adds a slash to each directory returned
         
        
        
         
          GLOB_NOSORT - Return files as they appear in the
          directory (no sorting). When this flag is not used, the pathnames are
          sorted alphabetically
         
        
        
         
          GLOB_NOCHECK - Return the search pattern if no
          files matching it were found
         
        
        
         
          GLOB_NOESCAPE - Backslashes do not quote
          metacharacters
         
        
        
         
          GLOB_BRACE - Expands {a,b,c} to match 'a', 'b',
          or 'c'
         
        
        
         
          GLOB_ONLYDIR - Return only directory entries
          which match the pattern
         
        
        
         
          GLOB_ERR - Stop on read errors (like unreadable
          directories), by default errors are ignored.
         
        
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array containing the matched files/directories, an empty array
   if no file matched or FALSE on error.
  
  Note: 
   
    On some systems it is impossible to distinguish between empty match and an
    error.
   
  
 " 
"gmdate", "Format a GMT/UTC date/time
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $format
   [, int $timestamp = time()
  ] )

  
   Identical to the date() function except that
   the time returned is Greenwich Mean Time (GMT). 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
format

     

      
       The format of the outputted date string. See the formatting
       options for the date() function.
      
     

    
    
    

timestamp


The optional timestamp parameter is an
integer Unix timestamp that defaults to the current
local time if a timestamp is not given. In other
words, it defaults to the value of time().


   
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a formatted date string. If a non-numeric value is used for 
   timestamp, FALSE is returned and an 
   E_WARNING level error is emitted.
  
 " 
"gmmktime", "Get Unix timestamp for a GMT date
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ([ int $hour = gmdate(&quot;H&quot;)
   [, int $minute = gmdate(&quot;i&quot;)
   [, int $second = gmdate(&quot;s&quot;)
   [, int $month = gmdate(&quot;n&quot;)
   [, int $day = gmdate(&quot;j&quot;)
   [, int $year = gmdate(&quot;Y&quot;)
   [, int $is_dst = -1
  ]]]]]]] )

  
   Identical to mktime() except the passed parameters represents a 
   GMT date.) internally uses mktime()
   so only times valid in derived local time can be used.
  
  
   Like mktime(), arguments may be left out in order
   from right to left, with any omitted arguments being set to the
   current corresponding GMT value.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
hour

     

      
       The number of the hour relative to the start of the day determined by
       month, day and year.
       Negative values reference the hour before midnight of the day in question.
       Values greater than 23 reference the appropriate hour in the following day(s).
      
     

    
    
     
minute

     

      
       The number of the minute relative to the start of the hour.
       Negative values reference the minute in the previous hour.
       Values greater than 59 reference the appropriate minute in the following hour(s).
      
     

    
    
     
second

     

      
       The number of seconds relative to the start of the minute.
       Negative values reference the second in the previous minute.
       Values greater than 59 reference the appropriate second in the following minute(s).
      
     

    
    
     
month

     

      
       The number of the month relative to the end of the previous year.
       Values 1 to 12 reference the normal calendar months of the year in question.
       Values less than 1 (including negative values) reference the months in the previous year in reverse order, so 0 is December, -1 is November, etc.
       Values greater than 12 reference the appropriate month in the following year(s).
      
     

    
    
     
day

     

      
       The number of the day relative to the end of the previous month.
       Values 1 to 28, 29, 30 or 31 (depending upon the month) reference the normal days in the relevant month.
       Values less than 1 (including negative values) reference the days in the previous month, so 0 is the last day of the previous month, -1 is the day before that, etc.
       Values greater than the number of days in the relevant month reference the appropriate day in the following month(s).
      
     

    
    
     
year

     

      
       The year
      
     

    
    
     
is_dst

     

      
       </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre> always represent a GMT date so is_dst
       doesn't influence the result.
      
      Note: 
       
        This parameter has been removed in PHP 7.0.0.
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a integer Unix timestamp.
  
 " 
"gmstrftime", "Format a GMT/UTC time/date according to locale settings
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $format
   [, int $timestamp = time()
  ] )

  
   Behaves the same as strftime() except that the
   time returned is Greenwich Mean Time (GMT). For example, when run
   in Eastern Standard Time (GMT -0500), the first line below prints
   &quot;Dec 31 1998 20:00:00&quot;, while the second prints &quot;Jan 01 1999
   01:00:00&quot;.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
format

     

      
       See description in strftime().
      
     

    
    

timestamp


The optional timestamp parameter is an
integer Unix timestamp that defaults to the current
local time if a timestamp is not given. In other
words, it defaults to the value of time().


   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string formatted according to the given format string
   using the given timestamp or the current
   local time if no timestamp is given.  Month and weekday names and
   other language dependent strings respect the current locale set
   with setlocale().
  
 " 
"grapheme_extract", "Function to extract a sequence of default grapheme clusters from a text buffer, which must be encoded in UTF-8.
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Procedural style
  
   string    ( string $haystack
   , int $size
   [, int $extract_type
   [, int $start = 0
   [, int &amp;$next
  ]]] )

  
   Function to extract a sequence of default grapheme clusters from a text buffer, which must be encoded in UTF-8. 
   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
haystack

     

      
       String to search.
      
     

    
    
     
size

     

      
       Maximum number items - based on the $extract_type - to return.
      
     

    
    
     
extract_type

     

      
       Defines the type of units referred to by the $size parameter:
      
       
        GRAPHEME_EXTR_COUNT (default) - $size is the number of default
         grapheme clusters to extract.
         GRAPHEME_EXTR_MAXBYTES - $size is the maximum number of bytes
         returned.
         GRAPHEME_EXTR_MAXCHARS - $size is the maximum number of UTF-8
         characters returned.
        

    
    
     
start

     

      
       Starting position in $haystack in bytes - if given, it must be zero or a
       positive value that is less than or equal to the length of $haystack in
       bytes. If $start does not point to the first byte of a UTF-8
       character, the start position is moved to the next character boundary.
      
     

    
    
     
next

     

      
       Reference to a value that will be set to the next starting position.
       When the call returns, this may point to the first byte position past the end of the string.
      
     

    
 
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   A string starting at offset $start and ending on a default grapheme cluster
   boundary that conforms to the $size and $extract_type specified.
  
 " 
"grapheme_stripos", "Find position (in grapheme units) of first occurrence of a case-insensitive string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Procedural style
  
   int    ( string $haystack
   , string $needle
   [, int $offset = 0
  ] )

  
   Find position (in grapheme units) of first occurrence of a case-insensitive string
   
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
haystack

     

      
       The string to look in. Must be valid UTF-8.
      
     

    
    
     
needle

     

      
       The string to look for. Must be valid UTF-8. 
      
     

    
    
     
offset

     

      
       The optional $offset parameter allows you to specify where in haystack to
       start searching as an offset in grapheme units (not bytes or characters).
       The position returned is still relative to the beginning of haystack
       regardless of the value of $offset.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the position as an integer. If needle is not found,) will return boolean FALSE.   
  
 " 
"grapheme_stristr", "Returns part of haystack string from the first occurrence of case-insensitive needle to the end of haystack.
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Procedural style
  
   string    ( string $haystack
   , string $needle
   [, bool $before_needle = false
  ] )

  
   Returns part of haystack string starting from and including the first occurrence of case-insensitive needle to the end of haystack.
   
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
haystack

     

      
       The input string. Must be valid UTF-8.
      
     

    
    
     
needle

     

      
       The string to look for. Must be valid UTF-8.
      
     

    
    
     
before_needle

     

      
       If TRUE, grapheme_strstr() returns the part of the
       haystack before the first occurrence of the needle (excluding needle).
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the portion of $haystack, or FALSE if $needle is not found.   
  
 " 
"grapheme_strlen", "Get string length in grapheme units
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Procedural style
  
   int    ( string $input
   )

  
   Get string length in grapheme units (not bytes or characters)
   
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
input

     

      
       The string being measured for length. It must be a valid UTF-8 string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The length of the string on success, and 0 if the string is empty.   
  
 " 
"grapheme_strpos", "Find position (in grapheme units) of first occurrence of a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Procedural style
  
   int    ( string $haystack
   , string $needle
   [, int $offset = 0
  ] )

  
   Find position (in grapheme units) of first occurrence of a string
   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
haystack

     

      
       The string to look in. Must be valid UTF-8.
      
     

    
    
     
needle

     

      
       The string to look for. Must be valid UTF-8.
      
     

    
    
     
offset

     

      
       The optional $offset parameter allows you to specify where in $haystack to
       start searching as an offset in grapheme units (not bytes or characters).
       The position returned is still relative to the beginning of haystack
       regardless of the value of $offset.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the position as an integer. If needle is not found, strpos() will return boolean FALSE.   
  
 " 
"grapheme_strripos", "Find position (in grapheme units) of last occurrence of a case-insensitive string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Procedural style
  
   int    ( string $haystack
   , string $needle
   [, int $offset = 0
  ] )

  
   Find position (in grapheme units) of last occurrence of a case-insensitive string
   
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
haystack

     

      
       The string to look in. Must be valid UTF-8.
      
     

    
    
     
needle

     

      
       The string to look for. Must be valid UTF-8.
      
     

    
    
     
offset

     

      
       The optional $offset parameter allows you to specify where in $haystack to
       start searching as an offset in grapheme units (not bytes or characters).
       The position returned is still relative to the beginning of haystack
       regardless of the value of $offset.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the position as an integer. If needle is not found,) will return boolean FALSE.   
  
 " 
"grapheme_strrpos", "Find position (in grapheme units) of last occurrence of a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Procedural style
  
   int    ( string $haystack
   , string $needle
   [, int $offset = 0
  ] )

  
   Find position (in grapheme units) of last occurrence of a string
   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
haystack

     

      
       The string to look in. Must be valid UTF-8.
      
     

    
    
     
needle

     

      
       The string to look for. Must be valid UTF-8.
      
     

    
    
     
offset

     

      
       The optional $offset parameter allows you to specify where in $haystack to
       start searching as an offset in grapheme units (not bytes or characters).
       The position returned is still relative to the beginning of haystack
       regardless of the value of $offset.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the position as an integer. If needle is not found,) will return boolean FALSE.   
  
 " 
"grapheme_strstr", "Returns part of haystack string from the first occurrence of needle to the end of haystack.
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Procedural style
  
   string    ( string $haystack
   , string $needle
   [, bool $before_needle = false
  ] )

  
   Returns part of haystack string from the first occurrence of needle to the end of haystack (including the needle).
   
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
haystack

     

      
       The input string. Must be valid UTF-8. 
      
     

    
    
     
needle

     

      
       The string to look for. Must be valid UTF-8. 
      
     

    
    
     
before_needle

     

      
       If TRUE,) returns the part of the
       haystack before the first occurrence of the needle (excluding the needle).
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the portion of string, or FALSE if needle is not found.   
  
 " 
"grapheme_substr", "Return part of a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Procedural style
  
   int    ( string $string
   , int $start
   [, int $length
  ] )

  
   Return part of a string
   
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
string

     

      
       The input string. Must be valid UTF-8. 
      
     

    
    
     
start

     

      
       Start position in default grapheme units.
       If $start is non-negative, the returned string will start at the
       $start'th position in $string, counting from zero. If $start is negative,
       the returned string will start at the $start'th grapheme unit from the 
       end of string.
      
     

    
    
     
length

     

      
       Length in grapheme units.
       If $length  is given and is positive, the string returned will contain
       at most $length grapheme units beginning from $start (depending on the 
       length of string). If $length is given and is negative, then
       that many grapheme units will be omitted from the end of string (after the
       start position has been calculated when a start is negative). If $start
       denotes a position beyond this truncation, FALSE will be returned. 
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the extracted part of $string.   
  
 " 
"gregoriantojd", "Converts a Gregorian date to Julian Day Count
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( int $month
   , int $day
   , int $year
   )

  
   Valid Range for Gregorian Calendar 4714 B.C. to 9999 A.D.
  
   Although this function can handle dates all the way back to 4714
   B.C., such use may not be meaningful. The Gregorian calendar was
   not instituted until October 15, 1582 (or October 5, 1582 in the
   Julian calendar). Some countries did not accept it until much
   later. For example, Britain converted in 1752, The USSR in 1918
   and Greece in 1923. Most European countries used the Julian
   calendar prior to the Gregorian.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
month

     

      
       The month as a number from 1 (for January) to 12 (for December)
      
     

    
    
     
day

     

      
       The day as a number from 1 to 31
      
     

    
    
     
year

     

      
       The year as a number between -4714 and 9999
      
     

      
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The julian day for the given gregorian date as an integer.
  
 " 
"gzclose", "Close an open gz-file pointer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $zp
   )

  
   Closes the given gz-file pointer.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
zp

     

      
       The gz-file pointer. It must be valid, and must point to a file
       successfully opened by gzopen().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"gzcompress", "Compress a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $data
   [, int $level = -1
   [, int $encoding = ZLIB_ENCODING_DEFLATE
  ]] )

  
   This function compresses the given string using the ZLIB
   data format.
  
  
   For details on the ZLIB compression algorithm see the document
   &quot;» ZLIB Compressed Data Format
   Specification version 3.3&quot; (RFC 1950).
  
  Note: 
   
    This is not the same as gzip compression,
    which includes some header data. See gzencode()
    for gzip compression.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
data

     

      
       The data to compress.
      
     

    
    
     
level

     

      
       The level of compression. Can be given as 0 for no compression up to 9
       for maximum compression.
      
      
       If -1 is used, the default compression of the zlib library is used which is 6.
      
     

    
    
     
encoding

     

      
       One of ZLIB_ENCODING_* constants.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The compressed string or FALSE if an error occurred.
  
 " 
"gzdecode", "Decodes a gzip compressed string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $data
   [, int $length
  ] )

     
   This function returns a decoded version of the input
   data.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
data

     

      
       The data to decode, encoded by gzencode().
      
     

    
    
     
length

     

      
       The maximum length of data to decode.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The decoded string, or FALSE if an error occurred.
  
 " 
"gzdeflate", "Deflate a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $data
   [, int $level = -1
   [, int $encoding = ZLIB_ENCODING_RAW
  ]] )

  
   This function compresses the given string using the DEFLATE
   data format.
  
  
   For details on the DEFLATE compression algorithm see the document
   &quot;» DEFLATE Compressed Data Format
   Specification version 1.3&quot; (RFC 1951).
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
data

     

      
       The data to deflate.
      
     

    
    
     
level

     

      
       The level of compression. Can be given as 0 for no compression up to 9
       for maximum compression. If not given, the default compression level will
       be the default compression level of the zlib library.
      
     

    
    
     
encoding

     

      
       One of ZLIB_ENCODING_* constants.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The deflated string or FALSE if an error occurred.
  
 " 
"gzencode", "Create a gzip compressed string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $data
   [, int $level = -1
   [, int $encoding_mode = FORCE_GZIP
  ]] )

     
   This function returns a compressed version of the input
   data compatible with the output of the
   gzip program.
  
  
   For more information on the GZIP file format, see the document:
   » GZIP file format specification
   version 4.3 (RFC 1952).
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
data

     

      
       The data to encode.
      
     

    
    
     
level

     

      
       The level of compression. Can be given as 0 for no compression up to 9
       for maximum compression. If not given, the default compression level will
       be the default compression level of the zlib library.
      
     

    
    
     
encoding_mode

     

      
       The encoding mode. Can be FORCE_GZIP (the default)
       or FORCE_DEFLATE. 
      
      
       Prior to PHP 5.4.0, using FORCE_DEFLATE results in
       a standard zlib deflated string (inclusive zlib headers) after a gzip
       file header but without the trailing crc32 checksum.
      
      
       In PHP 5.4.0 and later, FORCE_DEFLATE generates
       RFC 1950 compliant output, consisting of a zlib header, the deflated
       data, and an Adler checksum.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The encoded string, or FALSE if an error occurred.
  
 " 
"gzeof", "Test for EOF on a gz-file pointer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $zp
   )

  
   Tests the given GZ file pointer for EOF.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
zp

     

      
       The gz-file pointer. It must be valid, and must point to a file
       successfully opened by gzopen().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
   
   Returns TRUE if the gz-file pointer is at EOF or an error occurs;
   otherwise returns FALSE.
  
 " 
"gzfile", "Read entire gz-file into an array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $filename
   [, int $use_include_path = 0
  ] )

   
   This function is identical to readNAME(), except that
   it returns the file in an array.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       The file name.
      
     

    
    
     
use_include_path

     

      
       You can set this optional parameter to 1, if you
       want to search for the file in the include_path too.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   An array containing the file, one line per cell, empty lines included, and with newlines still attached.
  
 " 
"gzgetc", "Get character from gz-file pointer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $zp
   )

  
   Returns a string containing a single (uncompressed) character
   read from the given gz-file pointer.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
zp

     

      
       The gz-file pointer. It must be valid, and must point to a file
       successfully opened by gzopen().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The uncompressed character or FALSE on EOF (unlike gzeof()).
  
 " 
"gzgets", "Get line from file pointer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $zp
   [, int $length
  ] )

  
   Gets a (uncompressed) string of up to length - 1 bytes read from the given
   file pointer. Reading ends when length - 1 bytes have been read, on a 
   newline, or on EOF (whichever comes first).
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
zp

     

      
       The gz-file pointer. It must be valid, and must point to a file
       successfully opened by gzopen().
      
     

    
    
     
length

     

      
       The length of data to get.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The uncompressed string, or FALSE on error.
  
 " 
"gzgetss", "
   Get line from gz-file pointer and strip HTML tags
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $zp
   , int $length
   [, string $allowable_tags
  ] )

  
   Identical to gzgets(), except that
  ) attempts to strip any HTML and PHP
   tags from the text it reads.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
zp

     

      
       The gz-file pointer. It must be valid, and must point to a file
       successfully opened by gzopen().
      
     

    
    
     
length

     

      
       The length of data to get.
      
     

    
    
     
allowable_tags

     

      
       You can use this optional parameter to specify tags which should not 
       be stripped.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The uncompressed and stripped string, or FALSE on error.
  
 " 
"gzinflate", "Inflate a deflated string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $data
   [, int $length = 0
  ] )

     
   This function inflates a deflated string.  
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
data

     

      
       The data compressed by gzdeflate().
      
     

    
    
     
length

     

      
       The maximum length of data to decode.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The original uncompressed data or FALSE on error.
  
  
   The function will return an error if the uncompressed data is more than
   32768 times the length of the compressed input data 
   or more than the optional parameter length.
  
 " 
"gzopen", "Open gz-file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( string $filename
   , string $mode
   [, int $use_include_path = 0
  ] )

  
   Opens a gzip (.gz) file for reading or writing. 
  
  
  ) can be used to read a file which is
   not in gzip format; in this case gzread() will
   directly read from the file without decompression.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       The file name.
      
     

    
    
     
mode

     

      
       As in fopen() (rb or 
       wb) but can also include a compression level 
       (wb9) or a strategy: f for
       filtered data as in wb6f, h for
       Huffman only compression as in wb1h.
       (See the description of deflateInit2
       in zlib.h for 
       more information about the strategy parameter.)
      
     

    
    
     
use_include_path

     

      
       You can set this optional parameter to 1, if you
       want to search for the file in the include_path too.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a file pointer to the file opened, after that, everything you read
   from this file descriptor will be transparently decompressed and what you 
   write gets compressed.
  
  
   If the open fails, the function returns FALSE.
  
 " 
"gzpassthru", "
   Output all remaining data on a gz-file pointer
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $zp
   )

  
   Reads to EOF on the given gz-file pointer from the current position and
   writes the (uncompressed) results to standard output.
  
  Note: 
   
    You may need to call gzrewind() to reset the file
    pointer to the beginning of the file if you have already written data 
    to it. 
   
  
  Tip
   
    If you just want to dump the contents of a file to the output buffer, 
    without first modifying it or seeking to a particular offset, you may 
    want to use the readgzfile() function, which saves 
    you the gzopen() call.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
zp

     

      
       The gz-file pointer. It must be valid, and must point to a file
       successfully opened by gzopen().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The number of uncompressed characters read from gz
   and passed through to the input, or FALSE on error.
  
 " 
"gzputs", "Alias of gzwrite()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   gzwrite().
  
 " 
"gzread", "Binary-safe gz-file read
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $zp
   , int $length
   )

  
  ) reads up to length bytes
   from the given gz-file pointer. Reading stops when
   length (uncompressed) bytes have been read
   or EOF is reached, whichever comes first.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
zp

     

      
       The gz-file pointer. It must be valid, and must point to a file
       successfully opened by gzopen().
      
     

    
    
     
length

     

      
       The number of bytes to read.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The data that have been read.
  
 " 
"gzrewind", "Rewind the position of a gz-file pointer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $zp
   )

      
   Sets the file position indicator of the given gz-file pointer to the 
   beginning of the file stream.
   
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
zp

     

      
       The gz-file pointer. It must be valid, and must point to a file
       successfully opened by gzopen().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"gzseek", "Seek on a gz-file pointer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $zp
   , int $offset
   [, int $whence = SEEK_SET
  ] )

  
   Sets the file position indicator for the given file pointer to the
   given offset byte into the file stream. Equivalent to calling (in C)
  zp, offset, SEEK_SET).
  
  
   If the file is opened for reading, this function is emulated but
   can be extremely slow. If the file is opened for writing, only
   forward seeks are supported;) then compresses
   a sequence of zeroes up to the new starting position.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
zp

     

      
       The gz-file pointer. It must be valid, and must point to a file
       successfully opened by gzopen().
      
     

    
    
     
offset

     

      
       The seeked offset.
      
     

    
    
     
whence

     

      
       whence values are:
       SEEK_SET - Set position equal to offset bytes.
        SEEK_CUR - Set position to current location plus offset.
       
       If whence is not specified, it is assumed to be
       SEEK_SET.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Upon success, returns 0; otherwise, returns -1. Note that seeking
   past EOF is not considered an error.
  
 " 
"gztell", "Tell gz-file pointer read/write position
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $zp
   )

  
   Gets the position of the given file pointer; i.e., its offset into the
   uncompressed file stream.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
zp

     

      
       The gz-file pointer. It must be valid, and must point to a file
       successfully opened by gzopen().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The position of the file pointer or FALSE if an error occurs.
  
 " 
"gzuncompress", "Uncompress a compressed string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $data
   [, int $length = 0
  ] )

     
   This function uncompress a compressed string.  
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
data

     

      
       The data compressed by gzcompress().
      
     

    
    
     
length

     

      
       The maximum length of data to decode.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The original uncompressed data or FALSE on error.
  
  
   The function will return an error if the uncompressed data is more than
   32768 times the length of the compressed input data 
   or more than the optional parameter length.
  
 " 
"gzwrite", "Binary-safe gz-file write
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $zp
   , string $string
   [, int $length
  ] )

  
  ) writes the contents of
   string to the given gz-file.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
zp

     

      
       The gz-file pointer. It must be valid, and must point to a file
       successfully opened by gzopen().
      
     

    
    
     
string

     

      
       The string to write.
      
     

    
    
     
length

     

      
       The number of uncompressed bytes to write. If supplied, writing will 
       stop after length (uncompressed) bytes have been
       written or the end of string is reached,
       whichever comes first.
      
      Note: 
       
        Note that if the length argument is given,
        then the magic_quotes_runtime
        configuration option will be ignored and no slashes will be
        stripped from string.
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
   
   Returns the number of (uncompressed) bytes written to the given gz-file 
   stream.
  
 " 
"hash", "Generate avalue (message digest)
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $algo
   , string $data
   [, bool $raw_output = false
  ] )


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
algo

     

      
       Name of selected NAMEing algorithm (e.g. &quot;md5&quot;, &quot;sha256&quot;, &quot;haval160,4&quot;, etc..)
      
     

    
    
     
data

     

      
       Message to be NAMEed.
      
     

    
    
     
raw_output

     

      
       When set to TRUE, outputs raw binary data.
       FALSE outputs lowercase hexits.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string containing the calculated message digest as lowercase hexits
   unless raw_output is set to true in which case the raw
   binary representation of the message digest is returned.
  
 " 
"hash_algos", "Return a list of registered hashing algorithms
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a numerically indexed array containing the list of supported
   hashing algorithms.
  
 " 
"hash_copy", "Copy hashing context
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( resource $context
   )

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
context

     

      
       Hashing context returned by hash_init().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a copy of Hashing Context resource.
  
 " 
"hash_equals", "Timing attack safe string comparison
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $known_string
   , string $user_string
   )

  
   Compares two strings using the same time whether they're equal or not.
  
  
   This function should be used to mitigate timing attacks; for instance,
   when testing crypt() password hashes.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
known_string

    

     
       The string of known length to compare against
     
    

   
   
    
user_string

    

     
      The user-supplied string
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
    Returns TRUE when the two strings are equal, FALSE otherwise.
  
 " 
"hash_file", "Generate a hash value using the contents of a given file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $algo
   , string $filename
   [, bool $raw_output = false
  ] )


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
algo

     

      
       Name of selected hashing algorithm (i.e. &quot;md5&quot;, &quot;sha256&quot;, &quot;haval160,4&quot;, etc..)
      
     

    
    
     
filename

     

      
       URL describing location of file to be hashed; Supports fopen wrappers.
      
     

    
    
     
raw_output

     

      
       When set to TRUE, outputs raw binary data.
       FALSE outputs lowercase hexits.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string containing the calculated message digest as lowercase hexits
   unless raw_output is set to true in which case the raw
   binary representation of the message digest is returned.
  
 " 
"hash_final", "Finalize an incremental hash and return resulting digest
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $context
   [, bool $raw_output = false
  ] )


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
context

     

      
       Hashing context returned by hash_init().
      
     

    
    
     
raw_output

     

      
       When set to TRUE, outputs raw binary data.
       FALSE outputs lowercase hexits.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string containing the calculated message digest as lowercase hexits
   unless raw_output is set to true in which case the raw
   binary representation of the message digest is returned.
  
 " 
"hash_hmac", "Generate a keyed hash value using the HMAC method
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $algo
   , string $data
   , string $key
   [, bool $raw_output = false
  ] )


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
algo

     

      
       Name of selected hashing algorithm (i.e. &quot;md5&quot;, &quot;sha256&quot;, &quot;haval160,4&quot;, etc..) See hash_algos() for a list of supported algorithms.
      
     

    
    
     
data

     

      
       Message to be hashed.
      
     

    
    
     
key

     

      
       Shared secret key used for generating the HMAC variant of the message digest.
      
     

    
    
     
raw_output

     

      
       When set to TRUE, outputs raw binary data.
       FALSE outputs lowercase hexits.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string containing the calculated message digest as lowercase hexits
   unless raw_output is set to true in which case the raw
   binary representation of the message digest is returned.
   Returns FALSE when algo is unknown.
  
 " 
"hash_hmac_file", "Generate a keyed hash value using the HMAC method and the contents of a given file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $algo
   , string $filename
   , string $key
   [, bool $raw_output = false
  ] )


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
algo

     

      
       Name of selected hashing algorithm (i.e. &quot;md5&quot;, &quot;sha256&quot;, &quot;haval160,4&quot;, etc..) See hash_algos() for a list of supported algorithms.
      
     

    
    
     
filename

     

      
       URL describing location of file to be hashed; Supports fopen wrappers.
      
     

    
    
     
key

     

      
       Shared secret key used for generating the HMAC variant of the message digest.
      
     

    
    
     
raw_output

     

      
       When set to TRUE, outputs raw binary data.
       FALSE outputs lowercase hexits.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string containing the calculated message digest as lowercase hexits
   unless raw_output is set to true in which case the raw
   binary representation of the message digest is returned.
  
 " 
"hash_init", "Initialize an incremental hashing context
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( string $algo
   [, int $options = 0
   [, string $key = NULL
  ]] )


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
algo

     

      
       Name of selected hashing algorithm (i.e. &quot;md5&quot;, &quot;sha256&quot;, &quot;haval160,4&quot;, etc..). For a list of supported algorithms see hash_algos().
      
     

    
    
     
options

     

      
       Optional settings for hash generation, currently supports only one option:
       HASH_HMAC.  When specified, the key
       must be specified.
      
     

    
    
     
key

     

      
       When HASH_HMAC is specified for options,
       a shared secret key to be used with the HMAC hashing method must be supplied in this
       parameter.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a Hashing Context resource for use with hash_update(),
   hash_update_stream(), hash_update_file(),
   and hash_final().
  
 " 
"hash_pbkdf2", "Generate a PBKDF2 key derivation of a supplied password
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $algo
   , string $password
   , string $salt
   , int $iterations
   [, int $length = 0
   [, bool $raw_output = false
  ]] )

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
algo

     

      
       Name of selected hashing algorithm (i.e. md5,
       sha256, haval160,4, etc..) See
       hash_algos() for a list of supported algorithms.
      
     

    
    
     
password

     

      
       The password to use for the derivation.
      
     

    
    
     
salt

     

      
       The salt to use for the derivation. This value should be generated randomly.
      
     

    
    
     
iterations

     

      
       The number of internal iterations to perform for the derivation.
      
     

    
    
     
length

     

      
       The length of the output string. If raw_output
       is TRUE this corresponds to the byte-length of the derived key, if
       raw_output is FALSE this corresponds to twice the
       byte-length of the derived key (as every byte of the key is returned as
       two hexits).
      
      
       If 0 is passed, the entire output of the supplied
       algorithm is used.
      
     

    
    
     
raw_output

     

      
       When set to TRUE, outputs raw binary data. FALSE outputs lowercase
       hexits.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string containing the derived key as lowercase hexits unless
   raw_output is set to TRUE in which case the raw
   binary representation of the derived key is returned.
  
 " 
"hash_update", "Pump data into an active hashing context
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $context
   , string $data
   )


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
context

     

      
       Hashing context returned by hash_init().
      
     

    
    
     
data

     

      
       Message to be included in the hash digest.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE.
  
 " 
"hash_update_file", "Pump data into an active hashing context from a file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $hcontext
   , string $filename
   [, resource $scontext = NULL
  ] )


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
hcontext

     

      
       Hashing context returned by hash_init().
      
     

    
    
     
filename

     

      
       URL describing location of file to be hashed; Supports fopen wrappers.
      
     

    
    
     
scontext

     

      
       Stream context as returned by stream_context_create().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"hash_update_stream", "Pump data into an active hashing context from an open stream
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $context
   , resource $handle
   [, int $length = -1
  ] )


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
context

     

      
       Hashing context returned by hash_init().
      
     

    
    
     
handle

     

      
       Open file handle as returned by any stream creation function.
      
     

    
    
     
length

     

      
       Maximum number of characters to copy from handle
       into the hashing context.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Actual number of bytes added to the hashing context from handle.
  
 " 
"header", "Send a raw HTTP NAME
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( string $string
   [, bool $replace = true
   [, int $http_response_code
  ]] )

  
  ) is used to send a raw HTTP
   See the » HTTP/1.1 specification
   for more information on HTTP NAMEs.
  
  
   Remember that) must be called before any
   actual output is sent, either by normal HTML tags, blank lines in a
   file, or from PHP. It is a very common error to read code with
   include, or require, 
   functions, or another file access function, and have spaces or empty
   lines that are output before) is called.
   The same problem exists when using a single PHP/HTML file.
   
    




    

   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
string

     

      
       Thestring.
      
      
       There are two special-casecalls.  The first is a       that starts with the string &quot;HTTP/&quot; (case is not
       significant), which will be used to figure out the HTTP status
       code to send. For example, if you have configured Apache to
       use a PHP script to handle requests for missing files (using
       the ErrorDocument directive), you may want to
       make sure that your script generates the proper status code.
      
      
       
        




        

       
      
      
       The second special case is the &quot;Location:&quot;  Not only does
       it send thisback to the browser, but it also returns a
       REDIRECT (302) status code to the browser
       unless the 201 or
       a 3xx status code has already been set.
      
      
       
        




        

       
      
     

    
    
     
replace

     

      
       The optional replace parameter indicates
       whether theshould replace a previous similar or
       add a secondof the same type.  By default it will replace,
       but if you pass in FALSE as the second argument you can force
       multiple NAMEs of the same type.  For example:
      
      
       
        




        

       
      
     

    
    
     
http_response_code

     

      
       Forces the HTTP response code to the specified value. Note that this 
       parameter only has an effect if the string is 
       not empty.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"header_register_callback", "Call a header function
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( callable $callback
   )

  
   Registers a function that will be called when PHP starts sending output.
  
  
   The callback is executed just after PHP prepares all
   headers to be sent, and before any other output is sent, creating a window
   to manipulate the outgoing headers before being sent.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
callback

    

     
      Function called just before the headers are sent. It gets no parameters
      and the return value is ignored.
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"header_remove", "Remove previously set headers
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ([ string $name
  ] )

  
   Removes an HTTP header previously set using header().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
name

     

      
       The header name to be removed.
      
      Note: 
       
        This parameter is case-insensitive.
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"headers_list", "Returns a list of response headers sent (or ready to send)
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
  ) will return a list of headers to be sent
   to the browser / client.  To determine whether or not these headers have
   been sent yet, use headers_sent().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a numerically indexed array of headers.
  
 " 
"headers_sent", "Checks if or where headers have been sent
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ([ string &amp;$file
   [, int &amp;$line
  ]] )

  
   Checks if or where headers have been sent.
  
  
   You can't add any more header lines using the header()
   function once the header block has already been sent. Using this function
   you can at least prevent getting HTTP header related error messages.
   Another option is to use Output Buffering.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
file

     

      
       If the optional file and
       line parameters are set, 
      ) will put the PHP source file name
       and line number where output started in the file
       and line variables.
      
     

    
    
     
line

     

      
       The line number where the output started.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) will return FALSE if no HTTP headers
   have already been sent or TRUE otherwise.
  
 " 
"hebrev", "Convert logical Hebrew text to visual text
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $hebrew_text
   [, int $max_chars_per_line = 0
  ] )

  
   Converts logical Hebrew text to visual text.
  
  
   The function tries to avoid breaking words.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
hebrew_text

     

      
       A Hebrew input string.
      
     

    
    
     
max_chars_per_line

     

      
       This optional parameter indicates maximum number of characters per
       line that will be returned.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the visual string.
  
 " 
"hebrevc", "Convert logical Hebrew text to visual text with newline conversion
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $hebrew_text
   [, int $max_chars_per_line = 0
  ] )

  
   This function is similar to hebrev() with the
   difference that it converts newlines (\n) to &quot;\n&quot;.
  
  
   The function tries to avoid breaking words.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
hebrew_text

     

      
       A Hebrew input string.
      
     

    
    
     
max_chars_per_line

     

      
       This optional parameter indicates maximum number of characters per
       line that will be returned.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the visual string.
  
 " 
"hex2bin", "Decodes a hexadecimally encoded binary string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $data
   )

  
   Decodes a hexadecimally encoded binary string.
  
  Caution
   
    This function does NOT convert a hexadecimal number to a binary
    number. This can be done using the base_convert() function.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
data

    

     
      Hexadecimal representation of data.
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the binary representation of the given data  or FALSE on failure.
  
 " 
"hexdec", "Hexadecimal to decimal
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    number     ( string $hex_string
    )

  
   Returns the decimal equivalent of the hexadecimal number
   represented by the hex_string argument.
  ) converts a hexadecimal string to a
   decimal number. 
  
  
  ) will ignore any non-hexadecimal 
   characters it encounters.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
hex_string

     

      
       The hexadecimal string to convert
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The decimal representation of hex_string
  
 " 
"highlight_file", "Syntax highlighting of a file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( string $filename
   [, bool $return = false
  ] )

  
   Prints out or returns a syntax highlighted version of the code contained
   in filename using the colors defined in the
   built-in syntax highlighter for PHP.
  
  
   Many servers are configured to automatically highlight files
   with a phps extension. For example,
   example.phps when viewed will show the
   syntax highlighted source of the file. To enable this, add this
   line to the httpd.conf:
  
  
AddType application/x-httpd-php-source .phps

  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the PHP file to be highlighted.
      
     

    
    
     
return

     

      
       Set this parameter to TRUE to make this function return the
       highlighted code.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   If return is set to TRUE, returns the highlighted
   code as a string instead of printing it out. Otherwise, it will return
   TRUE on success, FALSE on failure.
  
 " 
"highlight_string", "Syntax highlighting of a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( string $str
   [, bool $return = false
  ] )

  
   Outputs or returns html markup for a syntax highlighted version of the given PHP code
   using the colors defined in the built-in syntax highlighter for PHP.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The PHP code to be highlighted. This should include the opening tag.
      
     

    
    
     
return

     

      
       Set this parameter to TRUE to make this function return the
       highlighted code.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   If return is set to TRUE, returns the highlighted
   code as a string instead of printing it out. Otherwise, it will return
   TRUE on success, FALSE on failure.
  
 " 
"html_entity_decode", "Convert all HTML entities to their applicable characters
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $string
   [, int $flags = ENT_COMPAT | ENT_HTML401
   [, string $encoding = ini_get(&quot;default_charset&quot;)
  ]] )

  
  ) is the opposite of
   htmlentities() in that it converts all HTML entities
   in the string to their applicable characters.
  
  
   More precisely, this function decodes all the entities (including all numeric
   entities) that a) are necessarily valid for the chosen document type — i.e.,
   for XML, this function does not decode named entities that might be defined
   in some DTD — and b) whose character or characters are in the coded character
   set associated with the chosen encoding and are permitted in the chosen
   document type. All other entities are left as is.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
string

     

      
       The input string.
      
     

    
    
     
flags

     

      
       A bitmask of one or more of the following flags, which specify how to handle quotes and
       which document type to use. The default is ENT_COMPAT | ENT_HTML401.
       Available flags constants
        
         Constant Name
           </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
          ENT_COMPAT
           Will convert double-quotes and leave single-quotes alone.
          ENT_QUOTES
           Will convert both double and single quotes.
          ENT_NOQUOTES
           Will leave both double and single quotes unconverted.
          ENT_HTML401
           
            Handle code as HTML 4.01.
           
          ENT_XML1
           
            Handle code as XML 1.
           
          ENT_XHTML
           
            Handle code as XHTML.
           
          ENT_HTML5
           
            Handle code as HTML 5.
           
          

    
    
     
encoding

     

      
 
  An optional argument defining the encoding used when converting characters.
 

 
  If omitted, the default value of the encoding varies
  depending on the PHP version in use. In PHP 5.6 and later, the
  default_charset configuration
  option is used as the default value. PHP 5.4 and 5.5 will use
  UTF-8 as the default. Earlier versions of PHP use
  ISO-8859-1.
 

 
  Although this argument is technically optional, you are highly encouraged to
  specify the correct value for your code if you are using PHP 5.5 or earlier,
  or if your default_charset
  configuration option may be set incorrectly for the given input.
 

      


 The following character sets are supported:
 Supported charsets
  
   Charset
     Aliases
     </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
    ISO-8859-1
     ISO8859-1
     
      Western European, Latin-1.
     
    ISO-8859-5
     ISO8859-5
     
      Little used cyrillic charset (Latin/Cyrillic).
     
    ISO-8859-15
     ISO8859-15
     
      Western European, Latin-9. Adds the Euro sign, French and Finnish
      letters missing in Latin-1 (ISO-8859-1).
     
    UTF-8
      
     
      ASCII compatible multi-byte 8-bit Unicode.
     
    cp866
     ibm866, 866
     
      DOS-specific Cyrillic charset.
     
    cp1251
     Windows-1251, win-1251, 1251
     
      Windows-specific Cyrillic charset.
     
    cp1252
     Windows-1252, 1252
     
      Windows specific charset for Western European.
     
    KOI8-R
     koi8-ru, koi8r
     
      Russian.
     
    BIG5
     950
     
      Traditional Chinese, mainly used in Taiwan.
     
    GB2312
     936
     
      Simplified Chinese, national standard character set.
     
    BIG5-HKSCS
      
     
      Big5 with Hong Kong extensions, Traditional Chinese.
     
    Shift_JIS
     SJIS, SJIS-win, cp932, 932
     
      Japanese
     
    EUC-JP
     EUCJP, eucJP-win
     
      Japanese
     
    MacRoman
      
     
      Charset that was used by Mac OS.
     
    ''
      
     
      An empty string activates detection from script encoding (Zend multibyte),
      default_charset and current
      locale (see nl_langinfo() and
      setlocale()), in this order. Not recommended.
     
    Note: 
  
   Any other character sets are not recognized. The default encoding will be
   used instead and a warning will be emitted.
  
 



     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the decoded string.
  
 " 
"htmlentities", "Convert all applicable characters to HTML entities
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $string
   [, int $flags = ENT_COMPAT | ENT_HTML401
   [, string $encoding = ini_get(&quot;default_charset&quot;)
   [, bool $double_encode = true
  ]]] )

  
   This function is identical to htmlspecialchars() in all
   ways, except with), all characters which
   have HTML character entity equivalents are translated into these entities.
  
  
   If you want to decode instead (the reverse) you can use
   html_entity_decode().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
string

     

      
       The input string.
      
     

    
    
     
flags

     

      
       A bitmask of one or more of the following flags, which specify how to handle quotes,
       invalid code unit sequences and the used document type. The default is
       ENT_COMPAT | ENT_HTML401.
       Available flags constants
        
         Constant Name
           </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
          ENT_COMPAT
           Will convert double-quotes and leave single-quotes alone.
          ENT_QUOTES
           Will convert both double and single quotes.
          ENT_NOQUOTES
           Will leave both double and single quotes unconverted.
          ENT_IGNORE
           
            Silently discard invalid code unit sequences instead of returning
            an empty string. Using this flag is discouraged as it
            » may have security implications.
           
          ENT_SUBSTITUTE
           
            Replace invalid code unit sequences with a Unicode Replacement Character
            U+FFFD (UTF-8) or &amp;#FFFD; (otherwise) instead of returning an empty string.
           
          ENT_DISALLOWED
           
            Replace invalid code points for the given document type with a
            Unicode Replacement Character U+FFFD (UTF-8) or &amp;#FFFD;
            (otherwise) instead of leaving them as is. This may be useful, for
            instance, to ensure the well-formedness of XML documents with
            embedded external content.
           
          ENT_HTML401
           
            Handle code as HTML 4.01.
           
          ENT_XML1
           
            Handle code as XML 1.
           
          ENT_XHTML
           
            Handle code as XHTML.
           
          ENT_HTML5
           
            Handle code as HTML 5.
           
          

    
    
     
encoding

     

      
 
  An optional argument defining the encoding used when converting characters.
 

 
  If omitted, the default value of the encoding varies
  depending on the PHP version in use. In PHP 5.6 and later, the
  default_charset configuration
  option is used as the default value. PHP 5.4 and 5.5 will use
  UTF-8 as the default. Earlier versions of PHP use
  ISO-8859-1.
 

 
  Although this argument is technically optional, you are highly encouraged to
  specify the correct value for your code if you are using PHP 5.5 or earlier,
  or if your default_charset
  configuration option may be set incorrectly for the given input.
 

      


 The following character sets are supported:
 Supported charsets
  
   Charset
     Aliases
     </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
    ISO-8859-1
     ISO8859-1
     
      Western European, Latin-1.
     
    ISO-8859-5
     ISO8859-5
     
      Little used cyrillic charset (Latin/Cyrillic).
     
    ISO-8859-15
     ISO8859-15
     
      Western European, Latin-9. Adds the Euro sign, French and Finnish
      letters missing in Latin-1 (ISO-8859-1).
     
    UTF-8
      
     
      ASCII compatible multi-byte 8-bit Unicode.
     
    cp866
     ibm866, 866
     
      DOS-specific Cyrillic charset.
     
    cp1251
     Windows-1251, win-1251, 1251
     
      Windows-specific Cyrillic charset.
     
    cp1252
     Windows-1252, 1252
     
      Windows specific charset for Western European.
     
    KOI8-R
     koi8-ru, koi8r
     
      Russian.
     
    BIG5
     950
     
      Traditional Chinese, mainly used in Taiwan.
     
    GB2312
     936
     
      Simplified Chinese, national standard character set.
     
    BIG5-HKSCS
      
     
      Big5 with Hong Kong extensions, Traditional Chinese.
     
    Shift_JIS
     SJIS, SJIS-win, cp932, 932
     
      Japanese
     
    EUC-JP
     EUCJP, eucJP-win
     
      Japanese
     
    MacRoman
      
     
      Charset that was used by Mac OS.
     
    ''
      
     
      An empty string activates detection from script encoding (Zend multibyte),
      default_charset and current
      locale (see nl_langinfo() and
      setlocale()), in this order. Not recommended.
     
    Note: 
  
   Any other character sets are not recognized. The default encoding will be
   used instead and a warning will be emitted.
  
 



     

    
    
     
double_encode

     

      
       When double_encode is turned off PHP will not
       encode existing html entities. The default is to convert everything.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the encoded string.
  
  
   If the input string contains an invalid code unit
   sequence within the given encoding an empty string
   will be returned, unless either the ENT_IGNORE or
   ENT_SUBSTITUTE flags are set.
  
 " 
"htmlspecialchars", "Convert special characters to HTML entities
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $string
   [, int $flags = ENT_COMPAT | ENT_HTML401
   [, string $encoding = ini_get(&quot;default_charset&quot;)
   [, bool $double_encode = true
  ]]] )

  
   Certain characters have special significance in HTML, and should
   be represented by HTML entities if they are to preserve their
   meanings. This function returns a string with these
   conversions made. If you require all input substrings that have associated
   named entities to be translated, use htmlentities()
   instead.
  
  
   If the input string passed to this function and the final document share the
   same character set, this function is sufficient to prepare input for
   inclusion in most contexts of an HTML document. If, however, the input can
   represent characters that are not coded in the final document character set
   and you wish to retain those characters (as numeric or named entities),
   both this function and htmlentities() (which only encodes
   substrings that have named entity equivalents) may be insufficient.
   You may have to use mb_encode_numericentity() instead.
  
  
   The translations performed are:
   
     
      '&amp;' (ampersand) becomes '&amp;amp;'
     
    
    
     
      '&quot;' (double quote) becomes '&amp;quot;' when ENT_NOQUOTES
      is not set.
     
    
    
     
      &quot;'&quot; (single quote) becomes '&amp;#039;' (or &amp;apos;)
      only when ENT_QUOTES is set.
     
    
    
     
      '' (greater than) becomes '&amp;gt;'
     
    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
string

     

      
       The string being converted.
      
     

    
    
     
flags

     

      
       A bitmask of one or more of the following flags, which specify how to handle quotes,
       invalid code unit sequences and the used document type. The default is
       ENT_COMPAT | ENT_HTML401.
       Available flags constants
        
         Constant Name
           </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
          ENT_COMPAT
           Will convert double-quotes and leave single-quotes alone.
          ENT_QUOTES
           Will convert both double and single quotes.
          ENT_NOQUOTES
           Will leave both double and single quotes unconverted.
          ENT_IGNORE
           
            Silently discard invalid code unit sequences instead of returning
            an empty string. Using this flag is discouraged as it
            » may have security implications.
           
          ENT_SUBSTITUTE
           
            Replace invalid code unit sequences with a Unicode Replacement Character
            U+FFFD (UTF-8) or &amp;#FFFD; (otherwise) instead of returning an empty string.
           
          ENT_DISALLOWED
           
            Replace invalid code points for the given document type with a
            Unicode Replacement Character U+FFFD (UTF-8) or &amp;#FFFD;
            (otherwise) instead of leaving them as is. This may be useful, for
            instance, to ensure the well-formedness of XML documents with
            embedded external content.
           
          ENT_HTML401
           
            Handle code as HTML 4.01.
           
          ENT_XML1
           
            Handle code as XML 1.
           
          ENT_XHTML
           
            Handle code as XHTML.
           
          ENT_HTML5
           
            Handle code as HTML 5.
           
          

    
    
     
encoding

     

      
 
  An optional argument defining the encoding used when converting characters.
 

 
  If omitted, the default value of the encoding varies
  depending on the PHP version in use. In PHP 5.6 and later, the
  default_charset configuration
  option is used as the default value. PHP 5.4 and 5.5 will use
  UTF-8 as the default. Earlier versions of PHP use
  ISO-8859-1.
 

 
  Although this argument is technically optional, you are highly encouraged to
  specify the correct value for your code if you are using PHP 5.5 or earlier,
  or if your default_charset
  configuration option may be set incorrectly for the given input.
 

      
       For the purposes of this function, the encodings
       ISO-8859-1, ISO-8859-15,
       UTF-8, cp866,
       cp1251, cp1252, and
       KOI8-R are effectively equivalent, provided the
       string itself is valid for the encoding, as
       the characters affected by) occupy
       the same positions in all of these encodings.
      
      


 The following character sets are supported:
 Supported charsets
  
   Charset
     Aliases
     </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
    ISO-8859-1
     ISO8859-1
     
      Western European, Latin-1.
     
    ISO-8859-5
     ISO8859-5
     
      Little used cyrillic charset (Latin/Cyrillic).
     
    ISO-8859-15
     ISO8859-15
     
      Western European, Latin-9. Adds the Euro sign, French and Finnish
      letters missing in Latin-1 (ISO-8859-1).
     
    UTF-8
      
     
      ASCII compatible multi-byte 8-bit Unicode.
     
    cp866
     ibm866, 866
     
      DOS-specific Cyrillic charset.
     
    cp1251
     Windows-1251, win-1251, 1251
     
      Windows-specific Cyrillic charset.
     
    cp1252
     Windows-1252, 1252
     
      Windows specific charset for Western European.
     
    KOI8-R
     koi8-ru, koi8r
     
      Russian.
     
    BIG5
     950
     
      Traditional Chinese, mainly used in Taiwan.
     
    GB2312
     936
     
      Simplified Chinese, national standard character set.
     
    BIG5-HKSCS
      
     
      Big5 with Hong Kong extensions, Traditional Chinese.
     
    Shift_JIS
     SJIS, SJIS-win, cp932, 932
     
      Japanese
     
    EUC-JP
     EUCJP, eucJP-win
     
      Japanese
     
    MacRoman
      
     
      Charset that was used by Mac OS.
     
    ''
      
     
      An empty string activates detection from script encoding (Zend multibyte),
      default_charset and current
      locale (see nl_langinfo() and
      setlocale()), in this order. Not recommended.
     
    Note: 
  
   Any other character sets are not recognized. The default encoding will be
   used instead and a warning will be emitted.
  
 



     

    
    
     
double_encode

     

      
       When double_encode is turned off PHP will not
       encode existing html entities, the default is to convert everything.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The converted string.
  
  
   If the input string contains an invalid code unit
   sequence within the given encoding an empty string
   will be returned, unless either the ENT_IGNORE or
   ENT_SUBSTITUTE flags are set.
  
 " 
"htmlspecialchars_decode", "
   Convert special HTML entities back to characters
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $string
   [, int $flags = ENT_COMPAT | ENT_HTML401
  ] )


  
   This function is the opposite of htmlspecialchars(). It
   converts special HTML entities back to characters.
  
  
   The converted entities are: &amp;amp;,
   &amp;quot; (when ENT_NOQUOTES is not set),
   &amp;#039; (when ENT_QUOTES is set),
   &amp;lt; and &amp;gt;.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
string

     

      
       The string to decode.
      
     

    
    
     
flags

     

      
       A bitmask of one or more of the following flags, which specify how to handle quotes and
       which document type to use. The default is ENT_COMPAT | ENT_HTML401.
       Available flags constants
        
         Constant Name
           </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
          ENT_COMPAT
           Will convert double-quotes and leave single-quotes alone.
          ENT_QUOTES
           Will convert both double and single quotes.
          ENT_NOQUOTES
           Will leave both double and single quotes unconverted.
          ENT_HTML401
           
            Handle code as HTML 4.01.
           
          ENT_XML1
           
            Handle code as XML 1.
           
          ENT_XHTML
           
            Handle code as XHTML.
           
          ENT_HTML5
           
            Handle code as HTML 5.
           
          

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the decoded string.
  
 " 
"http_build_query", "Generate URL-encoded query string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( mixed $query_data
   [, string $numeric_prefix
   [, string $arg_separator
   [, int $enc_type = PHP_QUERY_RFC1738
  ]]] )

  
   Generates a URL-encoded query string from the associative (or indexed)
   array provided.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
query_data

     

      
       May be an array or object containing properties.
      
      
       If query_data is an array, it may be a simple
       one-dimensional structure, or an array of arrays (which in
       turn may contain other arrays).
      
      
       If query_data is an object, then only public
       properties will be incorporated into the result.
      
     

    
    
     
numeric_prefix

     

      
       If numeric indices are used in the base array and this parameter is
       provided, it will be prepended to the numeric index for elements in
       the base array only.
      
      
       This is meant to allow for legal variable names when the data is
       decoded by PHP or another CGI application later on.
      
     

    
    
     
arg_separator

     

      
       arg_separator.output
       is used to separate arguments, unless this parameter is specified,
       and is then used.
      
     

    
    
     
enc_type

     

      
       By default, PHP_QUERY_RFC1738.
      
      
       If enc_type is
       PHP_QUERY_RFC1738, then encoding is performed per
       » RFC 1738 and the
       application/x-www-form-urlencoded media type, which
       implies that spaces are encoded as plus (+) signs.
      
      
       If enc_type is
       PHP_QUERY_RFC3986, then encoding is performed
       according to » RFC 3986, and
       spaces will be percent encoded (%20).
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a URL-encoded string.
  
 " 
"http_response_code", "Get or Set the HTTP response code
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ([ int $response_code
  ] )

  
  If you pass no parameters thenwill get the current status code.
  If you pass a parameter it will set the response code.
  

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
response_code

     

      
       The optional response_code will set the response code.
      
      
       
        




        

       
      
     

       
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The current response code. By default the return value is int(200).
  
 " 
"hypot", "
   Calculate the length of the NAMEenuse of a right-angle triangle
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   float    ( float $x
   , float $y
   )

  
  ) returns the length of the NAMEenuse of a
   right-angle triangle with sides of length x and
   y, or the distance of the point
   (x, y) from the origin.
   This is equivalent to sqrt(x*x + y*y).
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
x

     

      
       Length of first side
      
     

    
    
     
y

     

      
       Length of second side
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Calculated length of the NAMEenuse
  
 " 
"iconv", "Convert string to requested character encoding
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $in_charset
   , string $out_charset
   , string $str
   )

  
   Performs a character set conversion on the string
   str from in_charset
   to out_charset.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
in_charset

     

      
       The input charset.
      
     

    
    
     
out_charset

     

      
       The output charset.
      
      
       If you append the string //TRANSLIT to
       out_charset transliteration is activated. This
       means that when a character can't be represented in the target charset,
       it can be approximated through one or several similarly looking
       characters. If you append the string //IGNORE,
       characters that cannot be represented in the target charset are silently
       discarded. Otherwise, E_NOTICE is generated and the function
       will return FALSE.
      
     

    
    
     
str

     

      
       The string to be converted.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the converted string or FALSE on failure.
  
 " 
"iconv_get_encoding", "Retrieve internal configuration variables of iconv extension
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ([ string $type = &quot;all&quot;
  ] )

  
   Retrieve internal configuration variables of iconv extension.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
type

     

      
       The value of the optional type can be:
       all
        input_encoding
        output_encoding
        internal_encoding
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the current value of the internal configuration variable if
   successful or FALSE on failure.
  
  
   If type is omitted or set to &quot;all&quot;,
  ) returns an array that
   stores all these variables.
  
 " 
"iconv_mime_decode", "Decodes a MIME header field
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $encoded_header
   [, int $mode = 0
   [, string $charset = ini_get(&quot;iconv.internal_encoding&quot;)
  ]] )

  
   Decodes a MIME header field.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
encoded_header

     

      
       The encoded header, as a string.
      
     

    
    
     
mode

     

      
       mode determines the behaviour in the event
      ) encounters a malformed
       MIME header field. You can specify any combination
       of the following bitmasks.
       Bitmasks acceptable to)
        
         Value
           Constant
           </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
          1
           ICONV_MIME_DECODE_STRICT
           
            If set, the given header is decoded in full conformance with the
            standards defined in » RFC2047.
            This option is disabled by default because there are a lot of
            broken mail user agents that don't follow the specification and don't
            produce correct MIME headers.
           
          2
           ICONV_MIME_DECODE_CONTINUE_ON_ERROR
           
            If set, NAME_headers()
            attempts to ignore any grammatical errors and continue to process
            a given header.
           
          

    
    
     
charset

     

      
       The optional charset parameter specifies the
       character set to represent the result by. If omitted,
       iconv.internal_encoding
       will be used.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a decoded MIME field on success,
   or FALSE if an error occurs during the decoding.
  
 " 
"iconv_mime_decode_headers", "Decodes multiple MIME header fields at once
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $encoded_headers
   [, int $mode = 0
   [, string $charset = ini_get(&quot;iconv.internal_encoding&quot;)
  ]] )

  
   Decodes multiple MIME header fields at once.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
encoded_headers

     

      
       The encoded headers, as a string.
      
     

    
    
     
mode

     

      
       mode determines the behaviour in the event
      ) encounters a malformed
       MIME header field. You can specify any combination
       of the following bitmasks.
       Bitmasks acceptable to)
        
         Value
           Constant
           </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
          1
           ICONV_MIME_DECODE_STRICT
           
            If set, the given header is decoded in full conformance with the
            standards defined in » RFC2047.
            This option is disabled by default because there are a lot of
            broken mail user agents that don't follow the specification and don't
            produce correct MIME headers.
           
          2
           ICONV_MIME_DECODE_CONTINUE_ON_ERROR
           
            If set,)
            attempts to ignore any grammatical errors and continue to process
            a given header.
           
          

    
    
     
charset

     

      
       The optional charset parameter specifies the
       character set to represent the result by. If omitted,
       iconv.internal_encoding
       will be used.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an associative array that holds a whole set of
   MIME header fields specified by
   encoded_headers on success, or FALSE
   if an error occurs during the decoding.
  
  
   Each key of the return value represents an individual
   field name and the corresponding element represents a field value.
   If more than one field of the same name are present,
  ) automatically incorporates
   them into a numerically indexed array in the order of occurrence.
  
 " 
"iconv_mime_encode", "Composes a MIME header field
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $field_name
   , string $field_value
   [, array $preferences = NULL
  ] )

  
   Composes and returns a string that represents a valid MIME
   header field, which looks like the following:
   

Subject: =?ISO-8859-1?Q?Pr=FCfung_f=FCr?= Entwerfen von einer MIME kopfzeile

   
   In the above example, &quot;Subject&quot; is the field name and the portion that
   begins with &quot;=?ISO-8859-1?...&quot; is the field value.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
field_name

     

      
       The field name.
      
     

    
    
     
field_value

     

      
       The field value.
      
     

    
    
     
preferences

     

      
       You can control the behaviour of)
       by specifying an associative array that contains configuration items
       to the optional third parameter preferences.
       The items supported by) are
       listed below. Note that item names are treated case-sensitive.
       Configuration items supported by)
        
         Item
           Type
           </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
           Default value
           Example
          scheme
           string
           
            Specifies the method to encode a field value by. The value of
            this item may be either &quot;B&quot; or &quot;Q&quot;, where &quot;B&quot; stands for
            base64 encoding scheme and &quot;Q&quot; stands for
            quoted-printable encoding scheme.
           
           B
           B
          input-charset
           string
           
            Specifies the character set in which the first parameter
            field_name and the second parameter
            field_value are presented. If not given,
           ) assumes those parameters
            are presented to it in the
            iconv.internal_encoding
            ini setting.
           
           
            iconv.internal_encoding
           
           ISO-8859-1
          output-charset
           string
           
            Specifies the character set to use to compose the
            MIME header.
           
           
            iconv.internal_encoding
           
           UTF-8
          line-length
           integer
           
            Specifies the maximum length of the header lines. The resulting
            header is &quot;folded&quot; to a set of multiple lines in case
            the resulting header field would be longer than the value of this
            parameter, according to
            » RFC2822 - Internet Message Format.
            If not given, the length will be limited to 76 characters.
           
           76
           996
          line-break-chars
           string
           
            Specifies the sequence of characters to append to each line
            as an end-of-line sign when &quot;folding&quot; is performed on a long header
            field. If not given, this defaults to &quot;\r\n&quot;
            (CR LF). Note that
            this parameter is always treated as an ASCII string regardless
            of the value of input-charset.
           
           \r\n
           \n
          

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an encoded MIME field on success,
   or FALSE if an error occurs during the encoding.
  
 " 
"iconv_set_encoding", "Set current setting for character encoding conversion
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $type
   , string $charset
   )

  
   Changes the value of the internal configuration variable specified by
   type to charset.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
type

     

      
       The value of type can be any one of these:
       input_encoding
        output_encoding
        internal_encoding
       

    
    
     
charset

     

      
       The character set.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"iconv_strlen", "Returns the character count of string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $str
   [, string $charset = ini_get(&quot;iconv.internal_encoding&quot;)
  ] )

  
   In contrast to strlen(),
  ) counts the occurrences of characters
   in the given byte sequence str on the basis of
   the specified character set, the result of which is not necessarily
   identical to the length of the string in byte.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The string.
      
     

    
    
     
charset

     

      
       If charset parameter is omitted,
       str is assumed to be encoded in
       iconv.internal_encoding.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the character count of str, as an integer.
  
 " 
"iconv_strpos", "Finds position of first occurrence of a needle within a haystack
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $haystack
   , string $needle
   [, int $offset = 0
   [, string $charset = ini_get(&quot;iconv.internal_encoding&quot;)
  ]] )

  
   Finds position of first occurrence of a needle
   within a haystack.
  
  
   In contrast to strpos(), the return value of
  ) is the number of characters that
   appear before the needle, rather than the offset in bytes to the
   position where the needle has been found. The characters are counted
   on the basis of the specified character set charset.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
haystack

     

      
       The entire string.
      
     

    
    
     
needle

     

      
       The searched substring.
      
     

    
    
     
offset

     

      
       The optional offset parameter specifies
       the position from which the search should be performed.
      
     

    
    
     
charset

     

      
       If charset parameter is omitted,
       string are assumed to be encoded in
       iconv.internal_encoding.
      
     

    
   
   If haystack or needle is
   not a string, it is converted to a string and applied as the ordinal
   value of a character.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the numeric position of the first occurrence of
   needle in haystack.
  
  
   If needle is not found,
  ) will return FALSE.
  
  WarningThis function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function.
 " 
"iconv_strrpos", "Finds the last occurrence of a needle within a haystack
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $haystack
   , string $needle
   [, string $charset = ini_get(&quot;iconv.internal_encoding&quot;)
  ] )

  
   Finds the last occurrence of a needle
   within a haystack.
  
  
   In contrast to strrpos(), the return value of
  ) is the number of characters that
   appear before the needle, rather than the offset in bytes to the
   position where the needle has been found. The characters are counted
   on the basis of the specified character set charset.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
haystack

     

      
       The entire string.
      
     

    
    
     
needle

     

      
       The searched substring.
      
     

    
    
     
charset

     

      
       If charset parameter is omitted,
       string are assumed to be encoded in
       iconv.internal_encoding.
      
     

    
   
   If haystack or needle is
   not a string, it is converted to a string and applied as the ordinal
   value of a character.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the numeric position of the last occurrence of
   needle in haystack.
  
  
   If needle is not found,
  ) will return FALSE.
  
  WarningThis function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function.
 " 
"iconv_substr", "Cut out part of a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   , int $offset
   [, int $length = iconv_strlen($str, $charset)
   [, string $charset = ini_get(&quot;iconv.internal_encoding&quot;)
  ]] )

  
   Cuts a portion of str specified by the 
   offset and length parameters.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The original string.
      
     

    
    
     
offset

     

      
       If offset is non-negative,
      ) cuts the portion out of
       str beginning at offset'th
       character, counting from zero.
      
      
       If offset is negative,
      ) cuts out the portion beginning
       at the position, offset characters
       away from the end of str.
      
     

    
    
     
length

     

      
       If length is given and is positive, the return
       value will contain at most length characters
       of the portion that begins at offset
       (depending on the length of string).
      
      
       If negative length is passed,
      ) cuts the portion out of
       str from the offset'th
       character up to the character that is
       length characters away from the end of the string.
       In case offset is also negative, the start position
       is calculated beforehand according to the rule explained above.
      
     

    
    
     
charset

     

      
       If charset parameter is omitted,
       string are assumed to be encoded in
       iconv.internal_encoding.
      
      
       Note that offset and length
       parameters are always deemed to represent offsets that are
       calculated on the basis of the character set determined by
       charset, whilst the counterpart
       substr() always takes these for byte offsets.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the portion of str specified by the
   offset and length parameters.
  
  
   If str is shorter than offset
   characters long, FALSE will be returned.
  
 " 
"idate", "Format a local time/date as integer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $format
   [, int $timestamp = time()
  ] )

  
   Returns a number formatted according to the given format string using the
   given integer timestamp or the current local time
   if no timestamp is given. In other words, timestamp
   is optional and defaults to the value of time().
  
  
   Unlike the function date(),)
   accepts just one char in the format parameter.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
format

     

      
       The following characters are recognized in the
        format parameter string
        
         format character
           </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
          B
           Swatch Beat/Internet Time
          d
           Day of the month
          h
           Hour (12 hour format)
          H
           Hour (24 hour format)
          i
           Minutes
          I (uppercase i)
           returns 1 if DST is activated,
            0 otherwise
          L (uppercase l)
           returns 1 for leap year,
            0 otherwise
          m
           Month number
          s
           Seconds
          t
           Days in current month
          U
           Seconds since the Unix Epoch - January 1 1970 00:00:00 UTC -
            this is the same as time()
          w
           Day of the week (0 on Sunday)
          W
           ISO-8601 week number of year, weeks starting on
            Monday
          y
           Year (1 or 2 digits - check note below)
          Y
           Year (4 digits)
          z
           Day of the year
          Z
           Timezone offset in seconds
          

    
    
    

timestamp


The optional timestamp parameter is an
integer Unix timestamp that defaults to the current
local time if a timestamp is not given. In other
words, it defaults to the value of time().


      
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an integer.
  
  
   As) always returns an integer and
   as they can't start with a &quot;0&quot;,) may return
   fewer digits than you would expect. See the example below.
  
 " 
"idn_to_ascii", "Convert domain name to IDNA ASCII form.
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Procedural style
  
   string    ( string $domain
   [, int $options = 0
   [, int $variant = INTL_IDNA_VARIANT_2003
   [, array &amp;$idna_info
  ]]] )

  
   This function converts Unicode domain name to IDNA ASCII-compatible format.  
   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
domain

     

      
       Domain to convert. In PHP 5 must be UTF-8 encoded.
      
     

    
    
     
options

     

      
       Conversion options - combination of IDNA_* constants
       (except IDNA_ERROR_* constants).
      
     

    
    
     
variant

     

      
       Either INTL_IDNA_VARIANT_2003 for IDNA 2003 or
       INTL_IDNA_VARIANT_UTS46 for UTS #46.
      
     

    
    
     
idna_info

     

      
       This parameter can be used only if
       INTL_IDNA_VARIANT_UTS46 was used for
       variant. In that case, it will be filled with an
       array with the keys 'result', the possibly illegal
       result of the transformation,
       'isTransitionalDifferent', a boolean indicating
       whether the usage of the transitional mechanisms of UTS #46 either has
       or would have changed the result and 'errors',
       which is an int representing a bitset of the error
       constants IDNA_ERROR_*.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Domain name encoded in ASCII-compatible form.  or FALSE on failure
  
 " 
"idn_to_utf8", "Convert domain name from IDNA ASCII to Unicode.
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Procedural style
  
   string    ( string $domain
   [, int $options = 0
   [, int $variant = INTL_IDNA_VARIANT_2003
   [, array &amp;$idna_info
  ]]] )

  
   This function converts Unicode domain name from IDNA ASCII-compatible format to plain Unicode, encoded in UTF-8.
   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
domain

     

      
       Domain to convert in IDNA ASCII-compatible format.
      
     

    
    
     
options

     

      
       Conversion options - combination of IDNA_* constants
       (except IDNA_ERROR_* constants).
      
     

    
    
     
variant

     

      
       Either INTL_IDNA_VARIANT_2003 for IDNA 2003 or
       INTL_IDNA_VARIANT_UTS46 for UTS #46.
      
     

    
    
     
idna_info

     

      
       This parameter can be used only if
       INTL_IDNA_VARIANT_UTS46 was used for
       variant. In that case, it will be filled with an
       array with the keys 'result', the possibly illegal
       result of the transformation,
       'isTransitionalDifferent', a boolean indicating
       whether the usage of the transitional mechanisms of UTS #46 either has
       or would have changed the result and 'errors',
       which is an int representing a bitset of the error
       constants IDNA_ERROR_*.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Domain name in Unicode, encoded in UTF-8.  or FALSE on failure
  
 " 
"ignore_user_abort", "Set whether a client disconnect should abort script execution
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ([ bool $value
  ] )

  
   Sets whether a client disconnect should cause a script to be aborted.
  
  
   When running PHP as a command line script, and the script's tty goes
   away without the script being terminated then the script will die the
   next time it tries to write anything, unless
   value is set to TRUE
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
value

     

      
       If set, this function will set theini setting
       to the given value. If not, this function will
       only return the previous setting without changing it.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the previous setting, as an integer.
  
 " 
"image2wbmp", "Output image to browser or file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   [, string $filename
   [, int $threshold
  ]] )

  
  ) outputs or save a WBMP
   version of the given image. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
filename

     

      
       Path to the saved file. If not given, the raw image stream will be
       output directly.
      
     

    
    
     
threshold

     

      
       Threshold value, between 0 and 255 (inclusive).
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"image_type_to_extension", "Get file extension for image type
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( int $imagetype
   [, bool $include_dot = TRUE
  ] )

  
   Returns the extension for the given IMAGETYPE_XXX
   constant.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
imagetype

     

      
       One of the IMAGETYPE_XXX constant.
      
     

    
    
     
include_dot

     

      
       Whether to prepend a dot to the extension or not. Default to TRUE.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   A string with the extension corresponding to the given image type.
  
 " 
"image_type_to_mime_type", "Get Mime-Type for image-type returned by getimagesize,
   exif_read_data, exif_thumbnail, exif_imagetype
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( int $imagetype
   )

  
   The) function will determine
   the Mime-Type for an IMAGETYPE constant.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
imagetype

     

      
       One of the IMAGETYPE_XXX constants.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The returned values are as follows
   Returned values Constants
    
     imagetype
       Returned value
      IMAGETYPE_GIF
       image/gif
      IMAGETYPE_JPEG
       image/jpeg
      IMAGETYPE_PNG
       image<BR>ng
      IMAGETYPE_SWF
       application/x-shockwave-flash
      IMAGETYPE_PSD
       image<BR>sd
      IMAGETYPE_BMP
       image/bmp
      IMAGETYPE_TIFF_II (intel byte order)
       image/tiff
      
        IMAGETYPE_TIFF_MM (motorola byte order)
       
       image/tiff
      IMAGETYPE_JPC
       application/octet-stream
      IMAGETYPE_JP2
       image/jp2
      IMAGETYPE_JPX
       application/octet-stream
      IMAGETYPE_JB2
       application/octet-stream
      IMAGETYPE_SWC
       application/x-shockwave-flash
      IMAGETYPE_IFF
       image/iff
      IMAGETYPE_WBMP
       image/vnd.wap.wbmp
      IMAGETYPE_XBM
       image/xbm
      IMAGETYPE_ICO
       image/vnd.microsoft.icon
      " 
"imageaffine", "Return an image containing the affine transformed src image, using an optional clipping area
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( resource $image
   , array $affine
   [, array $clip
  ] )

  

  

  WarningThis function is
currently not documented; only its argument list is available.


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

   
    
affine

    

     
      Array with keys 0 to 5.
     
    

   
   
    
clip

    

     
      Array with keys &quot;x&quot;, &quot;y&quot;, &quot;width&quot; and &quot;height&quot;.
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Return affined image resource on success or FALSE on failure.
  
 " 
"imageaffinematrixconcat", "Concat two matrices (as in doing many ops in one go)
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( array $m1
   , array $m2
   )

  

  

  WarningThis function is
currently not documented; only its argument list is available.


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
m1

    

     
      Array with keys 0 to 5.
     
    

   
   
    
m2

    

     
      Array with keys 0 to 5.
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Array with keys 0 to 5 and float values or FALSE on failure.
  
 " 
"imageaffinematrixget", "Return an image containing the affine tramsformed src image, using an optional clipping area
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( int $type
   [, mixed $options
  ] )

  

  

  WarningThis function is
currently not documented; only its argument list is available.


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
type

    

     
      One of IMG_AFFINE_* constants.
     
    

   
   
    
options

    

     
      
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Array with keys 0 to 5 and float values or FALSE on failure.
  
 " 
"imagealphablending", "Set the blending mode for an image
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , bool $blendmode
   )

  
  ) allows for two different
   modes of drawing on truecolor images. In blending mode, the
   alpha channel component of the color supplied to all drawing function,
   such as imagesetpixel() determines how much of the
   underlying color should be allowed to shine through.  As a result, gd
   automatically blends the existing color at that point with the drawing color,
   and stores the result in the image.  The resulting pixel is opaque.  In
   non-blending mode, the drawing color is copied literally with its alpha channel
   information, replacing the destination pixel.  Blending mode is not available
   when drawing on palette images.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
blendmode

     

      
       Whether to enable the blending mode or not. On true color images 
       the default value is TRUE otherwise the default value is FALSE
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imageantialias", "Should antialias functions be used or not
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , bool $enabled
   )

  
   Activate the fast drawing antialiased methods for lines and wired polygons.
   It does not support alpha components. It works using a direct blend
   operation. It works only with truecolor images.
  
  
   Thickness and styled are not supported.
  
  
   Using antialiased primitives with transparent background color can end with
   some unexpected results. The blend method uses the background color as any
   other colors. The lack of alpha component support does not allow an alpha
   based antialiasing method.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
enabled

     

      
       Whether to enable antialiasing or not.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagearc", "Draws an arc
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , int $cx
   , int $cy
   , int $width
   , int $height
   , int $start
   , int $end
   , int $color
   )

  
  ) draws an arc of circle centered at the given
   coordinates.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
cx

     

      
       x-coordinate of the center.
      
     

    
    
     
cy

     

      
       y-coordinate of the center.
      
     

    
    
     
width

     

      
       The arc width.
      
     

    
    
     
height

     

      
       The arc height.
      
     

    
    
     
start

     

      
       The arc start angle, in degrees.
      
     

    
    
     
end

     

      
       The arc end angle, in degrees.
       0° is located at the three-o'clock position, and the arc is drawn
       clockwise.
      
     

    
    
     
color

     

      
       A color identifier created with 
       imagecolorallocate().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagechar", "Draw a character horizontally
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , int $font
   , int $x
   , int $y
   , string $c
   , int $color
   )

  
  ) draws the first character of
   c in the image identified by
   image with its upper-left at
   x,y (top left is 0,
   0) with the color color.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    

font

Can be 1, 2, 3, 4, 5 for built-in
fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your
own font identifiers registered with imageloadfont().


    
     
x

     

      
       x-coordinate of the start.
      
     

    
    
     
y

     

      
       y-coordinate of the start.
      
     

    
    
     
c

     

      
       The character to draw.
      
     

    
    
     
color

     

      
       A color identifier created with 
       imagecolorallocate().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagecharup", "Draw a character vertically
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , int $font
   , int $x
   , int $y
   , string $c
   , int $color
   )

  
   Draws the character c vertically at the specified
   coordinate on the given image.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    

font

Can be 1, 2, 3, 4, 5 for built-in
fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your
own font identifiers registered with imageloadfont().


    
     
x

     

      
       x-coordinate of the start.
      
     

    
    
     
y

     

      
       y-coordinate of the start.
      
     

    
    
     
c

     

      
       The character to draw.
      
     

    
    
     
color

     

      
       A color identifier created with 
       imagecolorallocate().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagecolorallocate", "Allocate a color for an image
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $image
   , int $red
   , int $green
   , int $blue
   )

  
   Returns a color identifier representing the color composed of the given
   RGB components.
  
  
  ) must be called
   to create each color that is to be used in the image represented
   by image.
  
  Note: 
   
    The first call to) fills
    the background color in palette-based images - images created using
    imagecreate().
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
red

     

      Value of red component.
     

    
    
     
green

     

      Value of green component.
     

    
    
     
blue

     

      Value of blue component.
     

    
   

   These parameters are integers between 0 and 255 or hexadecimals between 
   0x00 and 0xFF.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   A color identifier or FALSE if the allocation failed.
  
  WarningThis function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function.
 " 
"imagecolorallocatealpha", "Allocate a color for an image
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $image
   , int $red
   , int $green
   , int $blue
   , int $alpha
   )

  
  ) behaves identically to
   imagecolorallocate() with the addition of the transparency
   parameter alpha.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
red

     

      Value of red component.
     

    
    
     
green

     

      Value of green component.
     

    
    
     
blue

     

      Value of blue component.
     

    
    
     
alpha

     

      
       A value between 0 and 127.
       0 indicates completely opaque while 
       127 indicates completely transparent.
      
     

    
   

   The red, green
   and blue parameters are integers
   between 0 and 255 or hexadecimals between 0x00 and 0xFF.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   A color identifier or FALSE if the allocation failed.
  
  WarningThis function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function.
 " 
"imagecolorat", "Get the index of the color of a pixel
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $image
   , int $x
   , int $y
   )

  
   Returns the index of the color of the pixel at the
   specified location in the image specified by image.
  
  
   If PHP is compiled against GD library 2.0 or higher and the image is a
   truecolor image, this function returns the RGB value of that pixel as
   integer. Use bitshifting and masking to access the distinct red, green and blue
   component values:
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
x

     

      
       x-coordinate of the point.
      
     

    
    
     
y

     

      
       y-coordinate of the point.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the index of the color.
  
 " 
"imagecolorclosest", "Get the index of the closest color to the specified color
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $image
   , int $red
   , int $green
   , int $blue
   )

  
   Returns the index of the color in the palette of the image which
   is &quot;closest&quot; to the specified RGB value.
  
  
   The &quot;distance&quot; between the desired color and each color in the
   palette is calculated as if the RGB values
   represented points in three-dimensional space.
  
  If you created the image from a file, only colors used in the image are resolved. Colors present only in the palette are not resolved.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
red

     

      Value of red component.
     

    
    
     
green

     

      Value of green component.
     

    
    
     
blue

     

      Value of blue component.
     

    
   

   The colors parameters are integers between 0 and 255 or hexadecimals
   between 0x00 and 0xFF.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the index of the closest color, in the palette of the image, to
   the specified one
  
 " 
"imagecolorclosestalpha", "Get the index of the closest color to the specified color + alpha
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $image
   , int $red
   , int $green
   , int $blue
   , int $alpha
   )

  
   Returns the index of the color in the palette of the image which
   is &quot;closest&quot; to the specified RGB value and 
   alpha level.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
red

     

      Value of red component.
     

    
    
     
green

     

      Value of green component.
     

    
    
     
blue

     

      Value of blue component.
     

    
    
     
alpha

     

      
       A value between 0 and 127.
       0 indicates completely opaque while 
       127 indicates completely transparent.
      
     

    
   

   The colors parameters are integers between 0 and 255 or hexadecimals
   between 0x00 and 0xFF.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the index of the closest color in the palette.
  
 " 
"imagecolorclosesthwb", "Get the index of the color which has the hue, white and blackness
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $image
   , int $red
   , int $green
   , int $blue
   )

  
   Get the index of the color which has the hue, 
   white and blackness nearest the given color.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
red

     

      Value of red component.
     

    
    
     
green

     

      Value of green component.
     

    
    
     
blue

     

      Value of blue component.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an integer with the index of the color which has 
   the hue, white and blackness nearest the given color.
  
 " 
"imagecolordeallocate", "De-allocate a color for an image
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , int $color
   )

  
   De-allocates a color previously allocated with 
   imagecolorallocate() or
   imagecolorallocatealpha().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
color

     

      
       The color identifier.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagecolorexact", "Get the index of the specified color
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $image
   , int $red
   , int $green
   , int $blue
   )

  
   Returns the index of the specified color in the palette of the
   image.
  
  If you created the image from a file, only colors used in the image are resolved. Colors present only in the palette are not resolved.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
red

     

      Value of red component.
     

    
    
     
green

     

      Value of green component.
     

    
    
     
blue

     

      Value of blue component.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the index of the specified color in the palette, or -1 if the
   color does not exist.
  
 " 
"imagecolorexactalpha", "Get the index of the specified color + alpha
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $image
   , int $red
   , int $green
   , int $blue
   , int $alpha
   )

  
   Returns the index of the specified color+alpha in the palette of the
   image.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
red

     

      Value of red component.
     

    
    
     
green

     

      Value of green component.
     

    
    
     
blue

     

      Value of blue component.
     

    
    
     
alpha

     

      
       A value between 0 and 127.
       0 indicates completely opaque while 
       127 indicates completely transparent.
      
     

    
   

   The colors parameters are integers between 0 and 255 or hexadecimals
   between 0x00 and 0xFF.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the index of the specified color+alpha in the palette of the
   image, or -1 if the color does not exist in the image's palette.
  
 " 
"imagecolormatch", "Makes the colors of the palette version of an image more closely match the true color version
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image1
   , resource $image2
   )

  
   Makes the colors of the palette version of an image more closely match the true color version.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
image1

     

      
       A truecolor image link resource.
      
     

    
    
     
image2

     

      
       A palette image link resource pointing to an image that has the same
       size as image1.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagecolorresolve", "Get the index of the specified color or its closest possible alternative
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $image
   , int $red
   , int $green
   , int $blue
   )

  
   This function is guaranteed to return a color index for a
   requested color, either the exact color or the closest possible
   alternative.
  
  If you created the image from a file, only colors used in the image are resolved. Colors present only in the palette are not resolved.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
red

     

      Value of red component.
     

    
    
     
green

     

      Value of green component.
     

    
    
     
blue

     

      Value of blue component.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a color index.
  
 " 
"imagecolorresolvealpha", "Get the index of the specified color + alpha or its closest possible alternative
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $image
   , int $red
   , int $green
   , int $blue
   , int $alpha
   )

  
   This function is guaranteed to return a color index for a
   requested color, either the exact color or the closest possible
   alternative.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
red

     

      Value of red component.
     

    
    
     
green

     

      Value of green component.
     

    
    
     
blue

     

      Value of blue component.
     

    
    
     
alpha

     

      
       A value between 0 and 127.
       0 indicates completely opaque while 
       127 indicates completely transparent.
      
     

    
   

   The colors parameters are integers between 0 and 255 or hexadecimals
   between 0x00 and 0xFF.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a color index.
  
 " 
"imagecolorset", "Set the color for the specified palette index
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( resource $image
   , int $index
   , int $red
   , int $green
   , int $blue
   [, int $alpha = 0
  ] )

  
   This sets the specified index in the palette to the specified
   color. This is useful for creating flood-fill-like effects in
   palleted images without the overhead of performing the actual
   flood-fill.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
index

     

      
       An index in the palette.
      
     

    
    
     
red

     

      Value of red component.
     

    
    
     
green

     

      Value of green component.
     

    
    
     
blue

     

      Value of blue component.
     

    
    
     
alpha

     

      
       Value of alpha component.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"imagecolorsforindex", "Get the colors for an index
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $image
   , int $index
   )

  
   Gets the color for a specified index.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
index

     

      
       The color index.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an associative array with red, green, blue and alpha keys that
   contain the appropriate values for the specified color index.
  
 " 
"imagecolorstotal", "Find out the number of colors in an image's palette
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $image
   )

  
   Returns the number of colors in an image palette.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
image

     

      
       An image resource, returned by one of the image creation functions, such
       as imagecreatefromgif().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the number of colors in the specified image's palette or 0 for
   truecolor images.
  
 " 
"imagecolortransparent", "Define a color as transparent
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $image
   [, int $color
  ] )

  
   Sets the transparent color in the given image.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
color

     

      
       A color identifier created with 
       imagecolorallocate().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The identifier of the new (or current, if none is specified)
   transparent color is returned. If color
   is not specified, and the image has no transparent color, the
   returned identifier will be -1.
  
 " 
"imageconvolution", "Apply a 3x3 convolution matrix, using coefficient and offset
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , array $matrix
   , float $div
   , float $offset
   )

  
   Applies a convolution matrix on the image, using the given coefficient and
   offset.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
matrix

     

      
       A 3x3 matrix: an array of three arrays of three floats.
      
     

    
    
     
div

     

      
       The divisor of the result of the convolution, used for normalization.
      
     

    
    
     
offset

     

      
       Color offset.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagecopy", "Copy part of an image
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $dst_im
   , resource $src_im
   , int $dst_x
   , int $dst_y
   , int $src_x
   , int $src_y
   , int $src_w
   , int $src_h
   )

  
   Copy a part of src_im onto
   dst_im starting at the x,y coordinates
   src_x, src_y  with
   a width of src_w and a height of
   src_h.  The portion defined will be copied
   onto the x,y coordinates, dst_x and
   dst_y.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
dst_im

     

      Destination image link resource.
     

    
    
     
src_im

     

      Source image link resource.
     

    
    
     
dst_x

     

      
       x-coordinate of destination point.
      
     

    
    
     
dst_y

     

      
       y-coordinate of destination point.
      
     

    
    
     
src_x

     

      
       x-coordinate of source point.
      
     

    
    
     
src_y

     

      
       y-coordinate of source point.
      
     

    
    
     
src_w

     

      Source width.
     

    
    
     
src_h

     

      Source height.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagecopymerge", "Copy and merge part of an image
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $dst_im
   , resource $src_im
   , int $dst_x
   , int $dst_y
   , int $src_x
   , int $src_y
   , int $src_w
   , int $src_h
   , int $pct
   )

  
   Copy a part of src_im onto
   dst_im starting at the x,y coordinates
   src_x, src_y  with
   a width of src_w and a height of
   src_h.  The portion defined will be copied
   onto the x,y coordinates, dst_x and
   dst_y.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
dst_im

     

      Destination image link resource.
     

    
    
     
src_im

     

      Source image link resource.
     

    
    
     
dst_x

     

      
       x-coordinate of destination point.
      
     

    
    
     
dst_y

     

      
       y-coordinate of destination point.
      
     

    
    
     
src_x

     

      
       x-coordinate of source point.
      
     

    
    
     
src_y

     

      
       y-coordinate of source point.
      
     

    
    
     
src_w

     

      Source width.
     

    
    
     
src_h

     

      Source height.
     

    
    
     
pct

     

      
       The two images will be merged according to pct
       which can range from 0 to 100.  When pct = 0,
       no action is taken, when 100 this function behaves identically
       to imagecopy() for pallete images, except for
       ignoring alpha components, while it implements alpha transparency
       for true colour images.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagecopymergegray", "Copy and merge part of an image with gray scale
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $dst_im
   , resource $src_im
   , int $dst_x
   , int $dst_y
   , int $src_x
   , int $src_y
   , int $src_w
   , int $src_h
   , int $pct
   )

  
  ) copy a part of src_im onto
   dst_im starting at the x,y coordinates
   src_x, src_y  with
   a width of src_w and a height of
   src_h.  The portion defined will be copied
   onto the x,y coordinates, dst_x and
   dst_y.
  
  
   This function is identical to imagecopymerge() except
   that when merging it preserves the hue of the source by converting
   the destination pixels to gray scale before the copy operation.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
dst_im

     

      Destination image link resource.
     

    
    
     
src_im

     

      Source image link resource.
     

    
    
     
dst_x

     

      
       x-coordinate of destination point.
      
     

    
    
     
dst_y

     

      
       y-coordinate of destination point.
      
     

    
    
     
src_x

     

      
       x-coordinate of source point.
      
     

    
    
     
src_y

     

      
       y-coordinate of source point.
      
     

    
    
     
src_w

     

      Source width.
     

    
    
     
src_h

     

      Source height.
     

    
    
     
pct

     

      
        The src_im will be changed to grayscale according 
        to pct where 0 is fully grayscale and 100 is 
        unchanged. When pct = 100 this function behaves 
        identically to imagecopy() for pallete images, except for
        ignoring alpha components, while
        it implements alpha transparency for true colour images.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagecopyresampled", "Copy and resize part of an image with resampling
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $dst_image
   , resource $src_image
   , int $dst_x
   , int $dst_y
   , int $src_x
   , int $src_y
   , int $dst_w
   , int $dst_h
   , int $src_w
   , int $src_h
   )

  
  ) copies a rectangular
   portion of one image to another image, smoothly interpolating pixel
   values so that, in particular, reducing the size of an image still
   retains a great deal of clarity.
  
  
   In other words,) will take a 
   rectangular area from src_image of width 
   src_w and height src_h at 
   position (src_x,src_y) 
   and place it in a rectangular area of dst_image 
   of width dst_w and height dst_h
   at position (dst_x,dst_y).
  
  
   If the source and destination coordinates and width and heights
   differ, appropriate stretching or shrinking of the image fragment
   will be performed. The coordinates refer to the upper left
   corner.  This function can be used to copy regions within the
   same image (if dst_image is the same as
   src_image) but if the regions overlap the
   results will be unpredictable.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
dst_image

     

      Destination image link resource.
     

    
    
     
src_image

     

      Source image link resource.
     

    
    
     
dst_x

     

      
       x-coordinate of destination point.
      
     

    
    
     
dst_y

     

      
       y-coordinate of destination point.
      
     

    
    
     
src_x

     

      
       x-coordinate of source point.
      
     

    
    
     
src_y

     

      
       y-coordinate of source point.
      
     

    
    
     
dst_w

     

      
       Destination width.
      
     

    
    
     
dst_h

     

      
       Destination height.
      
     

    
    
     
src_w

     

      Source width.
     

    
    
     
src_h

     

      Source height.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagecopyresized", "Copy and resize part of an image
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $dst_image
   , resource $src_image
   , int $dst_x
   , int $dst_y
   , int $src_x
   , int $src_y
   , int $dst_w
   , int $dst_h
   , int $src_w
   , int $src_h
   )

  
  ) copies a rectangular
   portion of one image to another image.
   dst_image is the destination image,
   src_image is the source image identifier.
  
  
   In other words,) will take a 
   rectangular area from src_image of width 
   src_w and height src_h at 
   position (src_x,src_y) 
   and place it in a rectangular area of dst_image 
   of width dst_w and height dst_h
   at position (dst_x,dst_y).
  
  
   If the source and destination coordinates and width and heights
   differ, appropriate stretching or shrinking of the image fragment
   will be performed. The coordinates refer to the upper left
   corner. This function can be used to copy regions within the
   same image (if dst_image is the same as
   src_image) but if the regions overlap the
   results will be unpredictable.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
dst_image

     

      Destination image link resource.
     

    
    
     
src_image

     

      Source image link resource.
     

    
    
     
dst_x

     

      
       x-coordinate of destination point.
      
     

    
    
     
dst_y

     

      
       y-coordinate of destination point.
      
     

    
    
     
src_x

     

      
       x-coordinate of source point.
      
     

    
    
     
src_y

     

      
       y-coordinate of source point.
      
     

    
    
     
dst_w

     

      
       Destination width.
      
     

    
    
     
dst_h

     

      
       Destination height.
      
     

    
    
     
src_w

     

      Source width.
     

    
    
     
src_h

     

      Source height.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagecreate", "Create a new palette based image
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( int $width
   , int $height
   )

  
  ) returns an image identifier
   representing a blank image of specified size.
  
  
   In general, we recommend the use of
   NAMEtruecolor() instead of
  ) so that image processing occurs on the
   highest quality image possible. If you want to output a palette image, then
   imagetruecolortopalette() should be called immediately
   before saving the image with imagepng() or
   imagegif().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
width

     

      
       The image width.
      
     

    
    
     
height

     

      
       The image height.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  Returns an image resource identifier on success, FALSE on errors.
 " 
"imagecreatefromgd", "Create a new image from GD file or URL
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( string $filename
   )

  
   Create a new image from GD file or URL.
  
  TipA URL can be used as a
filename with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the
filename. See the Supported Protocols and Wrappers for links to information
about what abilities the various wrappers have, notes on their usage,
and information on any predefined variables they may
provide.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the GD file.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  Returns an image resource identifier on success, FALSE on errors.
 " 
"imagecreatefromgd2", "Create a new image from GD2 file or URL
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( string $filename
   )

  
   Create a new image from GD2 file or URL.
  
  TipA URL can be used as a
filename with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the
filename. See the Supported Protocols and Wrappers for links to information
about what abilities the various wrappers have, notes on their usage,
and information on any predefined variables they may
provide.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the GD2 image.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  Returns an image resource identifier on success, FALSE on errors.
 " 
"imagecreatefromgd2part", "Create a new image from a given part of GD2 file or URL
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( string $filename
   , int $srcX
   , int $srcY
   , int $width
   , int $height
   )

  
   Create a new image from a given part of GD2 file or URL.
  
  TipA URL can be used as a
filename with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the
filename. See the Supported Protocols and Wrappers for links to information
about what abilities the various wrappers have, notes on their usage,
and information on any predefined variables they may
provide.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the GD2 image.
      
     

    
    
     
srcX

     

      
       x-coordinate of source point.
      
     

    
    
     
srcY

     

      
       y-coordinate of source point.
      
     

    
    
     
width

     

      Source width.
     

    
    
     
height

     

      Source height.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  Returns an image resource identifier on success, FALSE on errors.
 " 
"imagecreatefromgif", "Create a new image from file or URL
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( string $filename
   )

  
  ) returns an image identifier
   representing the image obtained from the given filename.
  
  TipA URL can be used as a
filename with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the
filename. See the Supported Protocols and Wrappers for links to information
about what abilities the various wrappers have, notes on their usage,
and information on any predefined variables they may
provide.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the GIF image.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  Returns an image resource identifier on success, FALSE on errors.
 " 
"imagecreatefromjpeg", "Create a new image from file or URL
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( string $filename
   )

  
  ) returns an image identifier
   representing the image obtained from the given filename.
  
  TipA URL can be used as a
filename with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the
filename. See the Supported Protocols and Wrappers for links to information
about what abilities the various wrappers have, notes on their usage,
and information on any predefined variables they may
provide.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the JPEG image.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  Returns an image resource identifier on success, FALSE on errors.
 " 
"imagecreatefrompng", "Create a new image from file or URL
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( string $filename
   )

  
  ) returns an image identifier
   representing the image obtained from the given filename.
  
  TipA URL can be used as a
filename with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the
filename. See the Supported Protocols and Wrappers for links to information
about what abilities the various wrappers have, notes on their usage,
and information on any predefined variables they may
provide.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the PNG image.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  Returns an image resource identifier on success, FALSE on errors.
 " 
"imagecreatefromstring", "Create a new image from the image stream in the string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( string $image
   )

  
  ) returns an image identifier
   representing the image obtained from the given image.
   These types will be automatically detected if your build of PHP supports 
   them: JPEG, PNG, GIF, WBMP, and GD2.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
image

     

      
       A string containing the image data.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   An image resource will be returned on success. FALSE is returned if
   the image type is unsupported, the data is not in a recognised format,
   or the image is corrupt and cannot be loaded.
  
 " 
"imagecreatefromwbmp", "Create a new image from file or URL
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( string $filename
   )

  
  ) returns an image identifier
   representing the image obtained from the given filename.
  
  TipA URL can be used as a
filename with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the
filename. See the Supported Protocols and Wrappers for links to information
about what abilities the various wrappers have, notes on their usage,
and information on any predefined variables they may
provide.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the WBMP image.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  Returns an image resource identifier on success, FALSE on errors.
 " 
"imagecreatefromxbm", "Create a new image from file or URL
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( string $filename
   )

  
  ) returns an image identifier
   representing the image obtained from the given filename.
  
  TipA URL can be used as a
filename with this function if the fopen wrappers have been enabled.
See fopen() for more details on how to specify the
filename. See the Supported Protocols and Wrappers for links to information
about what abilities the various wrappers have, notes on their usage,
and information on any predefined variables they may
provide.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the XBM image.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  Returns an image resource identifier on success, FALSE on errors.
 " 
"imagecreatetruecolor", "Create a new true color image
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( int $width
   , int $height
   )

  
  ) returns an image identifier
   representing a black image of the specified size.
  
  
   Depending on your PHP and GD versions this function is defined or not. With
   PHP 4.0.6 through 4.1.x this function always exists if the GD module is
   loaded, but calling it without GD2 being installed PHP will issue a fatal
   error and exit. With PHP 4.2.x this behaviour is different in issuing a
   warning instead of an error. Other versions only define this function, if
   the correct GD version is installed.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
width

     

      
       Image width.
      
     

    
    
     
height

     

      
       Image height.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  Returns an image resource identifier on success, FALSE on errors.
 " 
"imagecrop", "Crop an image using the given coordinates and size, x, y, width and height
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( resource $image
   , array $rect
   )

  

  

  WarningThis function is
currently not documented; only its argument list is available.


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

   
    
rect

    

     
      Array with keys &quot;x&quot;, &quot;y&quot;, &quot;width&quot; and &quot;height&quot;.
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Return cropped image resource on success or FALSE on failure.
  
 " 
"imagecropauto", "Crop an image automatically using one of the available modes
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( resource $image
   [, int $mode = -1
   [, float $threshold = .5
   [, int $color = -1
  ]]] )

  

  

  WarningThis function is
currently not documented; only its argument list is available.


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

   
    
mode

    

     
      One of IMG_CROP_* constants.
     
    

   
   
    
threshold

    

     
      Used in IMG_CROP_THRESHOLD mode.
     
    

   
   
    
color

    

     
      Used in IMG_CROP_THRESHOLD mode.
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Return cropped image resource on success or FALSE on failure.
  
 " 
"imagedashedline", "Draw a dashed line
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , int $x1
   , int $y1
   , int $x2
   , int $y2
   , int $color
   )

  
   This function is deprecated. Use combination of
   imagesetstyle() and imageline()
   instead.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
x1

     

      
       Upper left x coordinate.
      
     

    
    
     
y1

     

      
       Upper left y coordinate 0, 0 is the top left corner of the image.
      
     

    
    
     
x2

     

      
       Bottom right x coordinate.
      
     

    
    
     
y2

     

      
       Bottom right y coordinate.
      
     

    
    
     
color

     

      
       The fill color. A color identifier created with 
       imagecolorallocate().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Always returns true
  
 " 
"imagedestroy", "Destroy an image
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   )

  
  ) frees any memory associated
   with image image.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imageellipse", "Draw an ellipse
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , int $cx
   , int $cy
   , int $width
   , int $height
   , int $color
   )

  
   Draws an ellipse centered at the specified coordinates.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
cx

     

      
       x-coordinate of the center.
      
     

    
    
     
cy

     

      
       y-coordinate of the center.
      
     

    
    
     
width

     

      
       The ellipse width.
      
     

    
    
     
height

     

      
       The ellipse height.
      
     

    
    
     
color

     

      
       The color of the ellipse. A color identifier created with
       imagecolorallocate().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagefill", "Flood fill
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , int $x
   , int $y
   , int $color
   )

  
   Performs a flood fill starting at the given coordinate (top left is 0, 0)
   with the given color in the
   image.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
x

     

      
       x-coordinate of start point.
      
     

    
    
     
y

     

      
       y-coordinate of start point.
      
     

    
    
     
color

     

      
       The fill color. A color identifier created with 
       imagecolorallocate().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagefilledarc", "Draw a partial arc and fill it
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , int $cx
   , int $cy
   , int $width
   , int $height
   , int $start
   , int $end
   , int $color
   , int $style
   )

  
   Draws a partial arc centered at the specified coordinate in the
   given image.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
cx

     

      
       x-coordinate of the center.
      
     

    
    
     
cy

     

      
       y-coordinate of the center.
      
     

    
    
     
width

     

      
       The arc width.
      
     

    
    
     
height

     

      
       The arc height.
      
     

    
    
     
start

     

      
       The arc start angle, in degrees.
      
     

    
    
     
end

     

      
       The arc end angle, in degrees.
       0° is located at the three-o'clock position, and the arc is drawn
       clockwise.
      
     

    
    
     
color

     

      
       A color identifier created with 
       imagecolorallocate().
      
     

    
    
     
style

     

      
       A bitwise OR of the following possibilities:
       IMG_ARC_PIE
        IMG_ARC_CHORD
        IMG_ARC_NOFILL
        IMG_ARC_EDGED
       IMG_ARC_PIE and IMG_ARC_CHORD are
       mutually exclusive; IMG_ARC_CHORD just
       connects the starting and ending angles with a straight line, while
       IMG_ARC_PIE produces a rounded edge.
       IMG_ARC_NOFILL indicates that the arc
       or chord should be outlined, not filled.  IMG_ARC_EDGED,
       used together with IMG_ARC_NOFILL, indicates that the
       beginning and ending angles should be connected to the center - this is a
       good way to outline (rather than fill) a 'pie slice'.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagefilledellipse", "Draw a filled ellipse
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , int $cx
   , int $cy
   , int $width
   , int $height
   , int $color
   )

  
   Draws an ellipse centered at the specified coordinate on the given
   image.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
cx

     

      
       x-coordinate of the center.
      
     

    
    
     
cy

     

      
       y-coordinate of the center.
      
     

    
    
     
width

     

      
       The ellipse width.
      
     

    
    
     
height

     

      
       The ellipse height.
      
     

    
    
     
color

     

      
       The fill color. A color identifier created with 
       imagecolorallocate().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagefilledpolygon", "Draw a filled polygon
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , array $points
   , int $num_points
   , int $color
   )

  
  ) creates a filled polygon
   in the given image.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
points

     

      
       An array containing the x and y
       coordinates of the polygons vertices consecutively.
      
     

    
    
     
num_points

     

      
       Total number of vertices, which must be at least 3.
      
     

    
    
     
color

     

      
       A color identifier created with 
       imagecolorallocate().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagefilledrectangle", "Draw a filled rectangle
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , int $x1
   , int $y1
   , int $x2
   , int $y2
   , int $color
   )

  
   Creates a rectangle filled with color in the given
   image starting at point 1 and ending at point 2.
   0, 0 is the top left corner of the image.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
x1

     

      
       x-coordinate for point 1.
      
     

    
    
     
y1

     

      
       y-coordinate for point 1.
      
     

    
    
     
x2

     

      
       x-coordinate for point 2.
      
     

    
    
     
y2

     

      
       y-coordinate for point 2.
      
     

    
    
     
color

     

      
       The fill color. A color identifier created with 
       imagecolorallocate().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagefilltoborder", "Flood fill to specific color
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , int $x
   , int $y
   , int $border
   , int $color
   )

  
  ) performs a flood fill
   whose border color is defined by border.
   The starting point for the fill is x,
   y (top left is 0, 0) and the region is
   filled with color color.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
x

     

      
       x-coordinate of start.
      
     

    
    
     
y

     

      
       y-coordinate of start.
      
     

    
    
     
border

     

      
       The border color. A color identifier created with 
       imagecolorallocate().
      
     

    
    
     
color

     

      
       The fill color. A color identifier created with 
       imagecolorallocate().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagefilter", "Applies a filter to an image
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , int $filtertype
   [, int $arg1
   [, int $arg2
   [, int $arg3
   [, int $arg4
  ]]]] )

  
  ) applies the given filter
   filtertype on the image.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
filtertype

     

      
       filtertype can be one of the following:
       
         
          IMG_FILTER_NEGATE: Reverses all colors of
          the image.
         
        
        
         
          IMG_FILTER_GRAYSCALE: Converts the image into
          grayscale.
         
        
        
         
          IMG_FILTER_BRIGHTNESS: Changes the brightness
          of the image. Use arg1 to set the level of
          brightness. The range for the brightness is -255 to 255.
         
        
        
         
          IMG_FILTER_CONTRAST: Changes the contrast of
          the image. Use arg1 to set the level of
          contrast.
         
        
        
         
          IMG_FILTER_COLORIZE: Like
          IMG_FILTER_GRAYSCALE, except you can specify the
          color. Use arg1, arg2 and
          arg3 in the form of
          red, green,
          blue and arg4 for the
          alpha channel. The range for each color is 0 to 255.
         
        
        
         
          IMG_FILTER_EDGEDETECT: Uses edge detection to
          highlight the edges in the image.
         
        
        
         
          IMG_FILTER_EMBOSS: Embosses the image.
         
        
        
         
          IMG_FILTER_GAUSSIAN_BLUR: Blurs the image using
          the Gaussian method.
         
        
        
         
          IMG_FILTER_SELECTIVE_BLUR: Blurs the image.
         
        
        
         
          IMG_FILTER_MEAN_REMOVAL: Uses mean removal to
          achieve a &quot;sketchy&quot; effect.
         
        
        
         
          IMG_FILTER_SMOOTH: Makes the image smoother.
          Use arg1 to set the level of smoothness.
         
        
        
         
          IMG_FILTER_PIXELATE: Applies pixelation effect 
          to the image, use arg1 to set the block size 
          and arg2 to set the pixelation effect mode.
         
        
       

    
    
     
arg1

     

      
       
         
          IMG_FILTER_BRIGHTNESS: Brightness level.
         
        
        
         
          IMG_FILTER_CONTRAST: Contrast level.
         
        
        
         
          IMG_FILTER_COLORIZE: Value of red component.
         
        
        
         
          IMG_FILTER_SMOOTH: Smoothness level.
         
        
        
         
          IMG_FILTER_PIXELATE: Block size in pixels.
         
        
       

    
    
     
arg2

     

      
       
         
          IMG_FILTER_COLORIZE: Value of green component.
         
        
        
         
          IMG_FILTER_PIXELATE: Whether to use advanced pixelation 
          effect or not (defaults to FALSE).
         
        
       

    
    
     
arg3

     

      
       
         
          IMG_FILTER_COLORIZE: Value of blue component.
         
        
       

    
    
     
arg4

     

      
       
         
          IMG_FILTER_COLORIZE: Alpha channel, A value 
          between 0 and 127. 0 indicates completely opaque while 127 indicates 
          completely transparent.
         
        
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imageflip", "Flips an image using a given mode
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , int $mode
   )

  
   Flips the image image using the given
   mode. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
mode

     

      
       Flip mode, this can be one of the IMG_FLIP_* constants:
      
      
       Constant
           Meaning
          IMG_FLIP_HORIZONTAL
           
            Flips the image horizontally.
           
          IMG_FLIP_VERTICAL
           
            Flips the image vertically.
           
          IMG_FLIP_BOTH
           
            Flips the image both horizontally and vertically.
           
          

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagefontheight", "Get font height
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( int $font
   )

  
   Returns the pixel height of a character in the specified font.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

font

Can be 1, 2, 3, 4, 5 for built-in
fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your
own font identifiers registered with imageloadfont().


   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the pixel height of the font.
  
 " 
"imagefontwidth", "Get font width
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( int $font
   )

  
   Returns the pixel width of a character in font.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

font

Can be 1, 2, 3, 4, 5 for built-in
fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your
own font identifiers registered with imageloadfont().


   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the pixel width of the font.
  
 " 
"imageftbbox", "Give the bounding box of a text using fonts via freetype2
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( float $size
   , float $angle
   , string $fontfile
   , string $text
   [, array $extrainfo
  ] )

  
   This function calculates and returns the bounding box in pixels
   for a FreeType text.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
size

     

      The font size. Depending on your version of GD, this should be specified as the pixel size (GD1) or point size (GD2).
     

    
    
     
angle

     

      
       Angle in degrees in which text will be 
       measured.
      
     

    
    
     
fontfile

     

      
       The name of the TrueType font file (can be a URL). Depending on
       which version of the GD library that PHP is using, it may attempt to
       search for files that do not begin with a leading '/' by appending
       '.ttf' to the filename and searching along a library-defined font path.
      
     

    
    
     
text

     

      
       The string to be measured.
      
     

    
    
     
extrainfo

     

      
       Possible array indexes for extrainfo
        
         Key
           Type
           Meaning
          linespacing
           float
           Defines drawing linespacing
          

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns an array with 8
   elements representing four points making the bounding box of the
   text:
   0
       lower left corner, X position
      1
       lower left corner, Y position
      2
       lower right corner, X position
      3
       lower right corner, Y position
      4
       upper right corner, X position
      5
       upper right corner, Y position
      6
       upper left corner, X position
      7
       upper left corner, Y position
      
   The points are relative to the text regardless of the
   angle, so &quot;upper left&quot; means in the top left-hand 
   corner seeing the text horizontally.
  
 " 
"imagefttext", "Write text to the image using fonts using FreeType 2
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $image
   , float $size
   , float $angle
   , int $x
   , int $y
   , int $color
   , string $fontfile
   , string $text
   [, array $extrainfo
  ] )

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
size

     

      
       The font size to use in points.
      
     

    
    
     
angle

     

       
       The angle in degrees, with 0 degrees being left-to-right reading text.
       Higher values represent a counter-clockwise rotation. For example, a 
       value of 90 would result in bottom-to-top reading text.
      
     

    
    
     
x

     

      
       The coordinates given by x and
       y will define the basepoint of the first
       character (roughly the lower-left corner of the character). This
       is different from the imagestring(), where
       x and y define the
       upper-left corner of the first character. For example, &quot;top left&quot;
       is 0, 0.
      
     

    
    
     
y

     

      
       The y-ordinate. This sets the position of the fonts baseline, not the
       very bottom of the character.
      
     

    
    
     
color

     

      
       The index of the desired color for the text, see 
       imagecolorexact().
      
     

    
    
     
fontfile

     

      
       The path to the TrueType font you wish to use.
      
      
       Depending on which version of the GD library PHP is using, when
       fontfile does not begin with a leading
       / then .ttf will be appended
       to the filename and the library will attempt to search for that
       filename along a library-defined font path.
      
      
       When using versions of the GD library lower than 2.0.18, a space character,
       rather than a semicolon, was used as the 'path separator' for different font files.
       Unintentional use of this feature will result in the warning message:
       Warning: Could not find/open font. For these affected versions, the
       only solution is moving the font to a path which does not contain spaces.
      
      
       In many cases where a font resides in the same directory as the script using it
       the following trick will alleviate any include problems.
       




       

      
     

    
    
     
text

     

      
       Text to be inserted into image. 
      
     

    
    
     
extrainfo

     

      
       Possible array indexes for extrainfo
        
         Key
           Type
           Meaning
          linespacing
           float
           Defines drawing linespacing
          

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function returns an array defining the four points of the box, starting in the lower left and moving counter-clockwise:
   0
       lower left x-coordinate
      1
       lower left y-coordinate
      2
       lower right x-coordinate
      3
       lower right y-coordinate
      4
       upper right x-coordinate
      5
       upper right y-coordinate
      6
       upper left x-coordinate
      7
       upper left y-coordinate
      " 
"imagegammacorrect", "Apply a gamma correction to a GD image
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , float $inputgamma
   , float $outputgamma
   )

  
   Applies gamma correction to the given gd image 
   given an input and an output gamma.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
inputgamma

     

      
       The input gamma.
      
     

    
    
     
outputgamma

     

      
       The output gamma.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagegd", "Output GD image to browser or file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   [, string $filename
  ] )

  
   Outputs a GD image to the given filename. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
filename

     

      The path to save the file to. If not set or NULL, the raw image stream will be outputted directly.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagegd2", "Output GD2 image to browser or file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   [, string $filename
   [, int $chunk_size
   [, int $type = IMG_GD2_RAW
  ]]] )

  
   Outputs a GD2 image to the given filename. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
filename

     

      The path to save the file to. If not set or NULL, the raw image stream will be outputted directly.
     

    
    
     
chunk_size

     

      
       Chunk size.
      
     

    
    
     
type

     

      
       Either IMG_GD2_RAW or 
       IMG_GD2_COMPRESSED. Default is 
       IMG_GD2_RAW.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagegif", "Output image to browser or file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   [, string $filename
  ] )

  
  ) creates the GIF
   file in filename from the image image. The
   image argument is the return from the
   imagecreate() or imagecreatefrom*
   function.
  
  
   The image format will be GIF87a unless the
   image has been made transparent with
   imagecolortransparent(), in which case the
   image format will be GIF89a.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
filename

     

      The path to save the file to. If not set or NULL, the raw image stream will be outputted directly.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imageinterlace", "Enable or disable interlace
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $image
   [, int $interlace = 0
  ] )

  
  ) turns the interlace bit on or off.
  
  
   If the interlace bit is set and the image is used as a JPEG image,
   the image is created as a progressive JPEG.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
interlace

     

      
       If non-zero, the image will be interlaced, else the interlace bit is
       turned off.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns 1 if the interlace bit is set for the image, 0 otherwise.
  
 " 
"imageistruecolor", "Finds whether an image is a truecolor image
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   )

  
  ) finds whether the image
   image is a truecolor image.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the image is truecolor, FALSE
   otherwise.
  
 " 
"imagejpeg", "Output image to browser or file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   [, string $filename
   [, int $quality
  ]] )

  
  ) creates a JPEG file from
   the given image.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
filename

     

      The path to save the file to. If not set or NULL, the raw image stream will be outputted directly.
      
       To skip this argument in order to provide the 
       quality parameter, use NULL.
      
     

    
    
     
quality

     

      
       quality is optional, and ranges from 0 (worst
       quality, smaller file) to 100 (best quality, biggest file). The 
       default is the default IJG quality value (about 75).
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagelayereffect", "Set the alpha blending flag to use the bundled libgd layering effects
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , int $effect
   )

  
   Set the alpha blending flag to use the bundled libgd layering effects.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
effect

     

      
       One of the following constants:
       
IMG_EFFECT_REPLACE

         

          
           Use pixel replacement (equivalent of passing TRUE to
           imagealphablending())
          
         

        
        
         
IMG_EFFECT_ALPHABLEND

         

          
           Use normal pixel blending (equivalent of passing FALSE to
           imagealphablending())
          
         

        
        
         
IMG_EFFECT_NORMAL

         

          
           Same as IMG_EFFECT_ALPHABLEND.
          
         

        
        
         
IMG_EFFECT_OVERLAY

         

          
           Overlay has the effect that black background pixels will remain
           black, white background pixels will remain white, but grey
           background pixels will take the colour of the foreground pixel.
          
         

        
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imageline", "Draw a line
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , int $x1
   , int $y1
   , int $x2
   , int $y2
   , int $color
   )

  
   Draws a line between the two given points.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
x1

     

      
       x-coordinate for first point.
      
     

    
    
     
y1

     

      
       y-coordinate for first point.
      
     

    
    
     
x2

     

      
       x-coordinate for second point.
      
     

    
    
     
y2

     

      
       y-coordinate for second point.
      
     

    
    
     
color

     

      
       The line color. A color identifier created with 
       imagecolorallocate().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imageloadfont", "Load a new font
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $file
   )

  
  ) loads a user-defined bitmap and returns
   its identifier.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
file

     

      
       The font file format is currently binary and architecture
       dependent.  This means you should generate the font files on the
       same type of CPU as the machine you are running PHP on.
      
      
       Font file format
        
         byte position
          C data type
          description
         byte 0-3
           int
           number of characters in the font
          byte 4-7
           int
           
            value of first character in the font (often 32 for space)
           
          byte 8-11
           int
           pixel width of each character
          byte 12-15
           int
           pixel height of each character
          byte 16-
           char
           
            array with character data, one byte per pixel in each
            character, for a total of (nchars*width*height) bytes.
           
          

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The font identifier which is always bigger than 5 to avoid conflicts with
   built-in fonts or FALSE on errors.
  
 " 
"imagepalettecopy", "Copy the palette from one image to another
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( resource $destination
   , resource $source
   )

  
  ) copies the palette from the
   source image to the 
   destination image.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
destination

     

      
       The destination image resource.
      
     

    
    
     
source

     

      
       The source image resource.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"imagepalettetotruecolor", "Converts a palette based image to true color
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $src
   )

  
   Converts a palette based image, created by functions like 
   imagecreate() to a true color image, like 
   imagecreatetruecolor().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the convertion was complete, or if the source image already 
   is a true color image, otherwise FALSE is returned.
  
 " 
"imagepng", "Output a PNG image to either the browser or a file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   [, string $filename
   [, int $quality
   [, int $filters
  ]]] )

  
   Outputs or saves a PNG image from the given 
   image.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
filename

     

      The path to save the file to. If not set or NULL, the raw image stream will be outputted directly.
      Note: 
       
        NULL is invalid if the quality and
        filters arguments are not used.
       
      
     

    
    
     
quality

     

      
       Compression level: from 0 (no compression) to 9.
      
     

    
    
     
filters

     

      
       Allows reducing the PNG file size. It is a bitmask field which may be
       set to any combination of the PNG_FILTER_XXX 
       constants. PNG_NO_FILTER or 
       PNG_ALL_FILTERS may also be used to respectively
       disable or activate all filters.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagepolygon", "Draws a polygon
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , array $points
   , int $num_points
   , int $color
   )

  
  ) creates a polygon in the given
   image.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
points

     

      
       An array containing the polygon's vertices, e.g.:
       points[0]
           = x0
          points[1]
           = y0
          points[2]
           = x1
          points[3]
           = y1
          

    
    
     
num_points

     

      
       Total number of points (vertices).
      
     

    
    
     
color

     

      
       A color identifier created with 
       imagecolorallocate().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagerectangle", "Draw a rectangle
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , int $x1
   , int $y1
   , int $x2
   , int $y2
   , int $color
   )

  
  ) creates a rectangle starting at
   the specified coordinates.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
x1

     

      
       Upper left x coordinate.
      
     

    
    
     
y1

     

      
       Upper left y coordinate
       0, 0 is the top left corner of the image.
      
     

    
    
     
x2

     

      
       Bottom right x coordinate.
      
     

    
    
     
y2

     

      
       Bottom right y coordinate.
      
     

    
    
     
color

     

      
       A color identifier created with 
       imagecolorallocate().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagerotate", "Rotate an image with a given angle
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( resource $image
   , float $angle
   , int $bgd_color
   [, int $ignore_transparent = 0
  ] )

  
   Rotates the image image using the given
   angle in degrees. 
  
  
   The center of rotation is the center of the image, and the rotated
   image may have different dimensions than the original image.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
angle

     

      
       Rotation angle, in degrees. The rotation angle is interpreted as the
       number of degrees to rotate the image anticlockwise.
      
     

    
    
     
bgd_color

     

      
       Specifies the color of the uncovered zone after the rotation
      
     

    
    
     
ignore_transparent

     

      
       If set and non-zero, transparent colors are ignored (otherwise kept).
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an image resource for the rotated image,  or FALSE on failure.
  
 " 
"imagesavealpha", "Set the flag to save full alpha channel information (as opposed to single-color transparency) when saving PNG images
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , bool $saveflag
   )

  
  ) sets the flag to attempt to save
   full alpha channel information (as opposed to single-color transparency)
   when saving PNG images.
  
  
   You have to unset alphablending
   (imagealphablending($im, false)), to use it.
  
  
   Alpha channel is not supported by all browsers, if you have problem with
   your browser, try to load your script with an alpha channel compliant
   browser, e.g. latest Mozilla.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
saveflag

     

      
       Whether to save the alpha channel or not. Default to FALSE. 
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagescale", "Scale an image using the given new width and height
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( resource $image
   , int $new_width
   [, int $new_height = -1
   [, int $mode = IMG_BILINEAR_FIXED
  ]] )

  
  ) scales an image using the given
   interpolation algorithm.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

   
    
new_width

    

     
      The width to scale the image to.
     
    

   
   
    
new_height

    

     
      The height to scale the image to. If omitted or negative, the aspect
      ratio will be preserved.
     
     Caution
      
       You should always provide the height if using PHP 5.5.18 or earlier, or
       PHP 5.6.2 or earlier, as the aspect ratio calculation was incorrect.
      
     
    

   
   
    
mode

    

     
      One of IMG_NEAREST_NEIGHBOUR,
      IMG_BILINEAR_FIXED,
      IMG_BICUBIC,
      IMG_BICUBIC_FIXED or anything else (will use two
      pass).
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Return the scaled image resource on success or FALSE on failure.
  
 " 
"imagesetbrush", "Set the brush image for line drawing
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , resource $brush
   )

  
  ) sets the brush image to be
   used by all line drawing functions (such as imageline()
   and imagepolygon()) when drawing with the special
   colors IMG_COLOR_BRUSHED or
   IMG_COLOR_STYLEDBRUSHED.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
brush

     

      
       An image resource.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagesetinterpolation", "Set the interpolation method
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   [, int $method = IMG_BILINEAR_FIXED
  ] )

  
   Sets the interpolation method, setting an interpolation method affects the rendering 
   of various functions in GD, such as the imagerotate() function.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
method

     

      
       The interpolation method, which can be one of the following:
       
         
          IMG_BELL: Bell filter.
         
        
        
         
          IMG_BESSEL: Bessel filter.
         
        
        
         
          IMG_BICUBIC: Bicubic interpolation.
         
        
        
         
          IMG_BICUBIC_FIXED: Fixed point implementation of the bicubic interpolation.
         
        
        
         
          IMG_BILINEAR_FIXED: Fixed point implementation of the  bilinear interpolation (default (also on image creation)).
         
        
        
         
          IMG_BLACKMAN: Blackman window function.
         
        
        
         
          IMG_BOX: Box blur filter.
         
        
        
         
          IMG_BSPLINE: Spline interpolation.
         
        
        
         
          IMG_CATMULLROM: Cubic Hermite spline interpolation.
         
        
        
         
          IMG_GAUSSIAN: Gaussian function.
         
        
        
         
          IMG_GENERALIZED_CUBIC: Generalized cubic spline fractal interpolation.
         
        
        
         
          IMG_HERMITE: Hermite interpolation.
         
        
        
         
          IMG_HAMMING: Hamming filter.
         
        
        
         
          IMG_HANNING: Hanning filter.
         
        
        
         
          IMG_MITCHELL: Mitchell filter.
         
        
        
         
          IMG_POWER: Power interpolation.
         
        
        
         
          IMG_QUADRATIC: Inverse quadratic interpolation.
         
        
        
         
          IMG_SINC: Sinc function.
         
        
        
         
          IMG_NEAREST_NEIGHBOUR: Nearest neighbour interpolation.
         
        
        
         
          IMG_WEIGHTED4: Weighting filter.
         
        
        
         
          IMG_TRIANGLE: Triangle interpolation.
         
        
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagesetpixel", "Set a single pixel
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , int $x
   , int $y
   , int $color
   )

  
  ) draws a pixel at the specified
   coordinate.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
x

     

      
       x-coordinate.
      
     

    
    
     
y

     

      
       y-coordinate.
      
     

    
    
     
color

     

      
       A color identifier created with 
       imagecolorallocate().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagesetstyle", "Set the style for line drawing
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , array $style
   )

  
  ) sets the style to be used by all
   line drawing functions (such as imageline()
   and imagepolygon()) when drawing with the special
   color IMG_COLOR_STYLED or lines of images with color
   IMG_COLOR_STYLEDBRUSHED.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
style

     

      
       An array of pixel colors. You can use the 
       IMG_COLOR_TRANSPARENT constant to add a 
       transparent pixel.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagesetthickness", "Set the thickness for line drawing
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , int $thickness
   )

  
  ) sets the thickness of the lines
   drawn when drawing rectangles, polygons, ellipses etc. etc. to
   thickness pixels.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
thickness

     

      
       Thickness, in pixels.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagesettile", "Set the tile image for filling
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , resource $tile
   )

  
  ) sets the tile image to be
   used by all region filling functions (such as imagefill()
   and imagefilledpolygon()) when filling with the special
   color IMG_COLOR_TILED.
  
  
   A tile is an image used to fill an area with a repeated pattern. Any
   GD image can be used as a tile, and by setting the transparent color index of the tile
   image with imagecolortransparent(), a tile allows certain parts
   of the underlying area to shine through can be created.
  
  Note: 
   
    You need not take special action when you are finished with a tile, but if you
    destroy the tile image, you must not use the IMG_COLOR_TILED
    color until you have set a new tile image!
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
tile

     

      
       The image resource to be used as a tile.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagestring", "Draw a string horizontally
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , int $font
   , int $x
   , int $y
   , string $string
   , int $color
   )

  
   Draws a string at the given coordinates.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    

font

Can be 1, 2, 3, 4, 5 for built-in
fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your
own font identifiers registered with imageloadfont().


    
     
x

     

      
       x-coordinate of the upper left corner.
      
     

    
    
     
y

     

      
       y-coordinate of the upper left corner.
      
     

    
    
     
string

     

      
       The string to be written.
      
     

    
    
     
color

     

      
       A color identifier created with 
       imagecolorallocate().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagestringup", "Draw a string vertically
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , int $font
   , int $x
   , int $y
   , string $string
   , int $color
   )

  
   Draws a string vertically at the given
   coordinates.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    

font

Can be 1, 2, 3, 4, 5 for built-in
fonts in latin2 encoding (where higher numbers corresponding to larger fonts) or any of your
own font identifiers registered with imageloadfont().


    
     
x

     

      
       x-coordinate of the bottom left corner.
      
     

    
    
     
y

     

      
       y-coordinate of the bottom left corner.
      
     

    
    
     
string

     

      
       The string to be written.
      
     

    
    
     
color

     

      
       A color identifier created with 
       imagecolorallocate().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagesx", "Get image width
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $image
   )

  
   Returns the width of the given image resource.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Return the width of the image or FALSE on 
   errors.
  
 " 
"imagesy", "Get image height
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $image
   )

  
   Returns the height of the given image resource.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Return the height of the image or FALSE on 
   errors.
  
 " 
"imagetruecolortopalette", "Convert a true color image to a palette image
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , bool $dither
   , int $ncolors
   )

  
  ) converts a truecolor image
   to a palette image. The code for this function was originally drawn from
   the Independent JPEG Group library code, which is excellent. The code
   has been modified to preserve as much alpha channel information as
   possible in the resulting palette, in addition to preserving colors as
   well as possible. This does not work as well as might be hoped. It is
   usually best to simply produce a truecolor output image instead, which
   guarantees the highest output quality.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
dither

     

      
       Indicates if the image should be dithered - if it is TRUE then
       dithering will be used which will result in a more speckled image but
       with better color approximation.
      
     

    
    
     
ncolors

     

      
       Sets the maximum number of colors that should be retained in the palette.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagettfbbox", "Give the bounding box of a text using TrueType fonts
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( float $size
   , float $angle
   , string $fontfile
   , string $text
   )

  
   This function calculates and returns the bounding box in pixels
   for a TrueType text.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
size

     

      
       The font size.
       Note: 
        
         In GD 1, this is measured in pixels. In GD 2, this is measured in
         points.
        
       
      
     

    
    
     
angle

     

      
       Angle in degrees in which text will be measured.
      
     

    
    
     
fontfile

     

      
       The name of the TrueType font file (can be a URL). Depending on
       which version of the GD library that PHP is using, it may attempt to
       search for files that do not begin with a leading '/' by appending
       '.ttf' to the filename and searching along a library-defined font path.
      
     

    
    
     
text

     

      
       The string to be measured.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns an array with 8
   elements representing four points making the bounding box of the
   text on success and FALSE on error.
   key
       contents
      0
       lower left corner, X position
      1
       lower left corner, Y position
      2
       lower right corner, X position
      3
       lower right corner, Y position
      4
       upper right corner, X position
      5
       upper right corner, Y position
      6
       upper left corner, X position
      7
       upper left corner, Y position
      
   The points are relative to the text regardless of the
   angle, so &quot;upper left&quot; means in the top left-hand 
   corner seeing the text horizontally.
  
 " 
"imagettftext", "Write text to the image using TrueType fonts
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $image
   , float $size
   , float $angle
   , int $x
   , int $y
   , int $color
   , string $fontfile
   , string $text
   )

  
   Writes the given text into the image using TrueType
   fonts.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
size

     

      The font size. Depending on your version of GD, this should be specified as the pixel size (GD1) or point size (GD2).
     

    
    
     
angle

     

      
       The angle in degrees, with 0 degrees being left-to-right reading text.
       Higher values represent a counter-clockwise rotation. For example, a 
       value of 90 would result in bottom-to-top reading text.
      
     

    
    
     
x

     

      
       The coordinates given by x and
       y will define the basepoint of the first
       character (roughly the lower-left corner of the character). This
       is different from the imagestring(), where
       x and y define the
       upper-left corner of the first character. For example, &quot;top left&quot;
       is 0, 0.
      
     

    
    
     
y

     

      
       The y-ordinate. This sets the position of the fonts baseline, not the
       very bottom of the character.
      
     

    
    
     
color

     

      
       The color index. Using the negative of a color index has the effect of
       turning off antialiasing. See imagecolorallocate().
      
     

    
    
     
fontfile

     

      
       The path to the TrueType font you wish to use.
      
      
       Depending on which version of the GD library PHP is using, when
       fontfile does not begin with a leading
       / then .ttf will be appended
       to the filename and the library will attempt to search for that
       filename along a library-defined font path.
      
      
       When using versions of the GD library lower than 2.0.18, a space character,
       rather than a semicolon, was used as the 'path separator' for different font files.
       Unintentional use of this feature will result in the warning message:
       Warning: Could not find/open font. For these affected versions, the
       only solution is moving the font to a path which does not contain spaces.
      
      
       In many cases where a font resides in the same directory as the script using it
       the following trick will alleviate any include problems.
       




       

      
     

    
    
     
text

     

      
       The text string in UTF-8 encoding.
      
      
       May include decimal numeric character references (of the form:
       &amp;#8364;) to access characters in a font beyond position 127.
       The hexadecimal format (like &amp;#xA9;) is supported.
       Strings in UTF-8 encoding can be passed directly.
      
      
       Named entities, such as &amp;copy;, are not supported. Consider using 
       html_entity_decode()
       to decode these named entities into UTF-8 strings.
      
      
       If a character is used in the string which is not supported by the
       font, a hollow rectangle will replace the character.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array with 8 elements representing four points making the
   bounding box of the text. The order of the points is lower left, lower 
   right, upper right, upper left. The points are relative to the text
   regardless of the angle, so &quot;upper left&quot; means in the top left-hand 
   corner when you see the text horizontally.
   Returns FALSE on error.
  
 " 
"imagetypes", "Return the image types supported by this PHP build
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   Returns the image types supported by the current PHP installation.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a bit-field corresponding to the image formats supported by the
   version of GD linked into PHP.  The following bits are returned, 
   IMG_GIF | IMG_JPG |
   IMG_PNG | IMG_WBMP | 
   IMG_XPM.
  
 " 
"imagewbmp", "Output image to browser or file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   [, string $filename
   [, int $foreground
  ]] )

  
  ) outputs or save a WBMP
   version of the given image. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
filename

     

      The path to save the file to. If not set or NULL, the raw image stream will be outputted directly.
     

    
    
     
foreground

     

      
       You can set the foreground color with this parameter by setting an
       identifier obtained from imagecolorallocate().
       The default foreground color is black.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imagexbm", "Output an XBM image to browser or file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $image
   , string $filename
   [, int $foreground
  ] )

  
   Outputs or save an XBM version of the given 
   image. 
  
  Note: 
   
   ) doesn't apply any padding, so the image width
    has to be a multiple of 8.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

image

An image resource, returned by one of the image creation functions,
such as imagecreatetruecolor().

    
     
filename

     

      The path to save the file to. If not set or NULL, the raw image stream will be outputted directly.
     

    
    
     
foreground

     

      
       You can set the foreground color with this parameter by setting an
       identifier obtained from imagecolorallocate().
       The default foreground color is black. All other colors are treated as
       background.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imap_8bit", "Convert an 8bit string to a quoted-printable string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $string
   )

  
   Convert an 8bit string to a quoted-printable string (according to
   » RFC2045, section 6.7).
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
string

     

      
       The 8bit string to convert
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a quoted-printable string.
  
 " 
"imap_alerts", "Returns all IMAP alert messages that have occurred
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
   Returns all of the IMAP alert messages generated since the last
  ) call, or the beginning of the page. 
  
  
   When) is called, the alert stack is
   subsequently cleared. The IMAP specification requires that these messages
   be passed to the user.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of all of the IMAP alert messages generated or FALSE if
   no alert messages are available.
  
 " 
"imap_append", "Append a string message to a specified mailbox
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $imap_stream
   , string $mailbox
   , string $message
   [, string $options = NULL
   [, string $internal_date = NULL
  ]] )

  
   Appends a string message to the specified mailbox. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
mailbox

     

      
       The mailbox name, see imap_open() for more
       information
      
     

    
    
     
message

     

      
       The message to be append, as a string
      
      
       When talking to the Cyrus IMAP server, you must use &quot;\r\n&quot; as
       your end-of-line terminator instead of &quot;\n&quot; or the operation will
       fail
      
     

    
    
     
options

     

      
       If provided, the options will also be written
       to the mailbox
      
     

    
    
     
internal_date

     

      
       If this parameter is set, it will set the INTERNALDATE on the appended message.  The parameter should be a date string that conforms to the rfc2060 specifications for a date_time value.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imap_base64", "Decode BASE64 encoded text
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $text
   )

  
   Decodes the given BASE-64 encoded text. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
text

     

      
       The encoded text
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the decoded message as a string.
  
 " 
"imap_binary", "Convert an 8bit string to a base64 string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $string
   )

  
   Convert an 8bit string to a base64 string according to » RFC2045, Section 6.8.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
string

     

      
       The 8bit string
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a base64 encoded string.
  
 " 
"imap_body", "Read the message body
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $imap_stream
   , int $msg_number
   [, int $options = 0
  ] )

  
  ) returns the body of the message,
   numbered msg_number in the current
   mailbox.
  
  
  ) will only return a verbatim copy of the
   message body. To extract single parts of a multipart MIME-encoded
   message you have to use imap_fetchstructure() to
   analyze its structure and imap_fetchbody() to
   extract a copy of a single body component.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
msg_number

     

      
       The message number
      
     

    
    
     
options

     

      
       The optional options are a bit mask
       with one or more of the following:
       
         
          FT_UID - The msg_number is a UID
         
        
        
         
          FT_PEEK - Do not set the \Seen flag if not already set
         
        
        
         
          FT_INTERNAL - The return string is in internal format, will
          not canonicalize to CRLF.
         
        
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the body of the specified message, as a string.
  
 " 
"imap_bodystruct", "Read the structure of a specified body section of a specific message
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   object    ( resource $imap_stream
   , int $msg_number
   , string $section
   )

  
   Read the structure of a specified body section of a specific message.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
msg_number

     

      
       The message number
      
     

    
    
     
section

     

      
       The body section to read
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the information in an object, for a detailed description
   of the object structure and properties see 
   imap_fetchstructure().
  
 " 
"imap_check", "Check current mailbox
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   object    ( resource $imap_stream
   )

  
   Checks information about the current mailbox.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the information in an object with following properties:
   
     
      Date - current system time formatted according to » RFC2822
     
    
    
     
      Driver - protocol used to access this mailbox:
      POP3, IMAP, NNTP
     
    
    
     
      Mailbox - the mailbox name
     
    
    
     
      Nmsgs - number of messages in the mailbox
     
    
    
     
      Recent - number of recent messages in the mailbox
     
    
   
   Returns FALSE on failure.
  
 " 
"imap_clearflag_full", "Clears flags on messages
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $imap_stream
   , string $sequence
   , string $flag
   [, int $options = 0
  ] )

  
   This function causes a store to delete the specified
   flag to the flags set for the
   messages in the specified sequence.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
sequence

     

      
       A sequence of message numbers. You can enumerate desired messages
       with the X,Y syntax, or retrieve all messages 
       within an interval with the X:Y syntax
      
     

    
    
     
flag

     

      
       The flags which you can unset are &quot;\\Seen&quot;, &quot;\\Answered&quot;, &quot;\\Flagged&quot;,
       &quot;\\Deleted&quot;, and &quot;\\Draft&quot; (as defined by » RFC2060)
      
     

    
    
     
options

     

      
       options are a bit mask and may contain
       the single option:
       
         
          ST_UID - The sequence argument contains UIDs
          instead of sequence numbers
         
        
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imap_close", "Close an IMAP stream
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $imap_stream
   [, int $flag = 0
  ] )

  
   Closes the imap stream.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
flag

     

      
       If set to CL_EXPUNGE, the function will silently
       expunge the mailbox before closing, removing all messages marked for
       deletion. You can achieve the same thing by using
       imap_expunge()
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imap_create", "Alias of NAMEmailbox()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   NAMEmailbox().
  
 " 
"imap_createmailbox", "Create a new mailbox
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $imap_stream
   , string $mailbox
   )

  
   Creates a new mailbox specified by mailbox. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
mailbox

     

      
       The mailbox name, see imap_open() for more
       information. Names containing international characters should be
       encoded by imap_utf7_encode()
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imap_delete", "Mark a message for deletion from current mailbox
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $imap_stream
   , int $msg_number
   [, int $options = 0
  ] )

  
   Marks messages listed in msg_number for deletion.
   Messages marked for deletion will stay in the mailbox until either
   imap_expunge() is called or
   imap_close() is called with the optional parameter
   CL_EXPUNGE.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
msg_number

     

      
       The message number
      
     

    
    
     
options

     

      
       You can set the FT_UID which tells the function
       to treat the msg_number argument as an
       UID.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE.
  
 " 
"imap_deletemailbox", "Delete a mailbox
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $imap_stream
   , string $mailbox
   )

  
   Deletes the specified mailbox.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
mailbox

     

      
       The mailbox name, see imap_open() for more
       information
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imap_errors", "Returns all of the IMAP errors that have occurred
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
   Gets all of the IMAP errors (if any) that have occurred
   during this page request or since the error stack was reset.
  
  
   When) is called, the error stack is
   subsequently cleared.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function returns an array of all of the IMAP error messages
   generated since the last) call,
   or the beginning of the page. Returns FALSE if no error messages are
   available. 
  
 " 
"imap_expunge", "Delete all messages marked for deletion
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $imap_stream
   )

  
   Deletes all the messages marked for deletion by 
   imap_delete(), imap_mail_move(), or
   imap_setflag_full().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE.
  
 " 
"imap_fetch_overview", "Read an overview of the information in the headers of the given message
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $imap_stream
   , string $sequence
   [, int $options = 0
  ] )

  
   This function fetches mail headers for the given
   sequence and returns an overview of their
   contents.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
sequence

     

      
       A message sequence description. You can enumerate desired messages
       with the X,Y syntax, or retrieve all messages 
       within an interval with the X:Y syntax
      
     

    
    
     
options

     

      
       sequence will contain a sequence of message
       indices or UIDs, if this parameter is set to 
       FT_UID. 
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of objects describing one message header each.
   The object will only define a property if it exists. The possible
   properties are:
   
     
      subject - the messages subject
     
    
    
     
      from - who sent it
     
    
    
     
      to - recipient
     
    
    
     
      date - when was it sent
     
    
    
     
      message_id - Message-ID
     
    
    
     
      references - is a reference to this message id
     
    
    
     
      in_reply_to - is a reply to this message id
     
    
    
     
      size - size in bytes
     
    
    
     
      uid - UID the message has in the mailbox
     
    
    
     
      msgno - message sequence number in the mailbox
     
    
    
     
      recent - this message is flagged as recent
     
    
    
     
      flagged -  this message is flagged
     
    
    
     
      answered -  this message is flagged as answered
     
    
    
     
      deleted -  this message is flagged for deletion
     
    
    
     
      seen -  this message is flagged as already read
     
    
    
     
      draft -  this message is flagged as being a draft
     
    
   " 
"imap_fetchbody", "Fetch a particular section of the body of the message
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $imap_stream
   , int $msg_number
   , string $section
   [, int $options = 0
  ] )

  
   Fetch of a particular section of the body of the specified messages. 
   Body parts are not decoded by this function.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
msg_number

     

      
       The message number
      
     

    
    
     
section

     

      
       The part number. It is a string of integers delimited by period which
       index into a body part list as per the IMAP4 specification
      
     

    
    
     
options

     

      
       A bitmask with one or more of the following:
       
         
          FT_UID - The msg_number is a UID
         
        
        
         
          FT_PEEK - Do not set the \Seen flag if
          not already set
         
        
        
         
          FT_INTERNAL - The return string is in
          internal format, will not canonicalize to CRLF.
         
        
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a particular section of the body of the specified messages as a
   text string.
  
 " 
"imap_fetchheader", "Returns header for a message
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $imap_stream
   , int $msg_number
   [, int $options = 0
  ] )

  
   This function causes a fetch of the complete, unfiltered » RFC2822 format header of the specified
   message.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
msg_number

     

      
       The message number
      
     

    
    
     
options

     

      
       The possible options are:
       
         
          FT_UID - The msgno
          argument is a UID
         
        
        
         
          FT_INTERNAL - The return string
          is in &quot;internal&quot; format, without any attempt to
          canonicalize to CRLF newlines
         
        
        
         
          FT_PREFETCHTEXT - The RFC822.TEXT
          should be pre-fetched at the same time.  This avoids an
          extra RTT on an IMAP connection if a full message text is
          desired (e.g. in a &quot;save to local file&quot; operation)
         
        
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the header of the specified message as a text string.
  
 " 
"imap_fetchmime", "Fetch MIME headers for a particular section of the message
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $imap_stream
   , int $msg_number
   , string $section
   [, int $options = 0
  ] )

  
   Fetch the MIME headers of a particular section of the body of the specified messages. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
msg_number

     

      
       The message number
      
     

    
    
     
section

     

      
       The part number. It is a string of integers delimited by period which
       index into a body part list as per the IMAP4 specification
      
     

    
    
     
options

     

      
       A bitmask with one or more of the following:
       
         
          FT_UID - The msg_number is a UID
         
        
        
         
          FT_PEEK - Do not set the \Seen flag if
          not already set
         
        
        
         
          FT_INTERNAL - The return string is in
          internal format, will not canonicalize to CRLF.
         
        
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the MIME headers of a particular section of the body of the specified messages as a
   text string.
  
 " 
"imap_fetchstructure", "Read the structure of a particular message
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   object    ( resource $imap_stream
   , int $msg_number
   [, int $options = 0
  ] )

  
   Fetches all the structured information for a given message. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
msg_number

     

      
       The message number
      
     

    
    
     
options

     

      
       This optional parameter only has a single option, 
       FT_UID, which tells the function to treat the
       msg_number argument as a 
       UID.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an object includes the envelope, internal date, size, flags and
   body structure along with a similar object for each mime attachment. The
   structure of the returned objects is as follows:
  
  
   
     Returned Objects for)
    
    
     type
       Primary body type
      encoding
       Body transfer encoding
      ifsubtype
       TRUE if there is a subtype string
      subtype
       MIME subtype
      ifdescription
       TRUE if there is a description string
      description
       Content description string
      ifid
       TRUE if there is an identification string
      id
       Identification string
      lines
       Number of lines
      bytes
       Number of bytes
      ifdisposition
       TRUE if there is a disposition string
      disposition
       Disposition string
      ifdparameters
       TRUE if the dparameters array exists
      dparameters
       An array of objects where each object has an
        &quot;attribute&quot; and a &quot;value&quot;
        property corresponding to the parameters on the
        Content-disposition MIME
        header.
      ifparameters
       TRUE if the parameters array exists
      parameters
       An array of objects where each object has an
        &quot;attribute&quot; and a &quot;value&quot;
        property.
      parts
       An array of objects identical in structure to the top-level
       object, each of which corresponds to a MIME body
       part.
      
   Primary body type (value may vary with used library, use of constants is recommended)
    
     ValueTypeConstant0textTYPETEXT1multipartTYPEMULTIPART2messageTYPEMESSAGE3applicationTYPEAPPLICATION4audioTYPEAUDIO5imageTYPEIMAGE6videoTYPEVIDEO7modelTYPEMODEL8otherTYPEOTHER
   Transfer encodings (value may vary with used library, use of constants is recommended)
    
     ValueTypeConstant07bitENC7BIT18bitENC8BIT2BinaryENCBINARY3Base64ENCBASE644Quoted-PrintableENCQUOTEDPRINTABLE5otherENCOTHER" 
"imap_fetchtext", "Alias of imap_body()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   imap_body().
  
 " 
"imap_gc", "Clears IMAP cache
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $imap_stream
   , int $caches
   )

  
   Purges the cache of entries of a specific type.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
caches

     

      
       Specifies the cache to purge. It may one or a combination
       of the following constants: 
       IMAP_GC_ELT (message cache elements), 
       IMAP_GC_ENV (enveloppe and bodies),
       IMAP_GC_TEXTS (texts).
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  Returns TRUE on success or FALSE on failure.
  
 " 
"imap_get_quota", "Retrieve the quota level settings, and usage statics per mailbox
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $imap_stream
   , string $quota_root
   )

  
   Retrieve the quota level settings, and usage statics per mailbox.
  
  
   For a non-admin user version of this function,
   please see the NAMEroot() function of PHP.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
quota_root

     

      
       quota_root should normally be in the form of
       user.name where name is the mailbox you wish to
       retrieve information about.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array with integer values limit and usage for the given
   mailbox.  The value of limit represents the total amount of space
   allowed for this mailbox.  The usage value represents the mailboxes
   current level of capacity.  Will return FALSE in the case of failure.
  
  
   As of PHP 4.3, the function more properly reflects the
   functionality as dictated by the » RFC2087.
   The array return value has changed to support an unlimited number of returned 
   resources (i.e.  messages, or sub-folders) with each named resource receiving
   an individual array key.  Each key value then contains an another array with
   the usage and limit values within it.
  
  
   For backwards compatibility reasons, the original access methods are
   still available for use, although it is suggested to update.
  
 " 
"imap_get_quotaroot", "Retrieve the quota settings per user
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $imap_stream
   , string $quota_root
   )

  
   Retrieve the quota settings per user. The limit value represents the total
   amount of space allowed for this user's total mailbox usage.  The usage
   value represents the user's current total mailbox capacity.  
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
quota_root

     

      
       quota_root should normally be in the form of
       which mailbox (i.e. INBOX).
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of integer values pertaining to the specified user
   mailbox.  All values contain a key based upon the resource name, and a
   corresponding array with the usage and limit values within.
  
  
   This function will return FALSE in the case of call failure, and an
   array of information about the connection upon an un-parsable response
   from the server.
  
 " 
"imap_getacl", "Gets the ACL for a given mailbox
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $imap_stream
   , string $mailbox
   )

  
   Gets the ACL for a given mailbox.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
mailbox

     

      
       The mailbox name, see imap_open() for more
       information
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an associative array of &quot;folder&quot; =&gt; &quot;acl&quot; pairs.
  
 " 
"imap_getmailboxes", "Read the list of mailboxes, returning detailed information on each one
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $imap_stream
   , string $ref
   , string $pattern
   )

  
   Gets information on the mailboxes.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
ref

     

      
       ref should normally be just the server
       specification as described in imap_open()
      
     

    
    
     
pattern

     

      Specifies where in the mailbox hierarchy
to start searching.There are two special characters you can
pass as part of the pattern:
'*' and '%'.
'*' means to return all mailboxes. If you pass
pattern as '*', you will
get a list of the entire mailbox hierarchy.
'%'
means to return the current level only.
'%' as the pattern
parameter will return only the top level
mailboxes; '~/mail/%' on UW_IMAPD will return every mailbox in the ~/mail directory, but none in subfolders of that directory.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of objects containing mailbox information. Each
   object has the attributes name, specifying
   the full name of the mailbox; delimiter,
   which is the hierarchy delimiter for the part of the hierarchy
   this mailbox is in; and
   attributes. Attributes
   is a bitmask that can be tested against:
   
     
      LATT_NOINFERIORS - This mailbox contains, and may not contain any
      &quot;children&quot; (there are no mailboxes below this one). Calling 
      imap_createmailbox() will not work on this mailbox.
     
    
   
     
      LATT_NOSELECT - This is only a container,
      not a mailbox - you cannot open it.
     
    
    
     
      LATT_MARKED - This mailbox is marked. This means that it may 
      contain new messages since the last time it was checked. Not provided by all IMAP
      servers.
     
    
    
     
      LATT_UNMARKED - This mailbox is not marked, does not contain new
      messages.  If either MARKED or UNMARKED is
      provided, you can assume the IMAP server  supports this feature for this mailbox.
     
    
   " 
"imap_getsubscribed", "List all the subscribed mailboxes
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $imap_stream
   , string $ref
   , string $pattern
   )

  
   Gets information about the subscribed mailboxes.
  
  
   Identical to imap_getmailboxes(), except that it only
   returns mailboxes that the user is subscribed to.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
ref

     

      
       ref should normally be just the server
       specification as described in imap_open()
      
     

    
    
     
pattern

     

      Specifies where in the mailbox hierarchy
to start searching.There are two special characters you can
pass as part of the pattern:
'*' and '%'.
'*' means to return all mailboxes. If you pass
pattern as '*', you will
get a list of the entire mailbox hierarchy.
'%'
means to return the current level only.
'%' as the pattern
parameter will return only the top level
mailboxes; '~/mail/%' on UW_IMAPD will return every mailbox in the ~/mail directory, but none in subfolders of that directory.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of objects containing mailbox information. Each
   object has the attributes name, specifying
   the full name of the mailbox; delimiter,
   which is the hierarchy delimiter for the part of the hierarchy
   this mailbox is in; and
   attributes. Attributes
   is a bitmask that can be tested against:
   
     
      LATT_NOINFERIORS - This mailbox has no
      &quot;children&quot; (there are no mailboxes below this one).
     
    
   
     
      LATT_NOSELECT - This is only a container,
      not a mailbox - you cannot open it.
     
    
    
     
      LATT_MARKED - This mailbox is marked.
      Only used by UW-IMAPD.
     
    
    
     
      LATT_UNMARKED - This mailbox is not marked.
      Only used by UW-IMAPD.
     
    
   " 
"imap_header", "Alias of NAMEinfo()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   NAMEinfo().
  
 " 
"imap_headerinfo", "Read the header of the message
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   object    ( resource $imap_stream
   , int $msg_number
   [, int $fromlength = 0
   [, int $subjectlength = 0
   [, string $defaulthost = NULL
  ]]] )

  
   Gets information about the given message number by reading its headers.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
msg_number

     

      
       The message number
      
     

    
    
     
fromlength

     

      
       Number of characters for the fetchfrom property.
       Must be greater than or equal to zero.
      
     

    
    
     
subjectlength

     

      
       Number of characters for the fetchsubject property
       Must be greater than or equal to zero.
      
     

    
    
     
defaulthost

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the information in an object with following properties:
   
     
      toaddress - full to: line, up to 1024 characters
     
    
    
     
      to - an array of objects from the To: line, with the following 
      properties: personal, adl,
      mailbox, and host
     
    
    
     
      fromaddress - full from: line, up to 1024 characters
     
    
    
     
      from - an array of objects from the From: line, with the following 
      properties: personal, adl,
      mailbox, and host
     
    
    
     
      ccaddress - full cc: line, up to 1024 characters
     
    
    
     
      cc - an array of objects from the Cc: line, with the following 
      properties: personal, adl,
      mailbox, and host
     
    
    
     
      bccaddress - full bcc: line, up to 1024 characters
     
    
    
     
      bcc - an array of objects from the Bcc: line, with the following 
      properties: personal, adl,
      mailbox, and host
     
    
    
     
      reply_toaddress - full Reply-To: line, up to 1024 characters
     
    
    
     
      reply_to - an array of objects from the Reply-To: line, with the following
      properties: personal, adl,
      mailbox, and host
     
    
    
     
      senderaddress - full sender: line, up to 1024 characters
     
    
    
     
      sender - an array of objects from the Sender: line, with the following 
      properties: personal, adl,
      mailbox, and host
     
    
    
     
      return_pathaddress - full Return-Path: line, up to 1024 characters
     
    
    
     
      return_path - an array of objects from the Return-Path: line, with the
      following properties: personal, 
      adl, mailbox, and 
      host
     
    
    
     
      remail - 
     
    
    
     
      date - The message date as found in its headers
     
    
    
     
      Date - Same as date
     
    
    
     
      subject - The message subject
     
    
    
     
      Subject - Same as subject 
     
    
    
     
      in_reply_to - 
     
    
    
     
      message_id - 
     
    
    
     
      newsgroups - 
     
    
    
     
      followup_to - 
     
    
    
     
      references - 
     
    
    
     
      Recent - R if recent and seen, N
      if recent and not seen, ' ' if not recent.
     
    
    
     
      Unseen - U if not seen AND not recent, ' ' if seen
      OR not seen and recent
     
    
    
     
      Flagged - F if flagged, ' ' if not flagged
     
    
    
     
      Answered - A if answered, ' ' if unanswered
     
    
    
     
      Deleted - D if deleted, ' ' if not deleted
     
    
    
     
      Draft - X if draft, ' ' if not draft
     
    
    
     
      Msgno - The message number
     
    
    
     
      MailDate - 
     
    
    
     
      Size - The message size
     
    
    
     
      udate - mail message date in Unix time
     
    
    
     
      fetchfrom - from line formatted to fit fromlength
      characters
     
    
    
     
      fetchsubject - subject line formatted to fit 
      subjectlength characters
     
    
   " 
"imap_headers", "Returns headers for all messages in a mailbox
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $imap_stream
   )

  
   Returns headers for all messages in a mailbox.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of string formatted with header info. One
   element per mail message.
  
 " 
"imap_last_error", "Gets the last IMAP error that occurred during this page request
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( void
   )

  
   Gets the full text of the last IMAP error message
   that occurred on the current page. The error stack is untouched; calling 
  ) subsequently, with no intervening
   errors, will return the same error. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the full text of the last IMAP error message that occurred on the
   current page. Returns FALSE if no error messages are available.
  
 " 
"imap_list", "Read the list of mailboxes
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $imap_stream
   , string $ref
   , string $pattern
   )

  
   Read the list of mailboxes.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
ref

     

      
       ref should normally be just the server
       specification as described in imap_open().
      
     

    
    
     
pattern

     

      Specifies where in the mailbox hierarchy
to start searching.There are two special characters you can
pass as part of the pattern:
'*' and '%'.
'*' means to return all mailboxes. If you pass
pattern as '*', you will
get a list of the entire mailbox hierarchy.
'%'
means to return the current level only.
'%' as the pattern
parameter will return only the top level
mailboxes; '~/mail/%' on UW_IMAPD will return every mailbox in the ~/mail directory, but none in subfolders of that directory.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array containing the names of the mailboxes.
  
 " 
"imap_listmailbox", "Alias of imap_list()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   imap_list().
  
 " 
"imap_listscan", "Returns the list of mailboxes that matches the given text
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $imap_stream
   , string $ref
   , string $pattern
   , string $content
   )

  
   Returns an array containing the names of the mailboxes that have
   content in the text of the mailbox.
  
  
   This function is similar to imap_listmailbox(),
   but it will additionally check for the presence of the string
   content inside the mailbox data.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
ref

     

      
       ref should normally be just the server 
       specification as described in imap_open()
      
     

    
    
     
pattern

     

      Specifies where in the mailbox hierarchy
to start searching.There are two special characters you can
pass as part of the pattern:
'*' and '%'.
'*' means to return all mailboxes. If you pass
pattern as '*', you will
get a list of the entire mailbox hierarchy.
'%'
means to return the current level only.
'%' as the pattern
parameter will return only the top level
mailboxes; '~/mail/%' on UW_IMAPD will return every mailbox in the ~/mail directory, but none in subfolders of that directory.
     

    
    
     
content

     

      
       The searched string
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array containing the names of the mailboxes that have
   content in the text of the mailbox.
  
 " 
"imap_listsubscribed", "Alias of imap_lsub()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   imap_lsub().
  
 " 
"imap_lsub", "List all the subscribed mailboxes
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $imap_stream
   , string $ref
   , string $pattern
   )

  
   Gets an array of all the mailboxes that you have subscribed.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
ref

     

      
       ref should normally be just the server 
       specification as described in imap_open()
      
     

    
    
     
pattern

     

      Specifies where in the mailbox hierarchy
to start searching.There are two special characters you can
pass as part of the pattern:
'*' and '%'.
'*' means to return all mailboxes. If you pass
pattern as '*', you will
get a list of the entire mailbox hierarchy.
'%'
means to return the current level only.
'%' as the pattern
parameter will return only the top level
mailboxes; '~/mail/%' on UW_IMAPD will return every mailbox in the ~/mail directory, but none in subfolders of that directory.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of all the subscribed mailboxes.
  
 " 
"imap_mail", "Send an email message
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $to
   , string $subject
   , string $message
   [, string $additional_headers = NULL
   [, string $cc = NULL
   [, string $bcc = NULL
   [, string $rpath = NULL
  ]]]] )

  
   This function allows sending of emails with correct handling of
   Cc and Bcc receivers. 
  
  
   The parameters to, cc
   and bcc are all strings and are all parsed
   as » RFC822 address lists.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
to

     

      
       The receiver
      
     

    
    
     
subject

     

      
       The mail subject
      
     

    
    
     
message

     

      
       The mail body, see NAME_compose()
      
     

    
    
     
additional_headers

     

      
       As string with additional headers to be set on the mail
      
     

    
    
     
cc

     

      
      
     

    
    
     
bcc

     

      
       The receivers specified in bcc will get the
       mail, but are excluded from the headers.
      
     

    
    
     
rpath

     

      
       Use this parameter to specify return path upon mail delivery failure.
       This is useful when using PHP as a mail client for multiple users.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imap_mail_compose", "Create a MIME message based on given envelope and body sections
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( array $envelope
   , array $body
   )

  
   Create a MIME message based on the given envelope
   and body sections.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
envelope

     

      
       An associative array of headers fields. Valid keys are: &quot;remail&quot;,
       &quot;return_path&quot;, &quot;date&quot;, &quot;from&quot;, &quot;reply_to&quot;, &quot;in_reply_to&quot;, &quot;subject&quot;,
       &quot;to&quot;, &quot;cc&quot;, &quot;bcc&quot;, &quot;message_id&quot; and &quot;custom_headers&quot; (which contains
       associative array of other headers).
      
     

    
    
     
body

     

      
       An indexed array of bodies
      
      
       A body is an associative array which can consist of the following keys:
       &quot;type&quot;, &quot;encoding&quot;, &quot;charset&quot;, &quot;type.parameters&quot;, &quot;subtype&quot;, &quot;id&quot;,
       &quot;description&quot;, &quot;disposition.type&quot;, &quot;disposition&quot;, &quot;contents.data&quot;,
       &quot;lines&quot;, &quot;bytes&quot; and &quot;md5&quot;.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the MIME message.
  
 " 
"imap_mail_copy", "Copy specified messages to a mailbox
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $imap_stream
   , string $msglist
   , string $mailbox
   [, int $options = 0
  ] )

  
   Copies mail messages specified by msglist
   to specified mailbox.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
msglist

     

      
       msglist is a range not just message
       numbers (as described in » RFC2060).
      
     

    
    
     
mailbox

     

      
       The mailbox name, see imap_open() for more
       information
      
     

    
    
     
options

     

      
       options is a bitmask of one or more of
       
         
          CP_UID - the sequence numbers contain UIDS
         
        
        
         
          CP_MOVE - Delete the messages from
          the current mailbox after copying
         
        
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imap_mail_move", "Move specified messages to a mailbox
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $imap_stream
   , string $msglist
   , string $mailbox
   [, int $options = 0
  ] )

  
   Moves mail messages specified by msglist to the
   specified mailbox. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
msglist

     

      
       msglist is a range not just message numbers
       (as described in » RFC2060).
      
     

    
    
     
mailbox

     

      
       The mailbox name, see imap_open() for more
       information
      
     

    
    
     
options

     

      
       options is a bitmask and may contain the single option:
       
         
          CP_UID - the sequence numbers contain UIDS
         
        
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imap_mailboxmsginfo", "Get information about the current mailbox
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   object    ( resource $imap_stream
   )

  
   Checks the current mailbox status on the server. It is similar to
   imap_status(), but will additionally sum up the size of
   all messages in the mailbox, which will take some additional time to 
   execute. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the information in an object with following properties:
   Mailbox properties
    
     Date
       date of last change (current datetime)
      Driver
       driver
      Mailbox
       name of the mailbox
      Nmsgs
       number of messages
      Recent
       number of recent messages
      Unread
       number of unread messages
      Deleted
       number of deleted messages
      Size
       mailbox size
      
   Returns FALSE on failure.
  
 " 
"imap_mime_header_decode", "Decode MIME header elements
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $text
   )

  
   Decodes MIME message header extensions that are non ASCII text (see » RFC2047).
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
text

     

      
       The MIME text
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The decoded elements are returned in an array of objects, where each
   object has two properties, charset and 
   text.
  
  
   If the element hasn't been encoded, and in other words is in
   plain US-ASCII, the charset property of that element is
   set to default.
  
 " 
"imap_msgno", "Gets the message sequence number for the given UID
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $imap_stream
   , int $uid
   )

  
   Returns the message sequence number for the given 
   uid.
  
  
   This function is the inverse of imap_uid().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
uid

     

      
       The message UID
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the message sequence number for the given 
   uid.
  
 " 
"imap_num_msg", "Gets the number of messages in the current mailbox
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $imap_stream
   )

  
   Gets the number of messages in the current mailbox.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Return the number of messages in the current mailbox, as an integer.
  
 " 
"imap_num_recent", "Gets the number of recent messages in current mailbox
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $imap_stream
   )

  
   Gets the number of recent messages in the current mailbox.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the number of recent messages in the current mailbox, as an
   integer.
  
 " 
"imap_open", "Open an IMAP stream to a mailbox
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( string $mailbox
   , string $username
   , string $password
   [, int $options = 0
   [, int $n_retries = 0
   [, array $params = NULL
  ]]] )

  
   Opens an IMAP stream to a mailbox.
  
  
   This function can also be used to open streams to POP3 and
   NNTP servers, but some functions and features are only
   available on IMAP servers.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
mailbox

     

      
       A mailbox name consists of a server and a mailbox path on this server.
       The special name INBOX stands for the current users
       personal mailbox. Mailbox names that contain international characters
       besides those in the printable ASCII space have to be encoded width
       imap_utf7_encode().
      
      
       The server part, which is enclosed in '{' and '}', consists of the servers
       name or ip address, an optional port (prefixed by ':'), and an optional
       protocol specification (prefixed by '/'). 
      
      
       The server part is mandatory in all mailbox
       parameters. 
      
      
       All names which start with { are remote names, and are
       in the form &quot;{&quot; remote_system_name [&quot;:&quot; port] [flags] &quot;}&quot;
       [mailbox_name] where:
       
         
          remote_system_name - Internet domain name or
          bracketed IP address of server.
         
        
        
         
          port - optional TCP port number, default is the
          default port for that service
         
        
        
         
          flags - optional flags, see following table.
         
        
        
         
          mailbox_name - remote mailbox name, default is INBOX
         
        
       
       Optional flags for names
        
         Flag
           </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
          /service=service
           mailbox access service, default is &quot;imap&quot;
          /user=user
           remote user name for login on the server
          /authuser=user
           remote authentication user; if specified this is the user name
            whose password is used (e.g. administrator)
          /anonymous
           remote access as anonymous user
          /debug
           record protocol telemetry in application's debug log
          /secure
           do not transmit a plaintext password over the network
          /imap, /imap2,
            /imap2bis, /imap4,
            /imap4rev1
           equivalent to /service=imap
          <BR>op3
           equivalent to /service=pop3
          /nntp
           equivalent to /service=nntp
          /norsh
           do not use rsh or ssh to establish a preauthenticated IMAP
            session
          /ssl
           use the Secure Socket Layer to encrypt the session
          /validate-cert
           validate certificates from TLS/SSL server (this is the default
            behavior)
          /novalidate-cert
           do not validate certificates from TLS/SSL server, needed if
            server uses self-signed certificates
          /tls
           force use of start-TLS to encrypt the session, and reject
            connection to servers that do not support it
          /notls
           do not do start-TLS to encrypt the session, even with servers
            that support it
          /readonly
           request read-only mailbox open (IMAP only; ignored on NNTP, and
            an error with SMTP and POP3)
          

    
    
     
username

     

      
       The user name
      
     

    
    
     
password

     

      
       The password associated with the username
      
     

    
    
     
options

     

      
       The options are a bit mask with one or more of
       the following:
       
         
          OP_READONLY - Open mailbox read-only
         
        
        
         
          OP_ANONYMOUS - Don't use or update a
          .newsrc for news (NNTP only)
         
        
        
         
          OP_HALFOPEN - For IMAP
          and NNTP names, open a connection but
          don't open a mailbox.
         
        
        
         
          CL_EXPUNGE - Expunge mailbox automatically upon mailbox close
          (see also imap_delete() and
          imap_expunge())
         
        
        
         
          OP_DEBUG - Debug protocol negotiations
         
        
        
         
          OP_SHORTCACHE - Short (elt-only) caching
         
        
        
         
          OP_SILENT - Don't pass up events (internal use)
         
        
        
         
          OP_PROTOTYPE - Return driver prototype
         
        
        
         
          OP_SECURE - Don't do non-secure authentication
         
        
       

    
    
     
n_retries

     

      
       Number of maximum connect attempts
      
     

    
    
     
params

     

      
       Connection parameters, the following (string) keys maybe used 
       to set one or more connection parameters:
       
         
          DISABLE_AUTHENTICATOR - Disable authentication properties
         
        
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an IMAP stream on success or FALSE on error.
  
 " 
"imap_ping", "Check if the IMAP stream is still active
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $imap_stream
   )

  
  ) pings the stream to see if it's still
   active. It may discover new mail; this is the preferred method for a
   periodic &quot;new mail check&quot; as well as a &quot;keep alive&quot; for servers which
   have inactivity timeout.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the stream is still alive, FALSE otherwise.
  
 " 
"imap_qprint", "Convert a quoted-printable string to an 8 bit string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $string
   )

  
   Convert a quoted-printable string to an 8 bit string according to » RFC2045, section 6.7.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
string

     

      
       A quoted-printable string
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an 8 bits string.
  
 " 
"imap_rename", "Alias of NAMEmailbox()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   NAMEmailbox().
  
 " 
"imap_renamemailbox", "Rename an old mailbox to new mailbox
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $imap_stream
   , string $old_mbox
   , string $new_mbox
   )

  
   This function renames on old mailbox to new mailbox (see
   imap_open() for the format of
   mbox names).
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
old_mbox

     

      
       The old mailbox name, see imap_open() for more
       information
      
     

    
    
     
new_mbox

     

      
       The new mailbox name, see imap_open() for more
       information
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imap_reopen", "Reopen IMAP stream to new mailbox
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $imap_stream
   , string $mailbox
   [, int $options = 0
   [, int $n_retries = 0
  ]] )

  
   Reopens the specified stream to a new mailbox on an
   IMAP or NNTP server.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
mailbox

     

      
       The mailbox name, see imap_open() for more
       information
      
     

    
    
     
options

     

      
       The options are a bit mask with one or more of
       the following:
       
         
          OP_READONLY - Open mailbox read-only
         
        
        
         
          OP_ANONYMOUS - Don't use or update a
          .newsrc for news (NNTP only)
         
        
        
         
          OP_HALFOPEN - For IMAP
          and NNTP names, open a connection but
          don't open a mailbox.
         
        
        
         
          OP_EXPUNGE - Silently expunge recycle stream
         
        
        
         
          CL_EXPUNGE - Expunge mailbox automatically upon mailbox close
          (see also imap_delete() and
          imap_expunge())
         
        
       

    
    
     
n_retries

     

      
       Number of maximum connect attempts
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the stream is reopened, FALSE otherwise.
  
 " 
"imap_rfc822_parse_adrlist", "Parses an address string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $address
   , string $default_host
   )

  
   Parses the address string as defined in » RFC2822 and for each address.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
address

     

      
       A string containing addresses
      
     

    
    
     
default_host

     

      
       The default host name
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of objects. The objects properties are:
  
  
   
     
      mailbox  - the mailbox name (username)
     
    
    
     
      host - the host name
     
    
    
     
      personal - the personal name
     
    
    
     
      adl - at domain source route
     
    
   " 
"imap_rfc822_parse_headers", "Parse mail headers from a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   object    ( string $headers
   [, string $defaulthost = &quot;UNKNOWN&quot;
  ] )

  
   Gets an object of various header elements, similar to 
   imap_header().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
headers

     

      
       The parsed headers data
      
     

    
    
     
defaulthost

     

      
       The default host name
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an object similar to the one returned by
   imap_header(), except for the flags and other 
   properties that come from the IMAP server.
   
 " 
"imap_rfc822_write_address", "Returns a properly formatted email address given the mailbox, host, and personal info
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $mailbox
   , string $host
   , string $personal
   )

  
   Returns a properly formatted email address as defined in » RFC2822 given the needed information.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
mailbox

     

      
       The mailbox name, see imap_open() for more
       information
      
     

    
    
     
host

     

      
       The email host part
      
     

    
    
     
personal

     

      
       The name of the account owner
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string properly formatted email address as defined in » RFC2822.
   
 " 
"imap_savebody", "Save a specific body section to a file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $imap_stream
   , mixed $file
   , int $msg_number
   [, string $part_number = &quot;&quot;
   [, int $options = 0
  ]] )

  
   Saves a part or the whole body of the specified message. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
file

     

      
       The path to the saved file as a string, or a valid file descriptor
       returned by fopen().
      
     

    
    
     
msg_number

     

      
       The message number
      
     

    
    
     
part_number

     

      
       The part number. It is a string of integers delimited by period which
       index into a body part list as per the IMAP4 specification
      
     

    
    
     
options

     

      
       A bitmask with one or more of the following:
       
         
          FT_UID - The msg_number is a UID
         
        
        
         
          FT_PEEK - Do not set the \Seen flag if
          not already set
         
        
        
         
          FT_INTERNAL - The return string is in
          internal format, will not canonicalize to CRLF.
         
        
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imap_scan", "Alias of imap_listscan()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   imap_listscan().
  
 " 
"imap_scanmailbox", "Alias of imap_listscan()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   imap_listscan().
  
 " 
"imap_search", "This function returns an array of messages matching the given search criteria
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $imap_stream
   , string $criteria
   [, int $options = SE_FREE
   [, string $charset = NULL
  ]] )

  
   This function performs a search on the mailbox currently opened
   in the given IMAP stream. 
  
  
   For example, to match all unanswered messages sent by Mom, you'd
   use: &quot;UNANSWERED FROM mom&quot;. Searches appear to be case
   insensitive. This list of criteria is from a reading of the UW
   c-client source code and may be incomplete or
   inaccurate (see also » RFC2060, 
   section 6.4.4).
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
criteria

     

      
       A string, delimited by spaces, in which the following keywords are
       allowed. Any multi-word arguments (e.g.
       FROM &quot;joey smith&quot;) must be quoted. Results will match
       all criteria entries.
       
         
          ALL - return all messages matching the rest of the criteria
         
        
        
         
          ANSWERED - match messages with the \\ANSWERED flag set
         
        
        
         
          BCC &quot;string&quot; - match messages with &quot;string&quot; in the Bcc: field
         
        
        
         
          BEFORE &quot;date&quot; - match messages with Date: before &quot;date&quot;
         
        
        
         
          BODY &quot;string&quot; - match messages with &quot;string&quot; in the body of the message
         
        
        
         
          CC &quot;string&quot; - match messages with &quot;string&quot; in the Cc: field
         
        
        
         
          DELETED - match deleted messages
         
        
        
         
          FLAGGED - match messages with the \\FLAGGED (sometimes
          referred to as Important or Urgent) flag set
         
        
        
         
          FROM &quot;string&quot; - match messages with &quot;string&quot; in the From: field
         
        
        
         
          KEYWORD &quot;string&quot; - match messages with &quot;string&quot; as a keyword
         
        
        
         
          NEW - match new messages
         
        
        
         
          OLD - match old messages
         
        
        
         
          ON &quot;date&quot; - match messages with Date: matching &quot;date&quot;
         
        
        
         
          RECENT - match messages with the \\RECENT flag set
         
        
        
         
          SEEN - match messages that have been read (the \\SEEN flag is set)
         
        
        
         
          SINCE &quot;date&quot; - match messages with Date: after &quot;date&quot;
         
        
        
         
          SUBJECT &quot;string&quot; - match messages with &quot;string&quot; in the Subject:
         
        
        
         
          TEXT &quot;string&quot; - match messages with text &quot;string&quot;
         
        
        
         
          TO &quot;string&quot; - match messages with &quot;string&quot; in the To:
         
        
        
         
          UNANSWERED - match messages that have not been answered
         
        
        
         
          UNDELETED - match messages that are not deleted
         
        
        
         
          UNFLAGGED - match messages that are not flagged
         
        
        
         
          UNKEYWORD &quot;string&quot; - match messages that do not have the
          keyword &quot;string&quot;
         
        
        
         
          UNSEEN - match messages which have not been read yet
         
        
       

    
    
     
options

     

      
       Valid values for options are 
       SE_UID, which causes the returned array to
       contain UIDs instead of messages sequence numbers.
      
     

    
    
     
charset

     

      
       MIME character set to use when searching strings.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of message numbers or UIDs.
  
  
   Return FALSE if it does not understand the search
   criteria or no messages have been found.
  
 " 
"imap_set_quota", "Sets a quota for a given mailbox
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $imap_stream
   , string $quota_root
   , int $quota_limit
   )

  
   Sets an upper limit quota on a per mailbox basis. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
quota_root

     

      
       The mailbox to have a quota set. This should follow the IMAP standard
       format for a mailbox: user.name.
      
     

    
    
     
quota_limit

     

      
       The maximum size (in KB) for the quota_root
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imap_setacl", "Sets the ACL for a given mailbox
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $imap_stream
   , string $mailbox
   , string $id
   , string $rights
   )

  
   Sets the ACL for a giving mailbox.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
mailbox

     

      
       The mailbox name, see imap_open() for more
       information
      
     

    
    
     
id

     

      
       The user to give the rights to.
      
     

    
    
     
rights

     

      
       The rights to give to the user. Passing an empty string will delete
       acl.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imap_setflag_full", "Sets flags on messages
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $imap_stream
   , string $sequence
   , string $flag
   [, int $options = NIL
  ] )

  
   Causes a store to add the specified flag to the
   flags set for the messages in the specified 
   sequence.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
sequence

     

      
       A sequence of message numbers. You can enumerate desired messages
       with the X,Y syntax, or retrieve all messages 
       within an interval with the X:Y syntax
      
     

    
    
     
flag

     

      
       The flags which you can set are \Seen, 
       \Answered, \Flagged,
       \Deleted, and \Draft as
       defined by » RFC2060.
      
     

    
    
     
options

     

      
       A bit mask that may contain the single option:
       
         
          ST_UID - The sequence argument contains UIDs
          instead of sequence numbers
         
        
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imap_sort", "Gets and sort messages
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $imap_stream
   , int $criteria
   , int $reverse
   [, int $options = 0
   [, string $search_criteria = NULL
   [, string $charset = NULL
  ]]] )

  
   Gets and sorts message numbers by the given parameters.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
criteria

     

      
       Criteria can be one (and only one) of the following:
       
         
          SORTDATE - message Date
         
        
        
         
          SORTARRIVAL - arrival date
         
        
        
         
          SORTFROM - mailbox in first From address
         
        
        
         
          SORTSUBJECT - message subject
         
        
        
         
          SORTTO - mailbox in first To address
         
        
        
         
          SORTCC - mailbox in first cc address
         
        
        
         
          SORTSIZE - size of message in octets
         
        
       

    
    
     
reverse

     

      
       Set this to 1 for reverse sorting
      
     

    
    
     
options

     

      
       The options are a bitmask of one or more of the
       following:
       
         
          SE_UID - Return UIDs instead of sequence numbers
         
        
        
         
          SE_NOPREFETCH - Don't prefetch searched messages
         
        
       

    
    
     
search_criteria

     

      
       IMAP2-format search criteria string. For details see
       imap_search().
      
     

    
    
     
charset

     

      
       MIME character set to use when sorting strings.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of message numbers sorted by the given
   parameters.
  
 " 
"imap_status", "Returns status information on a mailbox
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   object    ( resource $imap_stream
   , string $mailbox
   , int $options
   )

  
   Gets status information about the given mailbox.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
mailbox

     

      
       The mailbox name, see imap_open() for more
       information
      
     

    
    
     
options

     

      
       Valid flags are:
       
         
          SA_MESSAGES - set $status-&gt;messages to the
          number of messages in the mailbox
         
        
        
         
          SA_RECENT - set $status-&gt;recent to the number
          of recent messages in the mailbox
         
        
        
         
          SA_UNSEEN - set $status-&gt;unseen to the number
          of unseen (new) messages in the mailbox
         
        
        
         
          SA_UIDNEXT - set $status-&gt;uidnext to the next
          uid to be used in the mailbox
         
        
        
         
          SA_UIDVALIDITY - set $status-&gt;uidvalidity to a
          constant that changes when uids for the mailbox may no longer be
          valid
         
        
        
         
          SA_ALL - set all of the above
         
        
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function returns an object containing status information.
   The object has the following properties: messages,
   recent, unseen, 
   uidnext, and uidvalidity.  
  
  
   flags is also set, which contains a bitmask which can
   be checked against any of the above constants.
  
 " 
"imap_subscribe", "Subscribe to a mailbox
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $imap_stream
   , string $mailbox
   )

  
   Subscribe to a new mailbox.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
mailbox

     

      
       The mailbox name, see imap_open() for more
       information
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imap_thread", "Returns a tree of threaded message
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $imap_stream
   [, int $options = SE_FREE
  ] )

  
   Gets a tree of a threaded message.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
options

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns an associative array containing
   a tree of messages threaded by REFERENCES, or FALSE
   on error.
  
  
   Every message in the current mailbox will be represented by three entries
   in the resulting array:
   
     $thread[&quot;XX.num&quot;] - current message number
    
    
     $thread[&quot;XX.next&quot;]
    
    
     $thread[&quot;XX.branch&quot;]
    
   " 
"imap_timeout", "Set or fetch imap timeout
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( int $timeout_type
   [, int $timeout = -1
  ] )

  
   Sets or fetches the imap timeout.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
timeout_type

     

      
       One of the following:
       IMAP_OPENTIMEOUT,
       IMAP_READTIMEOUT,
       IMAP_WRITETIMEOUT, or
       IMAP_CLOSETIMEOUT.
      
     

    
    
     
timeout

     

      
       The timeout, in seconds.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   If the timeout parameter is set, this function
   returns TRUE on success and FALSE on failure.
  
  
   If timeout  is not provided or evaluates to -1,
   the current timeout value of timeout_type is
   returned as an integer.
  
 " 
"imap_uid", "This function returns the UID for the given message sequence number
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $imap_stream
   , int $msg_number
   )

  
   This function returns the UID for the given message sequence
   number. An UID is a unique identifier that will not change over
   time while a message sequence number may change whenever the
   content of the mailbox changes.
  
  
   This function is the inverse of imap_msgno().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
msg_number

     

      
       The message number.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The UID of the given message.
  
 " 
"imap_undelete", "Unmark the message which is marked deleted
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $imap_stream
   , int $msg_number
   [, int $flags = 0
  ] )

  
   Removes the deletion flag for a specified message, which is set by
   imap_delete() or imap_mail_move().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
msg_number

     

      
       The message number
      
     

    
    
     
flags

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imap_unsubscribe", "Unsubscribe from a mailbox
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $imap_stream
   , string $mailbox
   )

  
   Unsubscribe from the specified mailbox.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

imap_stream

An IMAP stream returned by
imap_open().

    
     
mailbox

     

      
       The mailbox name, see imap_open() for more
       information
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"imap_utf7_decode", "Decodes a modified UTF-7 encoded string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $text
   )

  
   Decodes modified UTF-7 text into ISO-8859-1 string.
  
  
   This function is needed to decode mailbox names that contain certain
   characters which are not in range of printable ASCII characters.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
text

     

      
       A modified UTF-7 encoding string, as defined in » RFC 2060, section 5.1.3 (original UTF-7
       was defined in » RFC1642).
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string that is encoded in ISO-8859-1 and consists of the same
   sequence of characters in text, or FALSE
   if text contains invalid modified UTF-7 sequence
   or text contains a character that is not part of
   ISO-8859-1 character set.
  
 " 
"imap_utf7_encode", "Converts ISO-8859-1 string to modified UTF-7 text
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $data
   )

  
   Converts data to modified UTF-7 text.
  
  
   This is needed to encode mailbox names that contain certain characters
   which are not in range of printable ASCII characters.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
data

     

      
       An ISO-8859-1 string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns data encoded with the modified UTF-7
   encoding as defined in » RFC 2060, 
   section 5.1.3 (original UTF-7 was defined in » RFC1642).
  
 " 
"imap_utf8", "Converts MIME-encoded text to UTF-8
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $mime_encoded_text
   )

  
   Converts the given mime_encoded_text to
   UTF-8. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
mime_encoded_text

     

      
       A MIME encoded string. MIME encoding method and the UTF-8 
       specification are described in » RFC2047 and » RFC2044 respectively.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an UTF-8 encoded string.
  
 " 
"implode", "Join array elements with a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $glue
   , array $pieces
   )

  
   string    ( array $pieces
   )

  
   Join array elements with a glue string.
  
  Note: 
   
   ) can, for historical reasons, accept
    its parameters in either order. For consistency with
    explode(), however, it may be less confusing
    to use the documented order of arguments.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
glue

     

      
       Defaults to an empty string.
      
     

    
    
     
pieces

     

      
       The array of strings to
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string containing a string representation of all the array
   elements in the same order, with the glue string between each element.
  
 " 
"in_array", "Checks if a value exists in an array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( mixed $needle
   , array $haystack
   [, bool $strict = FALSE
  ] )

  
   Searches haystack for needle using loose comparison 
   unless strict is set.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
needle

     

      
       The searched value.
      
      Note: 
       
        If needle is a string, the comparison is done
        in a case-sensitive manner.
       
      
     

    
    
     
haystack

     

      
       The array.
      
     

    
    
     
strict

     

      
       If the third parameter strict is set to TRUE
       then the) function will also check the
       types of the
       needle in the haystack.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if needle is found in the array,
   FALSE otherwise.
  
 " 
"inet_ntop", "Converts a packed internet address to a human readable representation
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $in_addr
   )

  
   This function converts a 32bit IPv4, or 128bit IPv6 address (if PHP
   was built with IPv6 support enabled) into an address family appropriate
   string representation.  
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
in_addr

     

      
       A 32bit IPv4, or 128bit IPv6 address.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string representation of the address or FALSE on failure.
  
 " 
"inet_pton", "Converts a human readable IP address to its packed in_addr representation
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $address
   )

  
   This function converts a human readable IPv4 or IPv6 address (if PHP
   was built with IPv6 support enabled) into an address family appropriate
   32bit or 128bit binary structure.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
address

     

      
       A human readable IPv4 or IPv6 address.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the in_addr representation of the given
   address, or FALSE if a syntactically invalid
   address is given (for example, an IPv4 address
   without dots or an IPv6 address without colons).
  
 " 
"ini_alter", "Alias of ini_set()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  ini_set().
  
 " 
"ini_get", "Gets the value of a configuration option
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $varname
   )

  
   Returns the value of the configuration option on success.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
varname

     

      
       The configuration option name.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the value of the configuration option as a string on success, or an
   empty string for null values. Returns FALSE if the
   configuration option doesn't exist.
  
 " 
"ini_get_all", "Gets all configuration options
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ([ string $extension
   [, bool $details = true
  ]] )

  
   Returns all the registered configuration options.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
extension

     

      
       An optional extension name. If set, the function return only options
       specific for that extension.
      
     

    
    
     
details

     

      
       Retrieve details settings or only the current value for each setting.
       Default is TRUE (retrieve details).
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an associative array with directive name as the array key.
  
  
   When details is TRUE (default) the array will
   contain global_value (set in
   php.ini), local_value (perhaps set with
   ini_set() or .htaccess), and
   access (the access level).
  
  
   When details is FALSE the value will be the
   current value of the option.
  
  
   See the manual section
   for information on what access levels mean.
  
  Note: 
   
    It's possible for a directive to have multiple access levels, which is
    why access shows the appropriate bitmask values.
   
  
 " 
"ini_restore", "Restores the value of a configuration option
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( string $varname
   )

  
   Restores a given configuration option to its original value.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
varname

     

      
       The configuration option name.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"ini_set", "Sets the value of a configuration option
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $varname
   , string $newvalue
   )

  
   Sets the value of the given configuration option.  The configuration option
   will keep this new value during the script's execution, and will be restored
   at the script's ending.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
varname

     

      
      
      
       Not all the available options can be changed using
      ). There is a list of all available options
       in the appendix.
      
     

    
    
     
newvalue

     

      
       The new value for the option.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the old value on success, FALSE on failure.
  
 " 
"intdiv", "Integer division
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
    int     ( int $dividend
    , int $divisor
    )

  
   Returns the integer quotient of the division of dividend by divisor.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
dividend

    

     
      Number to be divided.
     
    

   
   
    
divisor

    

     
      Number which divides the dividend.
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The integer quotient of the division of dividend by divisor.
  
 " 
"interface_exists", "Checks if the interface has been defined
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $interface_name
   [, bool $autoload = true
  ] )

  
   Checks if the given interface has been defined.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
interface_name

     

      
       The interface name
      
     

    
    
     
autoload

     

      
       Whether to call __autoload or not by default.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the interface given by 
   interface_name has been defined, FALSE otherwise.
  
 " 
"intl_error_name", "Get symbolic name for a given error code
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string 
      ( int $error_code
   )

  
   Return ICU error code name.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
error_code

     

      
       ICU error code.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The returned string will be the same as the name of the error code
   constant.
  
 " 
"intl_get_error_code", "Get the last error code
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int 
      ( void
   )

  
   Useful to handle errors occurred in static methods when there's no object to
   get error code from.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Error code returned by the last API function call.
  
 " 
"intl_get_error_message", "Get description of the last error
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string 
      ( void
   )

  
   Get error message from last internationalization function called.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre> of an error occurred in the last API function call.
  
 " 
"intl_is_failure", "Check whether the given error code indicates failure
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool 
      ( int $error_code
   )

  
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
error_code

     

      
       is a value that returned by functions:
       intl_get_error_code(),
       collator_get_error_code() .
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   TRUE if it the code indicates some failure, and FALSE
   in case of success or a warning.
  
 " 
"intval", "Get the integer value of a variable
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( mixed $var
   [, int $base = 10
  ] )

  
   Returns the integer value of var,
   using the specified base for the conversion 
   (the default is base 10).) should not be used
   on objects, as doing so will emit an E_NOTICE level
   error and return 1.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
var

     

      
       The scalar value being converted to an integer
      
     

    
    
     
base

     

      
       The base for the conversion
      
      Note: 
       
        If base is 0, the base used is determined
        by the format of var:
        
          
           if string includes a &quot;0x&quot; (or &quot;0X&quot;) prefix, the base is taken
           as 16 (hex); otherwise,
          
         
         
          
           if string starts with &quot;0&quot;, the base is taken as 8 (octal);
           otherwise,
          
         
         
          
           the base is taken as 10 (decimal).
          
         
        
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The integer value of var on success, or 0 on
   failure. Empty arrays return 0, non-empty arrays return 1.
  
  
   The maximum value depends on the system. 32 bit systems have a 
   maximum signed integer range of -2147483648 to 2147483647. So for example 
   on such a system,'1000000000000') will return 
   2147483647. The maximum signed integer value for 64 bit systems is 
   9223372036854775807.
  
  
   Strings will most likely return 0 although this depends on the 
   leftmost characters of the string. The common rules of 
   integer casting 
   apply.
  
 " 
"ip2long", "Converts a string containing an (IPv4) Internet Protocol dotted address into a long integer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $ip_address
   )

  
   The function) generates an long integer
   representation of IPv4 Internet network address from its Internet
   standard format (dotted string) representation. 
  
  
  ) will also work with non-complete IP
   addresses. Read » http:/<BR>ublibn.boulder.ibm.com/doc_link/en_US/a_doc_lib/libs/commtrf2/inet_addr.htm
   for more info.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ip_address

     

      
       A standard format address.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the long integer or FALSE if ip_address
   is invalid.
  
 " 
"iptcembed", "Embeds binary IPTC data into a JPEG image
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( string $iptcdata
   , string $jpeg_file_name
   [, int $spool = 0
  ] )

  
   Embeds binary IPTC data into a JPEG image.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
iptcdata

     

      
       The data to be written.
      
     

    
    
     
jpeg_file_name

     

      
       Path to the JPEG image.
      
     

    
    
     
spool

     

      
       Spool flag. If the spool flag is less than 2 then the JPEG will be 
       returned as a string. Otherwise the JPEG will be printed to STDOUT.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   If spool is less than 2, the JPEG will be returned,
    or FALSE on failure. Otherwise returns TRUE on success
    or FALSE on failure.
  
 " 
"iptcparse", "Parse a binary IPTC block into single tags.
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $iptcblock
   )

  
   Parses an » IPTC block into its single tags.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
iptcblock

     

      
       A binary IPTC block.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array using the tagmarker as an index and the value as the
   value. It returns FALSE on error or if no IPTC data was found. 
  
 " 
"is_a", "Checks if the object is of this class or has this class as one of its parents
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( object $object
   , string $class_name
   [, bool $allow_string = FALSE
  ] )

  
   Checks if the given object is of this class or has
   this class as one of its parents.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
object

     

      
       The tested object
      
     

    
    
     
class_name

     

      
       The class name
      
     

    
    
     
allow_string

     

      
       If this parameter set to FALSE, string class name as object
       is not allowed. This also prevents from calling autoloader if the class doesn't exist.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the object is of this class or has this class as one of
   its parents, FALSE otherwise.
  
 " 
"is_array", "Finds whether a variable is an array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    bool     ( mixed $var
    )

  
   Finds whether the given variable is an array.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
var

     

      
       The variable being evaluated.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if var is an array,
   FALSE otherwise.
  
 " 
"is_bool", "
   Finds out whether a variable is a boolean
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( mixed $var
   )

  
   Finds whether the given variable is a boolean.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
var

     

      
       The variable being evaluated.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if var is a boolean,
   FALSE otherwise.
  
 " 
"is_callable", "
   Verify that the contents of a variable can be called as a function
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( mixed $var
   [, bool $syntax_only = false
   [, string &amp;$callable_name
  ]] )

  
   Verify that the contents of a variable can be called as a function.
   This can check that a simple variable contains the name of a valid
   function, or that an array contains a properly encoded object and
   function name.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
var

     

      
       The value to check
      
     

    
    
     
syntax_only

     

      
       If set to TRUE the function only verifies that
       name might be a function or method. It will only
       reject simple variables that are not strings, or an array that does
       not have a valid structure to be used as a callback. The valid ones
       are supposed to have only 2 entries, the first of which is an object
       or a string, and the second a string.
      
     

    
    
     
callable_name

     

      
       Receives the &quot;callable name&quot;.  In the example below it is
       &quot;someClass::someMethod&quot;.  Note, however, that despite the implication
       that someClass::SomeMethod() is a callable static method, this is not
       the case.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if var is callable, FALSE 
   otherwise.
  
 " 
"is_dir", "Tells whether the filename is a directory
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $filename
   )

  
   Tells whether the given filename is a directory.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the file. If filename is a relative
       filename, it will be checked relative to the current working
       directory. If filename is a symbolic or hard link 
       then the link will be resolved and checked. If you have enabled safe mode,
       or open_basedir further
       restrictions may apply.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the filename exists and is a directory, FALSE
   otherwise.
  
 " 
"is_double", "Alias of is_float()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   is_float().
  
 " 
"is_executable", "Tells whether the filename is executable
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $filename
   )

  
   Tells whether the filename is executable.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the file.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the filename exists and is executable, or FALSE on
   error.
  
 " 
"is_file", "Tells whether the filename is a regular file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $filename
   )

  
   Tells whether the given file is a regular file.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the file.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the filename exists and is a regular file, FALSE
   otherwise.
  
  Note: 
    Because PHP's integer type is signed and many platforms use 32bit integers,
    some filesystem functions may return unexpected results for files which
    are larger than 2GB.
   
 " 
"is_finite", "Finds whether a value is a legal finite number
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    bool     ( float $val
    )

  
   Checks whether val is a legal finite
   on this platform.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
val

     

      
       The value to check
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   TRUE if val is a legal finite
   number within the allowed range for a PHP float on this platform,
   else FALSE.
  
 " 
"is_float", "Finds whether the type of a variable is float
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    bool     ( mixed $var
    )

  
   Finds whether the type of the given variable is float.
  
  Note: 
   
    To test if a variable is a number or a numeric string (such as form
    input, which is always a string), you must use
    is_numeric().
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
var

     

      
       The variable being evaluated.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if var is a float,
   FALSE otherwise.
  
 " 
"is_infinite", "Finds whether a value is infinite
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    bool     ( float $val
    )

  
   Returns TRUE if val is infinite (positive or 
   negative), like the result of log(0) or any value too 
   big to fit into a float on this platform.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
val

     

      
       The value to check
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   TRUE if val is infinite, else FALSE.
  
 " 
"is_int", "Find whether the type of a variable is integer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    bool     ( mixed $var
    )

  
   Finds whether the type of the given variable is integer.
  
  Note: 
   
    To test if a variable is a number or a numeric string (such as form
    input, which is always a string), you must use
    is_numeric().
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
var

     

      
       The variable being evaluated.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if var is an integer,
   FALSE otherwise.
  
 " 
"is_integer", "Alias of is_int()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   is_int().
  
 " 
"is_link", "Tells whether the filename is a symbolic link
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $filename
   )

  
   Tells whether the given file is a symbolic link.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the file.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the filename exists and is a symbolic link, FALSE
   otherwise.
  
 " 
"is_long", "Alias of is_int()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   is_int().
  
 " 
"is_nan", "Finds whether a value is not a number
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( float $val
   )

  
   Checks whether val is 'not a number', 
   like the result of acos(1.01).
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
val

     

      
       The value to check
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if val is 'not a number',
   else FALSE.
  
 " 
"is_null", "
   Finds whether a variable is NULL
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( mixed $var
   )

  
   Finds whether the given variable is NULL.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
var

     

      
       The variable being evaluated.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if var is null, FALSE
   otherwise.
  
 " 
"is_numeric", "
   Finds whether a variable is a number or a numeric string
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( mixed $var
   )

  
   Finds whether the given variable is numeric. Numeric strings consist of optional
   sign, any number of digits, optional decimal part and optional exponential part.
   Thus +0123.45e6 is a valid numeric value. Hexadecimal (e.g.
   0xf4c3b00c), Binary (e.g. 0b10100111001),
   Octal (e.g. 0777) notation is not allowed.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
var

     

      
       The variable being evaluated.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if var is a number or a numeric
   string, FALSE otherwise.
  
 " 
"is_object", "Finds whether a variable is an object
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    bool     ( mixed $var
    )

  
   Finds whether the given variable is an object.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
var

     

      
       The variable being evaluated.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if var is an object,
   FALSE otherwise.
  
 " 
"is_readable", "Tells whether a file exists and is readable
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $filename
   )

  
   Tells whether a file exists and is readable.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the file.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the file or directory specified by
   filename exists and is readable, FALSE otherwise.
  
 " 
"is_real", "Alias of is_float()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   is_float().
  
 " 
"is_resource", "
   Finds whether a variable is a resource
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( mixed $var
   )

  
   Finds whether the given variable is a resource.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
var

     

      
       The variable being evaluated.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if var is a resource,
   FALSE otherwise.
  
 " 
"is_scalar", "
   Finds whether a variable is a scalar
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( mixed $var
   )

  
   Finds whether the given variable is a scalar.
  
  
   Scalar variables are those containing an integer, 
   float, string or boolean.  
   Types array, object and resource 
   are not scalar.
  
  Note: 
   
   ) does not consider resource
    type values to be scalar as resources are abstract datatypes 
    which are currently based on integers. This implementation detail should 
    not be relied upon, as it may change.
   
  
  Note: 
   
   ) does not consider NULL to be scalar.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
var

     

      
       The variable being evaluated.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if var is a scalar, FALSE
   otherwise.
  
 " 
"is_soap_fault", "Checks if a SOAP call has failed
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( mixed $object
   )

  
   This function is useful to check if the SOAP call failed, but
   without using exceptions. To use it, create a 
   SoapClient object with the exceptions
   option set to zero or FALSE.
   In this case, the SOAP method will return a special 
   SoapFault object which encapsulates the fault 
   details (faultcode, faultstring, faultactor and faultdetails).
  
  
   If exceptions is not set then SOAP call will throw
   an exception on error.
  ) checks if the given
   parameter is a SoapFault object.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
object

     

      
       The object to test.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  
   This will return TRUE on error, and FALSE otherwise.
  
 " 
"is_string", "Find whether the type of a variable is string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( mixed $var
   )

  
   Finds whether the type given variable is string.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
var

     

      
       The variable being evaluated.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if var is of type string,
   FALSE otherwise.
  
 " 
"is_subclass_of", "Checks if the object has this class as one of its parents or implements it.
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( mixed $object
   , string $class_name
   [, bool $allow_string = TRUE
  ] )

  
   Checks if the given object has the class
   class_name as one of its parents or implements it.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
object

     

      
       A class name or an object instance. No error is generated if the class does not exist.
      
     

    
    
     
class_name

     

      
       The class name
      
     

    
    
     
allow_string

     

      
       If this parameter set to false, string class name as object
       is not allowed. This also prevents from calling autoloader if the class doesn't exist.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function returns TRUE if the object object,
   belongs to a class which is a subclass of
   class_name, FALSE otherwise.
  
 " 
"is_uploaded_file", "Tells whether the file was uploaded via HTTP POST
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $filename
   )

  
   Returns TRUE if the file named by filename was
   uploaded via HTTP POST. This is useful to help ensure that a
   malicious user hasn't tried to trick the script into working on
   files upon which it should not be working--for instance,
   /etc<BR>asswd.
  
  
   This sort of check is especially important if there is any chance
   that anything done with uploaded files could reveal their
   contents to the user, or even to other users on the same
   system.
  
  
   For proper working, the function) needs
   an argument like $_FILES['userfile']['tmp_name'], - the name of the uploaded
   file on the client's machine $_FILES['userfile']['name'] does not work.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       The filename being checked.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"is_writable", "Tells whether the filename is writable
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $filename
   )

  
   Returns TRUE if the filename exists and is
   writable.  The filename argument may be a directory name allowing you
   to check if a directory is writable.
  
  
   Keep in mind that PHP may be accessing the file as the user id
   that the web server runs as (often 'nobody'). Safe mode
   limitations are not taken into account.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       The filename being checked.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the filename exists and is
   writable.  
  
 " 
"is_writeable", "Alias of is_writable()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   is_writable().
  
 " 
"iterator_apply", "Call a function for every element in an iterator
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( Traversable $iterator
   , callable $function
   [, array $args
  ] )

  
   Calls a function for every element in an iterator.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
iterator

     

      
       The class to iterate over.
      
     

    
    
     
function

     

      
       The callback function to call on every element.
       Note: 
        
         The function must return TRUE in order to
         continue iterating over the iterator.
        
       
      
     

    
    
     
args

     

      
       Arguments to pass to the callback function.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the iteration count.
  
 " 
"iterator_count", "Count the elements in an iterator
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( Traversable $iterator
   )

  
   Count the elements in an iterator.
  ) is not guaranteed to retain the current
   position of the iterator.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
iterator

     

      
       The iterator being counted.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The number of elements in iterator.
  
 " 
"iterator_to_array", "Copy the iterator into an array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( Traversable $iterator
   [, bool $use_keys = true
  ] )

  
   Copy the elements of an iterator into an array.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
iterator

     

      
       The iterator being copied.
      
     

    
    
     
use_keys

     

      
       Whether to use the iterator element keys as index.
      
      
       In PHP 5.5 and later, if a key is an array or
       object, a warning will be generated. NULL keys will be
       converted to an empty string, double keys will be
       truncated to their integer counterpart,
       resource keys will generate a warning and be converted to
       their resource ID, and boolean keys will be converted to
       integers.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   An array containing the elements of the iterator.
  
 " 
"jddayofweek", "Returns the day of the week
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( int $julianday
   [, int $mode = CAL_DOW_DAYNO
  ] )

  
   Returns the day of the week.  Can return a string or an integer
   depending on the mode.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
julianday

     

      
       A julian day number as integer
      
     

    
    
     
mode

     

      Calendar week modes
       
        Mode
          Meaning
         0 (Default) 
          
           Return the day number as an int (0=Sunday, 1=Monday, etc)
          
         1 
          
           Returns string containing the day of week
           (English-Gregorian)
          
         2 
          
           Return a string containing the abbreviated day of week
           (English-Gregorian)
          
         

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The gregorian weekday as either an integer or string.
  
 " 
"jdmonthname", "Returns a month name
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( int $julianday
   , int $mode
   )

  
   Returns a string containing a month name.
   mode tells this function which calendar to
   convert the Julian Day Count to, and what type of month names are
   to be returned.
   Calendar modes
    
     Mode
       Meaning
       Values
      0
       Gregorian - abbreviated
       Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec
      1
       Gregorian
       January, February, March, April, May, June, July, August, September, October, November, December
      2
       Julian - abbreviated
       Jan, Feb, Mar, Apr, May, Jun, Jul, Aug, Sep, Oct, Nov, Dec
      3
       Julian
       January, February, March, April, May, June, July, August, September, October, November, December
      4
       Jewish
       Tishri, Heshvan, Kislev, Tevet, Shevat, AdarI, AdarII, Nisan, Iyyar, Sivan, Tammuz, Av, Elul
      5
       French Republican
       Vendemiaire, Brumaire, Frimaire, Nivose, Pluviose, Ventose, Germinal, Floreal, Prairial, Messidor, Thermidor, Fructidor, Extra
      
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
jday

     

      
       The Julian Day to operate on
      
     

    
    
     
calendar

     

      
       The calendar to take the month name from
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The month name for the given Julian Day and calendar.
  
 " 
"jdtofrench", "Converts a Julian Day Count to the French Republican Calendar
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( int $juliandaycount
   )

  
   Converts a Julian Day Count to the French Republican Calendar.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
julianday

     

      
       A julian day number as integer
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The french revolution date as a string in the form &quot;month/day/year&quot;
  
 " 
"jdtogregorian", "Converts Julian Day Count to Gregorian date
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( int $julianday
   )

  
   Converts Julian Day Count to a string containing the Gregorian
   date in the format of &quot;month/day/year&quot;.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
julianday

     

      
       A julian day number as integer
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The gregorian date as a string in the form &quot;month/day/year&quot;
  
 " 
"jdtojewish", "Converts a Julian day count to a Jewish calendar date
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( int $juliandaycount
   [, bool $hebrew = false
   [, int $fl = 0
  ]] )

  
   Converts a Julian Day Count to the Jewish Calendar.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
julianday

     

      
       A julian day number as integer
      
     

    
    
     
hebrew

     

      
       If the hebrew parameter is set to TRUE, the
       fl parameter is used for Hebrew, string based,
       output format.  
      
     

    
    
     
fl

     

      
       The available formats are:  
       CAL_JEWISH_ADD_ALAFIM_GERESH,
       CAL_JEWISH_ADD_ALAFIM,
       CAL_JEWISH_ADD_GERESHAYIM.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The jewish date as a string in the form &quot;month/day/year&quot;
  
 " 
"jdtojulian", "Converts a Julian Day Count to a Julian Calendar Date
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( int $julianday
   )

  
   Converts Julian Day Count to a string containing the Julian
   Calendar Date in the format of &quot;month/day/year&quot;.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
julianday

     

      
       A julian day number as integer
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The julian date as a string in the form &quot;month/day/year&quot;
  
 " 
"jdtounix", "Convert Julian Day to Unix timestamp
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( int $jday
   )

  
   This function will return a Unix timestamp corresponding to the
   Julian Day given in jday or FALSE if
   jday is not inside the Unix epoch
   (Gregorian years between 1970 and 2037 or 2440588 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
jday

     

      
       A julian day number between 2440588 and 2465342.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The unix timestamp for the start of the given julian day.
  
 " 
"jewishtojd", "Converts a date in the Jewish Calendar to Julian Day Count
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( int $month
   , int $day
   , int $year
   )

  
   Although this function can handle dates all the way back to the year 1
   (3761 B.C.), such use may not be meaningful.  The Jewish calendar has
   been in use for several thousand years, but in the early days there was
   no formula to determine the start of a month. A new month was started
   when the new moon was first observed.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
month

     

      
       The month as a number from 1 to 13
      
     

    
    
     
day

     

      
       The day as a number from 1 to 30
      
     

    
    
     
year

     

      
       The year as a number between 1 and 9999
      
     

      
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The julian day for the given jewish date as an integer.
  
 " 
"join", "Alias of implode()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   implode().
  
 " 
"jpeg2wbmp", "Convert JPEG image file to WBMP image file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $jpegname
   , string $wbmpname
   , int $dest_height
   , int $dest_width
   , int $threshold
   )

  
   Converts a JPEG file into a WBMP file.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
jpegname

     

      
       Path to JPEG file.
      
     

    
    
     
wbmpname

     

      
       Path to destination WBMP file.
      
     

    
    
     
dest_height

     

      
       Destination image height.
      
     

    
    
     
dest_width

     

      
       Destination image width.
      
     

    
    
     
threshold

     

      
       Threshold value, between 0 and 8 (inclusive).
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"json_decode", "Decodes a JSON string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( string $json
   [, bool $assoc = false
   [, int $depth = 512
   [, int $options = 0
  ]]] )

  
   Takes a JSON encoded string and converts it into a PHP variable.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
json

     

      
       The json string being decoded.
      
      
       This function only works with UTF-8 encoded strings.
      
      
 Note: 
  
   PHP implements a superset of JSON as specified in the original
   » RFC 4627 - it will also encode and
   decode scalar types and NULL. RFC 4627 only supports these values when
   they are nested inside an array or an object.
  
  
   Although this superset is consistent with the expanded definition of &quot;JSON
   text&quot; in the newer » RFC 7159 (which
   aims to supersede RFC 4627) and
   » ECMA-404, this may cause
   interoperability issues with older JSON parsers that adhere strictly to RFC
   4627 when encoding a single scalar value.
  
 

     

    
    
     
assoc

     

      
       When TRUE, returned objects will be converted into
       associative arrays.
      
     

    
    
     
depth

     

      
       User specified recursion depth.
      
     

    
    
     
options

     

      
       Bitmask of JSON decode options.  Currently only
       JSON_BIGINT_AS_STRING
       is supported (default is to cast large integers as floats)
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the value encoded in json in appropriate
   PHP type. Values true, false and
   null are returned as TRUE, FALSE and NULL
   respectively. NULL is returned if the json cannot
   be decoded or if the encoded data is deeper than the recursion limit.
  
 " 
"json_encode", "Returns the JSON representation of a value
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( mixed $value
   [, int $options = 0
   [, int $depth = 512
  ]] )

  
   Returns a string containing the JSON representation of 
   value.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
value

     

      
       The value being encoded. Can be any type except
       a resource.
      
      
       All string data must be UTF-8 encoded.
      
      
 Note: 
  
   PHP implements a superset of JSON as specified in the original
   » RFC 4627 - it will also encode and
   decode scalar types and NULL. RFC 4627 only supports these values when
   they are nested inside an array or an object.
  
  
   Although this superset is consistent with the expanded definition of &quot;JSON
   text&quot; in the newer » RFC 7159 (which
   aims to supersede RFC 4627) and
   » ECMA-404, this may cause
   interoperability issues with older JSON parsers that adhere strictly to RFC
   4627 when encoding a single scalar value.
  
 

     

    
    
     
options

     

      
       Bitmask consisting of JSON_HEX_QUOT,
       JSON_HEX_TAG,
       JSON_HEX_AMP,
       JSON_HEX_APOS,
       JSON_NUMERIC_CHECK,
       JSON_PRETTY_PRINT,
       JSON_UNESCAPED_SLASHES,
       JSON_FORCE_OBJECT,
       JSON_PRESERVE_ZERO_FRACTION,
       JSON_UNESCAPED_UNICODE,
       JSON_PARTIAL_OUTPUT_ON_ERROR. The behaviour of these
       constants is described on the
       JSON constants page.
      
     

    
    
     
depth

     

      
       Set the maximum depth. Must be greater than zero.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a JSON encoded string on success  or FALSE on failure.
  
 " 
"json_last_error", "Returns the last error occurred
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   Returns the last error (if any) occurred during the last JSON encoding/decoding.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  This function has no parameters.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an integer, the value can be one of the following 
   constants: 
  
  JSON error codes
   
    Constant
      Meaning
      Availability
     JSON_ERROR_NONE
      No error has occurred
       
     JSON_ERROR_DEPTH
      The maximum stack depth has been exceeded
       
     JSON_ERROR_STATE_MISMATCH
      Invalid or malformed JSON
       
     JSON_ERROR_CTRL_CHAR
      Control character error, possibly incorrectly encoded
       
     JSON_ERROR_SYNTAX
      Syntax error
       
     JSON_ERROR_UTF8
      Malformed UTF-8 characters, possibly incorrectly encoded
      PHP 5.3.3
     JSON_ERROR_RECURSION
      One or more recursive references in the value to be encoded
      PHP 5.5.0
     JSON_ERROR_INF_OR_NAN
      
       One or more
       NAN
       or INF
       values in the value to be encoded
      
      PHP 5.5.0
     JSON_ERROR_UNSUPPORTED_TYPE
      A value of a type that cannot be encoded was given
      PHP 5.5.0
     " 
"json_last_error_msg", "Returns the error string of the last json_encode() or json_decode() call
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( void
   )

  

  

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  This function has no parameters.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the error message on success, &quot;No Error&quot; if no
   error has occurred,  or FALSE on failure.
  
 " 
"juliantojd", "Converts a Julian Calendar date to Julian Day Count
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( int $month
   , int $day
   , int $year
   )

  
   Valid Range for Julian Calendar 4713 B.C. to 9999 A.D.
  
  
   Although this function can handle dates all the way back to 4713
   B.C., such use may not be meaningful. The calendar was created in
   46 B.C., but the details did not stabilize until at least 8 A.D.,
   and perhaps as late at the 4th century. Also, the beginning of a
   year varied from one culture to another - not all accepted
   January as the first month.
  
  Caution
   
    Remember, the current calendar system being used worldwide is the
    Gregorian calendar.  gregoriantojd() can be used to
    convert such dates to their Julian Day count.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
month

     

      
       The month as a number from 1 (for January) to 12 (for December)
      
     

    
    
     
day

     

      
       The day as a number from 1 to 31
      
     

    
    
     
year

     

      
       The year as a number between -4713 and 9999
      
     

      
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The julian day for the given julian date as an integer.
  
 " 
"key", "Fetch afrom an array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( array &amp;$array
   )

  
  ) returns the index element of the current array
   position.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The array.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The) function simply returns the
  of the array element that's currently being pointed to by the
   internal pointer.  It does not move the pointer in any way.  If the
   internal pointer points beyond the end of the elements list or the array is 
   empty,) returns NULL.
  
 " 
"key_exists", "Alias of array_NAME()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   array_NAME().
  
 " 
"krsort", "Sort an array by key in reverse order
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( array &amp;$array
   [, int $sort_flags = SORT_REGULAR
  ] )

  
   Sorts an array by key in reverse order, maintaining key to data
   correlations. This is useful mainly for associative arrays.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The input array.
      
     

    
    
     
sort_flags

     

      
       You may modify the behavior of the sort using the optional parameter
       sort_flags, for details see
       sort().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"ksort", "Sort an array by key
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( array &amp;$array
   [, int $sort_flags = SORT_REGULAR
  ] )

  
   Sorts an array by key, maintaining key to data correlations. This is
   useful mainly for associative arrays.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The input array.
      
     

    
    
     
sort_flags

     

      
       You may modify the behavior of the sort using the optional
       parameter sort_flags, for details
       see sort().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"lcfirst", "Make a string's first character lowercase
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   )

  
   Returns a string with the first character of
   str , lowercased if that character is
   alphabetic.
  
  
   Note that 'alphabetic' is determined by the current locale. For
   instance, in the default &quot;C&quot; locale characters such as umlaut-a
   (ä) will not be converted.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The input string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the resulting string.
  
 " 
"lcg_value", "Combined linear congruential generator
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    float     ( void
    )

  
  ) returns a pseudo random number in
   the range of (0, 1).  The function combines two CGs with periods
   of 2^31 - 85 and 2^31 - 249. The period of this function is equal
   to the product of both primes.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   A pseudo random float value in the range of (0, 1)
  
 " 
"lchgrp", "Changes group ownership of symlink
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $filename
   , mixed $group
   )

  
   Attempts to change the group of the symlink filename
   to group.
  
  
   Only the superuser may change the group of a symlink arbitrarily; other
   users may change the group of a symlink to any group of which that user is
   a member.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the symlink.
      
     

    
    
     
group

     

      
       The group specified by name or number.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"lchown", "Changes user ownership of symlink
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $filename
   , mixed $user
   )

  
   Attempts to change the owner of the symlink filename
   to user user.
  
  
   Only the superuser may change the owner of a symlink.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the file.
      
     

    
    
     
user

     

      
       User name or number.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"ldap_add", "Add entries to LDAP directory
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $link_identifier
   , string $dn
   , array $entry
   )

  
   Add entries in the LDAP directory. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link_identifier

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
    
     
dn

     

      
       The distinguished name of an LDAP entity.
      
     

    
    
     
entry

     

      
       An array that specifies the information about the entry. The values in
       the entries are indexed by individual attributes.
       In case of multiple values for an attribute, they are indexed using
       integers starting with 0.
       
        
     



        

       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"ldap_bind", "Bind to LDAP directory
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $link_identifier
   [, string $bind_rdn = NULL
   [, string $bind_password = NULL
  ]] )

  
   Binds to the LDAP directory with specified RDN and password. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link_identifier

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
    
     
bind_rdn

     

      
      
     

    
    
     
bind_password

     

      
      
     

    
   
   If bind_rdn and bind_password
   are not specified, an anonymous bind is attempted.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"ldap_close", "Alias of ldap_unbind()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  ldap_unbind().    
  
 " 
"ldap_compare", "Compare value of attribute found in entry specified with DN
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( resource $link_identifier
   , string $dn
   , string $attribute
   , string $value
   )

  
   Compare value of attribute
   with value of same attribute in an LDAP directory entry.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link_identifier

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
    
     
dn

     

      
       The distinguished name of an LDAP entity.
      
     

    
    
     
attribute

     

      
       The attribute name.
      
     

    
    
     
value

     

      
       The compared value.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if value matches otherwise returns
   FALSE. Returns -1 on error.
  
 " 
"ldap_connect", "Connect to an LDAP server
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ([ string $host = NULL
   [, int $port = 389
  ]] )

  
   Creates an LDAP link identifier and checks whether the given
   host and port are plausible.
  
  
   Note: This function does not open a connection.
   It checks whether the given parameters are plausibe and can be used
   to open a connection as soon as one is needed.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
host

     

      
       This field supports using a hostname or, with OpenLDAP 2.x.x and
       later, a full LDAP URI of the form ldap://hostname:port
       or ldaps://hostname:port for SSL encryption.
      
      
       You can also provide multiple LDAP-URIs separated by a space as one string
      
      
       Note that hostname:port is not a supported LDAP URI as the schema is missing.
      
     

    
    
     
port

     

      
       The port to connect to. Not used when using LDAP URIs.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a positive LDAP link identifier when the provided hostname<BR>ort combination or LDAP URI
   seems plausible. It's a syntactic check of the provided parameters but the server(s) will not
   be contacted! If the syntactic check fails it returns FALSE.
   When OpenLDAP 2.x.x is used,) will always
   return a resource as it does not actually connect but just
   initializes the connecting parameters.  The actual connect happens with
   the next calls to ldap_* funcs, usually with
   ldap_bind().
  
  
   If no arguments are specified then the link identifier of the already
   opened link will be returned.
  
 " 
"ldap_control_paged_result", "Send LDAP pagination control
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $link
   , int $pagesize
   [, bool $iscritical = false
   [, string $cookie = &quot;&quot;
  ]] )

  
   Enable LDAP pagination by sending the pagination control (page size, cookie...).
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
    
     
pagesize

     

      
       The number of entries by page.
      
     

    
    
     
iscritical

     

      
       Indicates whether the pagination is critical or not. 
       If true and if the server doesn't support pagination, the search
       will return no result.
      
     

    
    
     
cookie

     

      
       An opaque structure sent by the server 
       (NAME_response()).
      
     

    
    
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"ldap_control_paged_result_response", "Retrieve the LDAP pagination cookie
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $link
   , resource $result
   [, string &amp;$cookie
   [, int &amp;$estimated
  ]] )

  
   Retrieve the pagination information send by the server.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
    
     
result

     

      
      
     

    
    
     
cookie

     

      
       An opaque structure sent by the server.
      
     

    
    
     
estimated

     

      
       The estimated number of entries to retrieve.
      
     

    
    
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"ldap_count_entries", "Count the number of entries in a search
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $link_identifier
   , resource $result_identifier
   )

  
   Returns the number of entries stored in the result of previous search
   operations.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link_identifier

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
    
     
result_identifier

     

      
       The internal LDAP result.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns number of entries in the result or FALSE on error.
  
 " 
"ldap_delete", "Delete an entry from a directory
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $link_identifier
   , string $dn
   )

  
   Deletes a particular entry in LDAP directory.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link_identifier

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
    
     
dn

     

      
       The distinguished name of an LDAP entity.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"ldap_dn2ufn", "Convert DN to User Friendly Naming format
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $dn
   )

  
   Turns the specified dn, into a more user-friendly
   form, stripping off type names.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
dn

     

      
       The distinguished name of an LDAP entity.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the user friendly name.
  
 " 
"ldap_err2str", "Convert LDAP error number into string error message
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( int $errno
   )

  
   Returns the string error message explaining the error number
   errno. While LDAP errno numbers are standardized,
   different libraries return different or even localized textual error
   messages. Never check for a specific error message text, but always use an
   error number to check.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
errno

     

      
       The error number.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the error message, as a string.
  
 " 
"ldap_errno", "Return the LDAP error number of the last LDAP command
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $link_identifier
   )

  
   Returns the standardized error number returned by the last LDAP command.
   This number can be converted into a textual error message using
   ldap_err2str().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link_identifier

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Return the LDAP error number of the last LDAP command for this
   link.
  
 " 
"ldap_error", "Return the LDAP error message of the last LDAP command
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $link_identifier
   )

  
   Returns the string error message explaining the error generated by the
   last LDAP command for the given link_identifier.
   While LDAP errno numbers are standardized, different libraries return
   different or even localized textual error messages. Never check for a
   specific error message text, but always use an error number to check.
  
  
   Unless you lower your warning level in your php.ini sufficiently or
   prefix your LDAP commands with @ (at) characters to
   suppress warning output, the errors generated will also show up in your
   HTML output.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link_identifier

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns string error message.
  
 " 
"ldap_escape", "Escape a string for use in an LDAP filter or DN
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $value
   [, string $ignore
   [, int $flags
  ]] )

  
   Escapes value for use in the context implied by
   flags.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
value

     

      
       The value to escape.
      
     

    
    
     
ignore

     

      
       Characters to ignore when escaping.
      
     

    
    
     
flags

     

      
       The context the escaped string will be used in:
       LDAP_ESCAPE_FILTER for filters to be used with
       ldap_search(), or
       LDAP_ESCAPE_DN for DNs.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the escaped string.
  
 " 
"ldap_explode_dn", "Splits DN into its component parts
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $dn
   , int $with_attrib
   )

  
   Splits the DN returned by ldap_get_dn() and breaks it
   up into its component parts. Each part is known as Relative Distinguished
   Name, or RDN.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
dn

     

      
       The distinguished name of an LDAP entity.
      
     

    
    
     
with_attrib

     

      
       Used to request if the RDNs are returned with only values or their
       attributes as well.  To get RDNs with the attributes (i.e. in
       attribute=value format) set with_attrib to 0
       and to get only values set it to 1.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of all DN components.
   The first element in this array has count key and
   represents the number of returned values, next elements are numerically
   indexed DN components.
  
 " 
"ldap_first_attribute", "Return first attribute
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $link_identifier
   , resource $result_entry_identifier
   )

  
   Gets the first attribute in the given entry. Remaining attributes are
   retrieved by calling ldap_next_attribute() successively.
  
  
   Similar to reading entries, attributes are also read one by one from a
   particular entry.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link_identifier

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
    
     
result_entry_identifier

     

      
      
     

    
    
     
ber_identifier

     

      
       ber_identifier is the identifier to internal
       memory location pointer. It is passed by reference. The same
       ber_identifier is passed to
       ldap_next_attribute() , which modifies that
       pointer.
      
      Note: 
       
        This parameter is no longer used as this is now handled automatically
        by PHP. For backwards compatibility PHP will not throw an error if
        this parameter is passed.
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the first attribute in the entry on success and FALSE on
   error.
  
 " 
"ldap_first_entry", "Return first result id
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( resource $link_identifier
   , resource $result_identifier
   )

  
   Returns the entry identifier for first entry in the result. This entry
   identifier is then supplied to ldap_next_entry()
   routine to get successive entries from the result.
  
  
   Entries in the LDAP result are read sequentially using the
  ) and
   ldap_next_entry() functions.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link_identifier

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
    
     
result_identifier

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the result entry identifier for the first entry on success and
   FALSE on error.
  
 " 
"ldap_first_reference", "Return first reference
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( resource $link
   , resource $result
   )

  WarningThis function is
currently not documented; only its argument list is available.

 " 
"ldap_free_result", "Free result memory
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $result_identifier
   )

  
   Frees up the memory allocated internally to store the result. All result
   memory will be automatically freed when the script terminates.
  
  
   Typically all the memory allocated for the LDAP result gets freed at the
   end of the script. In case the script is making successive searches which
   return large result sets,) could be
   called to keep the runtime memory usage by the script low.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
result_identifier

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"ldap_get_attributes", "Get attributes from a search result entry
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $link_identifier
   , resource $result_entry_identifier
   )

  
   Reads attributes and values from an entry in the search result. 
  
  
   Having located a specific entry in the directory, you can find out what
   information is held for that entry by using this call. You would use this
   call for an application which &quot;browses&quot; directory entries and/or where you
   do not know the structure of the directory entries. In many applications
   you will be searching for a specific attribute such as an email address or
   a surname, and won't care what other data is held.
   
    

return_value[&quot;count&quot;] = number of attributes in the entry
return_value[0] = first attribute
return_value[n] = nth attribute

return_value[&quot;attribute&quot;][&quot;count&quot;] = number of values for attribute
return_value[&quot;attribute&quot;][0] = first value of the attribute
return_value[&quot;attribute&quot;][i] = (i+1)th value of the attribute

    

   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link_identifier

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
    
     
result_entry_identifier

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a complete entry information in a multi-dimensional array
   on success and FALSE on error.
  
 " 
"ldap_get_dn", "Get the DN of a result entry
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $link_identifier
   , resource $result_entry_identifier
   )

  
   Finds out the DN of an entry in the result.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link_identifier

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
    
     
result_entry_identifier

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the DN of the result entry and FALSE on error.
  
 " 
"ldap_get_entries", "Get all result entries
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $link_identifier
   , resource $result_identifier
   )

  
   Reads multiple entries from the given result, and then reading the
   attributes and multiple values.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link_identifier

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
    
     
result_identifier

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a complete result information in a multi-dimensional array on
   success and FALSE on error.
  
  
   The structure of the array is as follows.
   The attribute index is converted to lowercase. (Attributes are
   case-insensitive for directory servers, but not when used as
   array indices.)
   
    

return_value[&quot;count&quot;] = number of entries in the result
return_value[0] : refers to the details of first entry

return_value[i][&quot;dn&quot;] =  DN of the ith entry in the result

return_value[i][&quot;count&quot;] = number of attributes in ith entry
return_value[i][j] = NAME of the jth attribute in the ith entry in the result

return_value[i][&quot;attribute&quot;][&quot;count&quot;] = number of values for
                                        attribute in ith entry
return_value[i][&quot;attribute&quot;][j] = jth value of attribute in ith entry

    

   
  
 " 
"ldap_get_option", "Get the current value for given option
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $link_identifier
   , int $option
   , mixed &amp;$retval
   )

  
   Sets retval to the value of the specified option.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link_identifier

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
    
     
option

     

      
       The parameter option can be one of:
       Option
           Type
          LDAP_OPT_DEREF
           integer
          LDAP_OPT_SIZELIMIT
           integer
          LDAP_OPT_TIMELIMIT
           integer
          LDAP_OPT_NETWORK_TIMEOUT
           integer
          LDAP_OPT_PROTOCOL_VERSION
           integer
          LDAP_OPT_ERROR_NUMBER
           integer
          LDAP_OPT_REFERRALS
           bool
          LDAP_OPT_RESTART
           bool
          LDAP_OPT_HOST_NAME
           string
          LDAP_OPT_ERROR_STRING
           string
          LDAP_OPT_MATCHED_DN
           string
          LDAP_OPT_SERVER_CONTROLS
           array
          LDAP_OPT_CLIENT_CONTROLS
           array
          

    
    
     
retval

     

      
       This will be set to the option value.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"ldap_get_values", "Get all values from a result entry
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $link_identifier
   , resource $result_entry_identifier
   , string $attribute
   )

  
   Reads all the values of the attribute in the entry in the result.
  
  
   This call needs a result_entry_identifier,
   so needs to be preceded by one of the ldap search calls and one
   of the calls to get an individual entry.
  
  
   You application will either be hard coded to look for certain
   attributes (such as &quot;surname&quot; or &quot;mail&quot;) or you will have to use
   the ldap_get_attributes() call to work out
   what attributes exist for a given entry.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link_identifier

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
    
     
result_entry_identifier

     

      
      
     

    
    
     
attribute

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of values for the attribute on success and FALSE on
   error. The number of values can be found by indexing &quot;count&quot; in the
   resultant array. Individual values are accessed by integer index in the
   array.  The first index is 0.
  
  
   LDAP allows more than one entry for an attribute, so it can, for example,
   store a number of email addresses for one person's directory entry all
   labeled with the attribute &quot;mail&quot;
   
    
    return_value[&quot;count&quot;] = number of values for attribute
    return_value[0] = first value of attribute
    return_value[i] = ith value of attribute
    
   
  
 " 
"ldap_get_values_len", "Get all binary values from a result entry
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $link_identifier
   , resource $result_entry_identifier
   , string $attribute
   )

  
   Reads all the values of the attribute in the entry in the result.
  
  
   This function is used exactly like ldap_get_values()
   except that it handles binary data and not string data.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link_identifier

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
    
     
result_entry_identifier

     

      
      
     

    
    
     
attribute

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of values for the attribute on success and FALSE on
   error. Individual values are accessed by integer index in the array. The
   first index is 0. The number of values can be found by indexing &quot;count&quot;
   in the resultant array. 
  
 " 
"ldap_list", "Single-level search
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( resource $link_identifier
   , string $base_dn
   , string $filter
   [, array $attributes
   [, int $attrsonly
   [, int $sizelimit
   [, int $timelimit
   [, int $deref
  ]]]]] )

  
   Performs the search for a specified filter on the
   directory with the scope LDAP_SCOPE_ONELEVEL.
  
  
   LDAP_SCOPE_ONELEVEL means that the search should only
   return information that is at the level immediately below the
   base_dn given in the call.
   (Equivalent to typing &quot;ls&quot; and getting a list of files and folders in the
   current working directory.)
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link_identifier

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
    
     
base_dn

     

      
       The base DN for the directory.
      
     

    
    
     
filter

     

      
      
     

    
    
     
attributes

     

      
       An array of the required attributes, e.g. array(&quot;mail&quot;, &quot;sn&quot;, &quot;cn&quot;).
       Note that the &quot;dn&quot; is always returned irrespective of which attributes
       types are requested.
      
      
       Using this parameter is much more efficient than the default action
       (which is to return all attributes and their associated values). 
       The use of this parameter should therefore be considered good
       practice.
      
     

    
    
     
attrsonly

     

      
       Should be set to 1 if only attribute types are wanted. If set to 0
       both attributes types and attribute values are fetched which is the
       default behaviour.
      
     

    
    
     
sizelimit

     

      
       Enables you to limit the count of entries fetched. Setting this to 0
       means no limit.
      
      Note: 
       
        This parameter can NOT override server-side preset sizelimit. You can
        set it lower though.
       
       
        Some directory server hosts will be configured to return no more than
        a preset number of entries. If this occurs, the server will indicate
        that it has only returned a partial results set. This also occurs if
        you use this parameter to limit the count of fetched entries.
       
      
     

    
    
     
timelimit

     

      
       Sets the number of seconds how long is spend on the search. Setting
       this to 0 means no limit.
      
      Note: 
       
        This parameter can NOT override server-side preset timelimit. You can
        set it lower though.
       
      
     

    
    
     
deref

     

      
       Specifies how aliases should be handled during the search. It can be
       one of the following:
       
         
          LDAP_DEREF_NEVER - (default) aliases are never
          dereferenced.
         
        
        
         
          LDAP_DEREF_SEARCHING - aliases should be
          dereferenced during the search but not when locating the base object
          of the search.
         
        
        
         
          LDAP_DEREF_FINDING - aliases should be
          dereferenced when locating the base object but not during the search.
         
        
        
         
          LDAP_DEREF_ALWAYS - aliases should be dereferenced
          always.
         
        
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a search result identifier or FALSE on error.
  
 " 
"ldap_mod_add", "Add attribute values to current attributes
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $link_identifier
   , string $dn
   , array $entry
   )

  
   Adds one or more attributes to the specified dn.
   It performs the modification at the attribute level as opposed to the
   object level. Object-level additions are done by the
   ldap_add() function.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link_identifier

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
    
     
dn

     

      
       The distinguished name of an LDAP entity.
      
     

    
    
     
entry

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"ldap_mod_del", "Delete attribute values from current attributes
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $link_identifier
   , string $dn
   , array $entry
   )

  
   Removes one or more attributes from the specified dn.
   It performs the modification at the attribute level as opposed to the object
   level. Object-level deletions are done by the 
   ldap_delete() function.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link_identifier

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
    
     
dn

     

      
       The distinguished name of an LDAP entity.
      
     

    
    
     
entry

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"ldap_mod_replace", "Replace attribute values with new ones
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $link_identifier
   , string $dn
   , array $entry
   )

  
   Replaces one or more attributes from the specified dn.
   It performs the modification at the attribute level as opposed to the object
   level. Object-level modifications are done by the 
   ldap_modify() function.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link_identifier

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
    
     
dn

     

      
       The distinguished name of an LDAP entity.
      
     

    
    
     
entry

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"ldap_modify", "Modify an LDAP entry
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $link_identifier
   , string $dn
   , array $entry
   )

  
   Modify the existing entries in the LDAP directory. The structure of the
   entry is same as in ldap_add().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link_identifier

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
    
     
dn

     

      
       The distinguished name of an LDAP entity.
      
     

    
    
     
entry

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"ldap_modify_batch", "Batch and execute modifications on an LDAP entry
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $link_identifier
   , string $dn
   , array $entry
   )

  
   Modifies an existing entry in the LDAP directory. Allows detailed
   specification of the modifications to perform.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link_identifier

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
    
     
dn

     

      
       The distinguished name of an LDAP entity.
      
     

    
    
     
entry

     

      
       An array that specifies the modifications to make. Each entry in this
       array is an associative array with two or three keys:
       attrib maps to the name of the attribute to modify,
       modtype maps to the type of modification to perform,
       and (depending on the type of modification) values
       maps to an array of attribute values relevant to the modification.
      
      
       Possible values for modtype include:
       
LDAP_MODIFY_BATCH_ADD

         

          
           Each value specified through values is added (as
           an additional value) to the attribute named by
           attrib.
          
         

        
        
         
LDAP_MODIFY_BATCH_REMOVE

         

          
           Each value specified through values is removed
           from the attribute named by attrib. Any value of
           the attribute not contained in the values array
           will remain untouched.
          
         

        
        
         
LDAP_MODIFY_BATCH_REMOVE_ALL

         

          
           All values are removed from the attribute named by
           attrib. A values entry must
           not be provided.
          
         

        
        
         
LDAP_MODIFY_BATCH_REPLACE

         

          
           All current values of the attribute named by
           attrib are replaced with the values specified
           through values.
          
         

        
       
       Note that any value for attrib must be a string, any
       value for values must be an array of strings, and
       any value for modtype must be one of the
       LDAP_MODIFY_BATCH_* constants listed above.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"ldap_next_attribute", "Get the next attribute in result
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $link_identifier
   , resource $result_entry_identifier
   )

  
   Retrieves the attributes in an entry. The first call to
  ) is made with the
   result_entry_identifier returned from
   ldap_first_attribute().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link_identifier

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
    
     
result_entry_identifier

     

      
      
     

    
    
     
ber_identifier

     

      
       The internal state of the pointer is maintained by this parameter.
      
      Note: 
       
        This parameter is no longer used as this is now handled automatically
        by PHP. For backwards compatibility PHP will not throw an error if
        this parameter is passed.
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the next attribute in an entry on success and FALSE on
   error.
  
 " 
"ldap_next_entry", "Get next result entry
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( resource $link_identifier
   , resource $result_entry_identifier
   )

  
   Retrieve the entries stored in the result. Successive calls to the
  ) return entries one by one till there
   are no more entries. The first call to)
   is made after the call to ldap_first_entry() with the
   result_entry_identifier as returned from the
   ldap_first_entry().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link_identifier

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
    
     
result_entry_identifier

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns entry identifier for the next entry in the result whose entries
   are being read starting with ldap_first_entry(). If
   there are no more entries in the result then it returns FALSE.
  
 " 
"ldap_next_reference", "Get next reference
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( resource $link
   , resource $entry
   )

  WarningThis function is
currently not documented; only its argument list is available.

 " 
"ldap_parse_reference", "Extract information from reference entry
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $link
   , resource $entry
   , array &amp;$referrals
   )

  WarningThis function is
currently not documented; only its argument list is available.

 " 
"ldap_parse_result", "Extract information from result
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $link
   , resource $result
   , int &amp;$errcode
   [, string &amp;$matcheddn
   [, string &amp;$errmsg
   [, array &amp;$referrals
  ]]] )

  
   Parses an LDAP search result.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
    
     
result_identifier

     

      
       An LDAP result resource, returned by ldap_list() or
       ldap_search().
      
     

    
    
     
errcode

     

      
       A reference to a variable that will be set to the LDAP error code in
       the result, or 0 if no error occurred.
      
     

    
    
     
matcheddn

     

      
       A reference to a variable that will be set to a matched DN if one was
       recognised within the request, otherwise it will be set to NULL.
      
     

    
    
     
errmsg

     

      
       A reference to a variable that will be set to the LDAP error message in
       the result, or an empty string if no error occurred.
      
     

    
    
     
referrals

     

      
       A reference to a variable that will be set to an array set
       to all of the referral strings in the result, or an empty array if no
       referrals were returned.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"ldap_read", "Read an entry
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( resource $link_identifier
   , string $base_dn
   , string $filter
   [, array $attributes
   [, int $attrsonly
   [, int $sizelimit
   [, int $timelimit
   [, int $deref
  ]]]]] )

  
   Performs the search for a specified filter on the
   directory with the scope LDAP_SCOPE_BASE. So it is
   equivalent to reading an entry from the directory.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link_identifier

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
    
     
base_dn

     

      
       The base DN for the directory.
      
     

    
    
     
filter

     

      
       An empty filter is not allowed. If you want to retrieve absolutely all
       information for this entry, use a filter of 
       objectClass=*. If you know which entry types are
       used on the directory server, you might use an appropriate filter such
       as objectClass=inetOrgPerson.
      
     

    
    
     
attributes

     

      
       An array of the required attributes, e.g. array(&quot;mail&quot;, &quot;sn&quot;, &quot;cn&quot;).
       Note that the &quot;dn&quot; is always returned irrespective of which attributes
       types are requested.
      
      
       Using this parameter is much more efficient than the default action
       (which is to return all attributes and their associated values). 
       The use of this parameter should therefore be considered good
       practice.
      
     

    
    
     
attrsonly

     

      
       Should be set to 1 if only attribute types are wanted. If set to 0
       both attributes types and attribute values are fetched which is the
       default behaviour.
      
     

    
    
     
sizelimit

     

      
       Enables you to limit the count of entries fetched. Setting this to 0
       means no limit.
      
      Note: 
       
        This parameter can NOT override server-side preset sizelimit. You can
        set it lower though.
       
       
        Some directory server hosts will be configured to return no more than
        a preset number of entries. If this occurs, the server will indicate
        that it has only returned a partial results set. This also occurs if
        you use this parameter to limit the count of fetched entries.
       
      
     

    
    
     
timelimit

     

      
       Sets the number of seconds how long is spend on the search. Setting
       this to 0 means no limit.
      
      Note: 
       
        This parameter can NOT override server-side preset timelimit. You can
        set it lower though.
       
      
     

    
    
     
deref

     

      
       Specifies how aliases should be handled during the search. It can be
       one of the following:
       
         
          LDAP_DEREF_NEVER - (default) aliases are never
          dereferenced.
         
        
        
         
          LDAP_DEREF_SEARCHING - aliases should be
          dereferenced during the search but not when locating the base object
          of the search.
         
        
        
         
          LDAP_DEREF_FINDING - aliases should be
          dereferenced when locating the base object but not during the search.
         
        
        
         
          LDAP_DEREF_ALWAYS - aliases should be dereferenced
          always.
         
        
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a search result identifier or FALSE on error.
  
 " 
"ldap_rename", "Modify the name of an entry
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $link_identifier
   , string $dn
   , string $newrdn
   , string $newparent
   , bool $deleteoldrdn
   )

  
   The entry specified by dn is renamed/moved.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link_identifier

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
    
     
dn

     

      
       The distinguished name of an LDAP entity.
      
     

    
    
     
newrdn

     

      
       The new RDN.
      
     

    
    
     
newparent

     

      
       The new parent/superior entry.
      
     

    
    
     
deleteoldrdn

     

      
       If TRUE the old RDN value(s) is removed, else the old RDN value(s)
       is retained as non-distinguished values of the entry.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"ldap_search", "Search LDAP tree
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( resource $link_identifier
   , string $base_dn
   , string $filter
   [, array $attributes
   [, int $attrsonly
   [, int $sizelimit
   [, int $timelimit
   [, int $deref
  ]]]]] )

  
   Performs the search for a specified filter on the directory with the scope
   of LDAP_SCOPE_SUBTREE. This is equivalent to searching
   the entire directory.
  
  
   From 4.0.5 on it's also possible to do parallel searches. To do this
   you use an array of link identifiers, rather than a single identifier,
   as the first argument. If you don't want the same base DN and the
   same filter for all the searches, you can also use an array of base DNs
   and/or an array of filters. Those arrays must be of the same size as
   the link identifier array since the first entries of the arrays are
   used for one search, the second entries are used for another, and so
   on. When doing parallel searches an array of search result
   identifiers is returned, except in case of error, then the entry
   corresponding to the search will be FALSE. This is very much like
   the value normally returned, except that a result identifier is always
   returned when a search was made. There are some rare cases where the
   normal search returns FALSE while the parallel search returns an
   identifier.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link_identifier

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
    
     
base_dn

     

      
       The base DN for the directory.
      
     

    
    
     
filter

     

      
       The search filter can be simple or advanced, using boolean operators in
       the format described in the LDAP documentation (see the » Netscape Directory SDK or
       » RFC4515 for full
       information on filters).
      
     

    
    
     
attributes

     

      
       An array of the required attributes, e.g. array(&quot;mail&quot;, &quot;sn&quot;, &quot;cn&quot;).
       Note that the &quot;dn&quot; is always returned irrespective of which attributes
       types are requested.
      
      
       Using this parameter is much more efficient than the default action
       (which is to return all attributes and their associated values). 
       The use of this parameter should therefore be considered good
       practice.
      
     

    
    
     
attrsonly

     

      
       Should be set to 1 if only attribute types are wanted. If set to 0
       both attributes types and attribute values are fetched which is the
       default behaviour.
      
     

    
    
     
sizelimit

     

      
       Enables you to limit the count of entries fetched. Setting this to 0
       means no limit.
      
      Note: 
       
        This parameter can NOT override server-side preset sizelimit. You can
        set it lower though.
       
       
        Some directory server hosts will be configured to return no more than
        a preset number of entries. If this occurs, the server will indicate
        that it has only returned a partial results set. This also occurs if
        you use this parameter to limit the count of fetched entries.
       
      
     

    
    
     
timelimit

     

      
       Sets the number of seconds how long is spend on the search. Setting
       this to 0 means no limit.
      
      Note: 
       
        This parameter can NOT override server-side preset timelimit. You can
        set it lower though.
       
      
     

    
    
     
deref

     

      
       Specifies how aliases should be handled during the search. It can be
       one of the following:
       
         
          LDAP_DEREF_NEVER - (default) aliases are never
          dereferenced.
         
        
        
         
          LDAP_DEREF_SEARCHING - aliases should be
          dereferenced during the search but not when locating the base object
          of the search.
         
        
        
         
          LDAP_DEREF_FINDING - aliases should be
          dereferenced when locating the base object but not during the search.
         
        
        
         
          LDAP_DEREF_ALWAYS - aliases should be dereferenced
          always.
         
        
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a search result identifier or FALSE on error.
  
 " 
"ldap_set_option", "Set the value of the given option
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $link_identifier
   , int $option
   , mixed $newval
   )

  
   Sets the value of the specified option to be newval.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link_identifier

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
    
     
option

     

      
       The parameter option can be one of:
       Option
           Type
           Available since
          LDAP_OPT_DEREF
           integer
            
          LDAP_OPT_SIZELIMIT
           integer
            
          LDAP_OPT_TIMELIMIT
           integer
            
          LDAP_OPT_NETWORK_TIMEOUT
           integer
           PHP 5.3.0
          LDAP_OPT_PROTOCOL_VERSION
           integer
            
          LDAP_OPT_ERROR_NUMBER
           integer
            
          LDAP_OPT_REFERRALS
           bool
            
          LDAP_OPT_RESTART
           bool
            
          LDAP_OPT_HOST_NAME
           string
            
          LDAP_OPT_ERROR_STRING
           string
            
          LDAP_OPT_MATCHED_DN
           string
            
          LDAP_OPT_SERVER_CONTROLS
           array
            
          LDAP_OPT_CLIENT_CONTROLS
           array
            
          
       LDAP_OPT_SERVER_CONTROLS and 
       LDAP_OPT_CLIENT_CONTROLS require a list of
       controls, this means that the value must be an array of controls. A
       control consists of an oid identifying the control,
       an optional value, and an optional flag for
       criticality. In PHP a control is given by an
       array containing an element with the key oid
       and string value, and two optional elements. The optional
       elements are key value with string value
       and key iscritical with boolean value.
       iscritical defaults to FALSE
       if not supplied. See » draft-ietf-ldapext-ldap-c-api-xx.txt
       for details. See also the second example below.
      
     

    
    
     
newval

     

      
       The new value for the specified option.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"ldap_set_rebind_proc", "Set a callback function to do re-binds on referral chasing
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $link
   , callable $callback
   )

  WarningThis function is
currently not documented; only its argument list is available.

 " 
"ldap_sort", "Sort LDAP result entries
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $link
   , resource $result
   , string $sortfilter
   )

  
   Sort the result of a LDAP search, returned by
   ldap_search().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
    
     
result

     

      
       An search result identifier, returned by
       ldap_search().
      
     

    
    
     
sortfilter

     

      
       The attribute to use as a key in the sort.
      
     

    
   " 
"ldap_start_tls", "Start TLS
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $link
   )

  WarningThis function is
currently not documented; only its argument list is available.

 " 
"ldap_unbind", "Unbind from LDAP directory
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $link_identifier
   )

  
   Unbinds from the LDAP directory.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
link_identifier

     

      
       An LDAP link identifier, returned by ldap_connect().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"levenshtein", "Calculate Levenshtein distance between two strings
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $str1
   , string $str2
   )

  
   int    ( string $str1
   , string $str2
   , int $cost_ins
   , int $cost_rep
   , int $cost_del
   )

  
   The Levenshtein distance is defined as the minimal number of
   characters you have to replace, insert or delete to transform
   str1 into str2.
   The complexity of the algorithm is O(m*n),
   where n and m are the
   length of str1 and
   str2 (rather good when compared to
   similar_text(), which is O(max(n,m)**3),
   but still expensive).
  
  
   In its simplest form the function will take only the two
   strings as parameter and will calculate just the number of
   insert, replace and delete operations needed to transform
   str1 into str2.
  
  
   A second variant will take three additional parameters that
   define the cost of insert, replace and delete operations.  This
   is more general and adaptive than variant one, but not as
   efficient.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str1

     

      
       One of the strings being evaluated for Levenshtein distance.
      
     

    
    
     
str2

     

      
       One of the strings being evaluated for Levenshtein distance.
      
     

    
    
     
cost_ins

     

      
       Defines the cost of insertion.
      
     

    
    
     
cost_rep

     

      
       Defines the cost of replacement.
      
     

    
    
     
cost_del

     

      
       Defines the cost of deletion.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function returns the Levenshtein-Distance between the
   two argument strings or -1, if one of the argument strings
   is longer than the limit of 255 characters.
  
 " 
"libxml_clear_errors", "
   Clear libxml error buffer
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( void
   )

  
  ) clears the libxml error buffer.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"libxml_disable_entity_loader", "Disable the ability to load external entities
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ([ bool $disable = true
  ] )

  
   Disable/enable the ability to load external entities.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
disable

     

      
       Disable (TRUE) or enable (FALSE) libxml extensions (such as
       DOM, XMLWriter
       and XMLReader) to load external entities.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the previous value.
  
 " 
"libxml_get_errors", "
   Retrieve array of errors
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
   Retrieve array of errors.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array with LibXMLError objects if there are any
   errors in the buffer, or an empty array otherwise.
  
 " 
"libxml_get_last_error", "
   Retrieve last error from libxml
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   LibXMLError    ( void
   )

  
   Retrieve last error from libxml.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a LibXMLError object if there is any error in the
   buffer, FALSE otherwise.
  
 " 
"libxml_set_external_entity_loader", "Changes the default external entity loader
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( callable $resolver_function
   )

  
   Changes the default external entity loader.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
resolver_function

    

     
      A callable that takes three arguments. Two strings, a public id
      and system id, and a context (an array with four keys) as the third argument.
      This callback should return a resource, a string from which a resource can be
      opened, or NULL.
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"libxml_set_streams_context", "
   Set the streams context for the next libxml document load or write
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( resource $streams_context
   )

  
   Sets the streams context for the next libxml document load or write.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
streams_context

      

       
        The stream context resource (created with
        stream_context_create())
       
      

     
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"libxml_use_internal_errors", "
   Disable libxml errors and allow user to fetch error information as needed
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ([ bool $use_errors = false
  ] )

  
  ) allows you to disable
   standard libxml errors and enable user error handling.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
use_errors

      

       
        Enable (TRUE) user error handling or disable (FALSE) user error handling. Disabling will also clear any existing libxml errors.
       
      

     
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function returns the previous value of
   use_errors.
  
 " 
"link", "Create a hard NAME
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $target
   , string    )

  
  ) creates a hard
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
target

     

      
       Target of the
      
     

    
    
     
     

      
       Thename.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"linkinfo", "Gets information about a link
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $path
   )

  
   Gets information about a link.  
  
  
   This function is used to verify if a link (pointed to by
   path) really exists (using the same method as the
   S_ISLNK macro defined in stat.h).
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
path

     

      
       Path to the link.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns the st_dev field
   of the Unix C stat structure returned by the lstat
   system call. Returns 0 or FALSE in case of error.
  
 " 
"locale_canonicalize", "Canonicalize the locale string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   public static string Locale::canonicalize
    ( string $locale
   )

  

  

  WarningThis function is
currently not documented; only its argument list is available.


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
locale

    

     
      
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   
  
 " 
"locale_lookup", "Searches the language tag list for the best match to the language
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   Object oriented style
  
  
   public
   static
   string 
   Locale::lookup
    ( array $langtag
   , string $locale
   [, bool $canonicalize = false
   [, string $default
  ]] )

  
   Procedural style
  
  
   string 
      ( array $langtag
   , string $locale
   [, bool $canonicalize = false
   [, string $default
  ]] )

  
   Searches the items in langtag for the best match to 
   the language range specified in locale according to
   RFC 4647's lookup algorithm. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
langtag

     

      
       An array containing a list of language tags to compare to 
       locale. Maximum 100 items allowed.
      
     

    
    
     
locale

     

      
       The locale to use as the language range when matching.
      
     

    
     
       

         canonicalize
       

       

         
           If true, the arguments will be converted to canonical form before
           matching.
         
       

     
     
     
default

     

      
       The locale to use if no match is found.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The closest matching language tag or default value.
  
 " 
"localeconv", "Get numeric formatting information
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
   Returns an associative array containing localized numeric and
   monetary formatting information.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns data based upon the current locale
   as set by setlocale().  The associative array that is
   returned contains the following fields:
   Array element
       </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
      decimal_point
       Decimal point character
      thousands_sep
       Thousands separator
      grouping
       Array containing numeric groupings
      int_curr_symbol
       International currency symbol (i.e. USD)
      currency_symbol
       Local currency symbol (i.e. $)
      mon_decimal_point
       Monetary decimal point character
      mon_thousands_sep
       Monetary thousands separator
      mon_grouping
       Array containing monetary groupings
      positive_sign
       Sign for positive values
      negative_sign
       Sign for negative values
      int_frac_digits
       International fractional digits
      frac_digits
       Local fractional digits
      p_cs_precedes
       
        TRUE if currency_symbol precedes a positive value, FALSE
        if it succeeds one
       
      p_sep_by_space
       
        TRUE if a space separates currency_symbol from a positive
        value, FALSE otherwise
       
      n_cs_precedes
       
        TRUE if currency_symbol precedes a negative value, FALSE
        if it succeeds one
       
      n_sep_by_space
       
        TRUE if a space separates currency_symbol from a negative
        value, FALSE otherwise
       
      p_sign_posn
       
        0 - Parentheses surround the quantity and currency_symbol
         1 - The sign string precedes the quantity and currency_symbol
         2 - The sign string succeeds the quantity and currency_symbol
         3 - The sign string immediately precedes the currency_symbol
         4 - The sign string immediately succeeds the currency_symbol
        
      n_sign_posn
       
        0 - Parentheses surround the quantity and currency_symbol
         1 - The sign string precedes the quantity and currency_symbol
         2 - The sign string succeeds the quantity and currency_symbol
         3 - The sign string immediately precedes the currency_symbol
         4 - The sign string immediately succeeds the currency_symbol
        
      
   The p_sign_posn, and n_sign_posn contain a string
   of formatting options. Each number representing one of the above listed conditions.
  
  
   The grouping fields contain arrays that define the way numbers should be
   grouped. For example, the monetary grouping field for the nl_NL locale (in
   UTF-8 mode with the euro sign), would contain a 2 item array with the
   values 3 and 3. The higher the index in the array, the farther left the
   grouping is. If an array element is equal to CHAR_MAX,
   no further grouping is done. If an array element is equal to 0, the previous
   element should be used.
  
 " 
"localtime", "Get the local time
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ([ int $timestamp = time()
   [, bool $is_associative = false
  ]] )

  
   The) function returns an array
   identical to that of the structure returned by the C function
   call.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
timestamp


The optional timestamp parameter is an
integer Unix timestamp that defaults to the current
local time if a timestamp is not given. In other
words, it defaults to the value of time().


   
    
     
is_associative

     

      
       If set to FALSE or not supplied then the array is returned as a regular, 
       numerically indexed array.  If the argument is set to TRUE then
      ) returns an associative array containing
       all the different elements of the structure returned by the C
       function call to  The names of the different keys of
       the associative array are as follows:
      
      
       
         
          &quot;tm_sec&quot; - seconds, 0 to 59
         
        
        
         
          &quot;tm_min&quot; - minutes, 0 to 59
         
        
        
         
          &quot;tm_hour&quot; - hours, 0 to 23
         
        
        
         
          &quot;tm_mday&quot; - day of the month, 1 to 31
         
        
        
         
          &quot;tm_mon&quot; - month of the year, 0 (Jan) to 11 (Dec)
         
        
        
         
          &quot;tm_year&quot; - years since 1900
         
        
        
         
          &quot;tm_wday&quot; - day of the week, 0 (Sun) to 6 (Sat)
         
        
        
         
          &quot;tm_yday&quot; - day of the year, 0 to 365
         
        
        
         
          &quot;tm_isdst&quot; - is daylight savings time in effect? 
         
         
          Positive if yes, 0 if not, negative if unknown.
         
        
       

    
   " 
"log", "Natural NAMEarithm
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    float     ( float $arg
    [, float $base = M_E
   ] )

  
   If the optional base parameter is specified, 
  ) returns NAMEbasearg, otherwise) 
   returns the natural NAMEarithm of arg.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
arg

     

      
       The value to calculate the NAMEarithm for
      
     

    
    
     
base

     

      
       The optional NAMEarithmic base to use 
       (defaults to 'e' and so to the natural NAMEarithm).
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The NAMEarithm of arg to 
   base, if given, or the
   natural NAMEarithm.  
  
 " 
"log10", "Base-10 logarithm
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    float     ( float $arg
    )

  
   Returns the base-10 logarithm of arg.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
arg

     

      
       The argument to process
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The base-10 logarithm of arg
  
 " 
"log1p", "
   Returns log(1 + number), computed in a way that is accurate even when
   the value of number is close to zero
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   float    ( float $number
   )

  
  ) returns log(1 +
   number) computed in a way that is accurate even
   when the value of number is close to zero.
   log() might only return log(1) in this case
   due to lack of precision.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
number

     

      
       The argument to process
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   log(1 + number)
  
 " 
"long2ip", "Converts an long integer address into a string in (IPv4) Internet standard dotted format
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $proper_address
   )

  
   The function) generates an Internet address
   in dotted format (i.e.: aaa.bbb.ccc.ddd) from the long integer
   representation.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
proper_address

     

      
       A proper address representation in long integer.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the Internet IP address as a string.
  
 " 
"lstat", "Gives information about a file or symbolic link
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $filename
   )

  
   Gathers the statistics of the file or symbolic link named by
   filename.  
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to a file or a symbolic link.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   See the manual page for stat() for information on
   the structure of the array that) returns.
   This function is identical to the stat() function
   except that if the filename parameter is a symbolic
   link, the status of the symbolic link is returned, not the status of the
   file pointed to by the symbolic link.
  
 " 
"ltrim", "Strip whitespace (or other characters) from the beginning of a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   [, string $character_mask
  ] )

  
   Strip whitespace (or other characters) from the beginning of a string.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The input string.
      
     

    
    
     
character_mask

     

      
       You can also specify the characters you want to strip, by means of the
       character_mask parameter.
       Simply list all characters that you want to be stripped. With
       .. you can specify a range of characters.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function returns a string with whitespace stripped from the
   beginning of str.
   Without the second parameter,
  ) will strip these characters:
   
   
     
      &quot; &quot; (ASCII 32
      (0x20)), an ordinary space.
     
    
    
     
      &quot;\t&quot; (ASCII 9
      (0x09)), a tab.
     
    
    
     
      &quot;\n&quot; (ASCII 10
      (0x0A)), a new line (line feed).
     
    
    
     
      &quot;\r&quot; (ASCII 13
      (0x0D)), a carriage return.
     
    
    
     
      &quot;\0&quot; (ASCII 0
      (0x00)), the NUL-byte.
     
    
    
      
      &quot;\x0B&quot; (ASCII 11
      (0x0B)), a vertical tab.
     
    
   " 
"mail", "Send NAME
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $to
   , string $subject
   , string $message
   [, string $additional_headers
   [, string $additional_parameters
  ]] )

  
   Sends an eNAME.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
to

     

      
       Receiver, or receivers of the
      
      
       The formatting of this string must comply with
       » RFC 2822. Some examples are:
       user@example.com
        user@example.com, anotheruser@example.com
        User 
        User , Another User 
       

    
    
     
subject

     

      
       Subject of the eNAME to be sent.
      
      Caution
       
        Subject must satisfy » RFC 2047.
       
      
     

    
    
     
message

     

      
       Message to be sent.
      
      
       Each line should be separated with a CRLF (\r\n). Lines should not be
       larger than 70 characters.
      
      Caution
       
        (Windows only) When PHP is talking to a SMTP server directly, if a full
        stop is found on the start of a line, it is removed. To counter-act this,
        replace these occurrences with a double dot.
        




        

       
      
     

    
    
     
additional_headers (optional)

     

      
       String to be inserted at the end of the eNAME header.
      
      
       This is typically used to add extra headers (From, Cc, and Bcc).
       Multiple extra headers should be separated with a CRLF (\r\n).
       If outside data are used to compose this header, the data should be sanitized
       so that no unwanted headers could be injected. 
      
      Note: 
       
        additional_headers does not haveheader
        injection protection. Therefore, users must make sure specified headers
        are safe and contains headers only. i.e. Never startbody by putting
        multiple newlines.
       
            
      Note: 
       
        When sending themust contain
        a From header. This can be set with the
        additional_headers parameter, or a default
        can be set in php.ini.
       
       
        Failing to do this will result in an error
        message similar to Warning:): &quot;sendNAME_from&quot; not
        set in php.ini or custom &quot;From:&quot; header missing.
        The From header sets also
        Return-Path under Windows.
       
      
      Note: 
       
        If messages are not received, try using a LF (\n) only.
        Some Unixtransfer agents (most notably
        » qNAME) replace LF by CRLF
        automatically (which leads to doubling CR if CRLF is used).
        This should be a last resort, as it does not comply with
        » RFC 2822.
       
      
     

    
    
     
additional_parameters (optional)

     

      
       The additional_parameters parameter
       can be used to pass additional flags as command line options to the
       program configured to be used when sending as defined by the
       sendNAME_path configuration setting. For example,
       this can be used to set the envelope sender address when using
       sendNAME with the -f sendNAME option.
      
      
       This parameter is escaped by escapeshellcmd() internally
       to prevent command execution. escapeshellcmd() prevents
       command execution, but allows to add addtional parameters. For security reasons,
       it is recommended for the user to sanitize this parameter to avoid adding unwanted
       parameters to the shell command.
      
      
       Since escapeshellcmd() is applied automatically, some characters
       that are allowed as eNAME addresses by internet RFCs cannot be used. 
      ) can not allow such characters, so in programs where the use of
       such characters is required, alternative means of sending eNAMEs (such as using a framework
       or a library) is recommended. 
      
      
       The user that the webserver runs as should be added as a trusted user to the
       sendNAME configuration to prevent a 'X-Warning' header from being added
       to the message when the envelope sender (-f) is set using this method.
       For sendNAME users, this file is /etctrusted-users.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if thewas successfully accepted for delivery, FALSE otherwise.
  
  
   It is important to note that just because thewas accepted for delivery,
   it does NOT mean thewill actually reach the intended destination.
  
 " 
"max", "Find highest value
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( array $values
   )

  
   mixed    ( mixed $value1
   , mixed $value2
   [, mixed $...
  ] )

  
   If the first and only parameter is an array,)
   returns the highest value in that array. If at least two parameters are 
   provided,) returns the biggest of these values.
  
  Note: 
   
    Values of different types will be compared using the 
    standard comparison rules. For instance, a non-numeric string will be
    compared to an integer as though it were 0, but multiple
    string values will be compared alphanumerically. The actual value returned will be of the
    original type with no conversion applied.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
values

     

      
       An array containing the values.
      
     

    
    
     
value1

     

      
       Any comparable
       value.
      
     

    
    
     
value2

     

      
       Any comparable
       value.
      
     

    
    
     
...

     

      
       Any comparable
       value.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns the parameter value considered &quot;highest&quot; according to standard
   comparisons. If multiple values of different types evaluate as equal (e.g. 0
   and 'abc') the first provided to the function will be returned.
  

  
   If an empty array is passed, then FALSE will be returned and an
   E_WARNING error will be emitted.
  
 " 
"mb_check_encoding", "Check if the string is valid for the specified encoding
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ([ string $var = NULL
   [, string $encoding = mb_internal_encoding()
  ]] )

  
   Checks if the specified byte stream is valid for the specified encoding.
   It is useful to prevent so-called &quot;Invalid Encoding Attack&quot;.
  
  
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
var

     

      
        The byte stream to check. If it is omitted, this function checks
        all the input from the beginning of the request.
      
     

    
    
     
encoding

     

      
       The expected encoding.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"mb_convert_case", "Perform case folding on a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   , int $mode
   [, string $encoding = mb_internal_encoding()
  ] )

  
   Performs case folding on a string, converted in the way specified by
   mode.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The string being converted.
      
     

    
    
     
mode

     

      
       The mode of the conversion. It can be one of 
       MB_CASE_UPPER, 
       MB_CASE_LOWER, or 
       MB_CASE_TITLE.
      
     

    
    
     
encoding

     

      The encoding
parameter is the character encoding. If it is omitted, the internal character
encoding value will be used.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   A case folded version of string converted in the
   way specified by mode.
  
 " 
"mb_convert_encoding", "Convert character encoding
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   , string $to_encoding
   [, mixed $from_encoding = mb_internal_encoding()
  ] )

  
   Converts the character encoding of string str
   to to_encoding
   from optionally from_encoding.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The string being encoded.
      
     

    
    
     
to_encoding

     

      
       The type of encoding that str is being converted to.
      
     

    
    
     
from_encoding

     

      
       Is specified by character code names before conversion. It is either
       an array, or a comma separated enumerated list.
       If from_encoding is not specified, the internal 
       encoding will be used.
       
      
      
      See supported
      encodings.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The encoded string.
  
 " 
"mb_convert_kana", "Convert &quot;kana&quot; one from another (&quot;zen-kaku&quot;, &quot;han-kaku&quot; and more)
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   [, string $option = &quot;KV&quot;
   [, string $encoding = mb_internal_encoding()
  ]] )

  
   Performs a &quot;han-kaku&quot; - &quot;zen-kaku&quot; conversion for string str. 
   This function is only useful for Japanese.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The string being converted.
      
     

    
    
     
option

     

      
       The conversion option.
      
      
       Specify with a combination of following options.
       Applicable Conversion Options
        
         Option
           Meaning
          r
           
            Convert &quot;zen-kaku&quot; alphabets to &quot;han-kaku&quot;
           
          R
           
            Convert &quot;han-kaku&quot; alphabets to &quot;zen-kaku&quot;
           
          n
           
            Convert &quot;zen-kaku&quot; numbers to &quot;han-kaku&quot;
           
          N
           
            Convert &quot;han-kaku&quot; numbers to &quot;zen-kaku&quot;
           
          a
           
            Convert &quot;zen-kaku&quot; alphabets and numbers to &quot;han-kaku&quot;
           
          A
           
            Convert &quot;han-kaku&quot; alphabets and numbers to &quot;zen-kaku&quot;
            (Characters included in &quot;a&quot;, &quot;A&quot; options are
            U+0021 - U+007E excluding U+0022, U+0027, U+005C, U+007E)
           
          s
           
            Convert &quot;zen-kaku&quot; space to &quot;han-kaku&quot; (U+3000 -&gt; U+0020)
           
          S
           
            Convert &quot;han-kaku&quot; space to &quot;zen-kaku&quot; (U+0020 -&gt; U+3000)
           
          k
           
            Convert &quot;zen-kaku kata-kana&quot; to &quot;han-kaku kata-kana&quot;
           
          K
           
            Convert &quot;han-kaku kata-kana&quot; to &quot;zen-kaku kata-kana&quot;
           
          h
           
            Convert &quot;zen-kaku hira-gana&quot; to &quot;han-kaku kata-kana&quot;
           
          H
           
            Convert &quot;han-kaku kata-kana&quot; to &quot;zen-kaku hira-gana&quot;
           
          c
           
           Convert &quot;zen-kaku kata-kana&quot; to &quot;zen-kaku hira-gana&quot;
           
          C
           
            Convert &quot;zen-kaku hira-gana&quot; to &quot;zen-kaku kata-kana&quot;
           
          V
           
            Collapse voiced sound notation and convert them into a character. Use with &quot;K&quot;,&quot;H&quot;
           
          

    
    
     
encoding

     

      The encoding
parameter is the character encoding. If it is omitted, the internal character
encoding value will be used.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The converted string.
  
 " 
"mb_convert_variables", "Convert character code in variable(s)
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $to_encoding
   , mixed $from_encoding
   , mixed &amp;$vars
   [, mixed &amp;$...
  ] )

  
   Converts 
   character encoding of variables vars in
   encoding from_encoding to encoding 
   to_encoding. 
  
  
  ) join strings in Array
   or Object to detect encoding, since encoding detection tends to
   fail for short strings. Therefore, it is impossible to mix
   encoding in single array or object.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
to_encoding

     

      
       The encoding that the string is being converted to.
      
     

    
    
     
from_encoding

     

      
       from_encoding is specified as an array 
       or comma separated string, it tries to detect encoding from
       from-coding. When from_encoding 
       is omitted, detect_order is used.
      
     

    
    
     
vars

     

      
       vars is the reference to the
       variable being converted. String, Array and Object are accepted.
      ) assumes all parameters
       have the same encoding.
      
     

    
    
     
...

     

      
       Additional vars.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The character encoding before conversion for success, 
   or FALSE for failure.
  
 " 
"mb_decode_mimeheader", "Decode string in MIME header field
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   )

  
   Decodes encoded-word string str in MIME header. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The string being decoded.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The decoded string in internal character encoding.
  
 " 
"mb_decode_numericentity", "Decode HTML numeric string reference to character
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   , array $convmap
   [, string $encoding = mb_internal_encoding()
  ] )

  
   Convert numeric string reference of string
   str in a specified block to character. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The string being decoded.
      
     

    
    
     
convmap

     

      
       convmap is an array that specifies 
       the code area to convert.
      
     

    
    
     
encoding

     

      The encoding
parameter is the character encoding. If it is omitted, the internal character
encoding value will be used.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The converted string.
  
 " 
"mb_detect_encoding", "Detect character encoding
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   [, mixed $encoding_list = mb_detect_order()
   [, bool $strict = false
  ]] )

  
   Detects character encoding in string str. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The string being detected.
      
     

    
    
     
encoding_list

     

      
       encoding_list is list of character
       encoding. Encoding order may be specified by array or comma
       separated list string.
      
      
       If encoding_list is omitted,
       detect_order is used.
      
     

    
    
     
strict

     

      
       strict specifies whether to use
       the strict encoding detection or not.
       Default is FALSE.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The detected character encoding or FALSE if the encoding cannot be
   detected from the given string.
  
 " 
"mb_detect_order", "Set/Get character encoding detection order
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ([ mixed $encoding_list =)
  ] )

  
   Sets the automatic character
   encoding detection order to encoding_list.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
encoding_list

     

      
       encoding_list is an array or 
       comma separated list of character encoding. See supported encodings.
      
      
       If encoding_list is omitted, it returns
       the current character encoding detection order as array.
      
      
       This setting affects mb_detect_encoding() and
       mb_send_mail().
      
      
       mbstring currently implements the following
       encoding detection filters. If there is an invalid byte sequence
       for the following encodings, encoding detection will fail.
      
      
       UTF-8, UTF-7,
       ASCII,
       EUC-JP,SJIS,
       eucJP-win, SJIS-win,
       JIS, ISO-2022-JP 
      
      
       For ISO-8859-*, mbstring
       always detects as ISO-8859-*.
      
      
       For UTF-16, UTF-32,
       UCS2 and UCS4, encoding
       detection will fail always.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"mb_encode_mimeheader", "Encode string for MIME header
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   [, string $charset = determined by mb_language()
   [, string $transfer_encoding = &quot;B&quot;
   [, string $linefeed = &quot;\r\n&quot;
   [, int $indent = 0
  ]]]] )

  
   Encodes a given string
   str by the MIME header encoding scheme.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The string being encoded.
       Its encoding should be same as mb_internal_encoding().
      
     

    
    
     
charset

     

      
       charset specifies the name of the character set
       in which str is represented in. The default value
       is determined by the current NLS setting (mbstring.language).
      
     

    
    
     
transfer_encoding

     

      
       transfer_encoding specifies the scheme of MIME
       encoding. It should be either &quot;B&quot; (Base64) or
       &quot;Q&quot; (Quoted-Printable). Falls back to
       &quot;B&quot; if not given.
      
     

    
    
     
linefeed

     

      
       linefeed specifies the EOL (end-of-line) marker
       with which) performs
       line-folding (a » RFC term,
       the act of breaking a line longer than a certain length into multiple
       lines. The length is currently hard-coded to 74 characters).
       Falls back to &quot;\r\n&quot; (CRLF) if not given.
      
     

    
    
     
indent

     

      
       Indentation of the first line (number of characters in the header
       before str).
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   A converted version of the string represented in ASCII.
  
 " 
"mb_encode_numericentity", "Encode character to HTML numeric string reference
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   , array $convmap
   [, string $encoding = mb_internal_encoding()
   [, bool $is_hex = FALSE
  ]] )

  
   Converts
   specified character codes in string str
   from character code to HTML numeric character reference.    
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The string being encoded.
      
     

    
    
     
convmap

     

      
       convmap is array specifies code area to
       convert.
      
     

    
    
     
encoding

     

      The encoding
parameter is the character encoding. If it is omitted, the internal character
encoding value will be used.
     

    
    
     
is_hex

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The converted string.
  
 " 
"mb_encoding_aliases", "Get aliases of a known encoding type
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $encoding
   )

  
   Returns an array of aliases for a known encoding type.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
encoding

    

     
      The encoding type being checked, for aliases.
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a numerically indexed array of encoding aliases on success,
    or FALSE on failure
  
 " 
"mb_ereg", "Regular expression match with multibyte support
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $pattern
   , string $string
   [, array &amp;$regs
  ] )

  
   Executes the regular expression match with multibyte support.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pattern

     

      
       The search pattern.
      
     

    
    
     
string

     

      
       The search string.
      
     

    
    
     
regs

     

      
       Contains a substring of the matched string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Executes the regular expression
   match with multibyte support, and returns 1 if matches are found.
   If the optional regs parameter was specified, the function
   returns the byte length of matched part, and the array
   regs will contain the substring of matched
   string. The function returns 1 if it matches with the empty
   string. If no matches are found or an error happens, FALSE will be
   returned.
  
 " 
"mb_ereg_match", "Regular expression match for multibyte string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $pattern
   , string $string
   [, string $option = &quot;msr&quot;
  ] )

  
   A regular expression match for a multibyte string
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pattern

     

      
       The regular expression pattern.
      
     

    
    
     
string

     

      
       The string being evaluated.
      
     

    
    
     
option

     

      
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if
   string matches the regular expression
   pattern, FALSE if not.
  
 " 
"mb_ereg_replace", "Replace regular expression with multibyte support
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $pattern
   , string $replacement
   , string $string
   [, string $option = &quot;msr&quot;
  ] )

  
   Scans string for matches to
   pattern, then replaces the matched text
   with replacement  
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pattern

     

      
       The regular expression pattern.
      
      
       Multibyte characters may be used in pattern.
      
     

    
    
     
replacement

     

      
       The replacement text.
      
     

    
    
     
string

     

      
       The string being checked.
      
     

    
    
     
option

     

      
       Matching condition can be set by option
       parameter. If i is specified for this
       parameter, the case will be ignored. If x is
       specified, white space will be ignored. If m
       is specified, match will be executed in multiline mode and line
       break will be included in '.'. If p is
       specified, match will be executed in POSIX mode, line break 
       will be considered as normal character. If e
       is specified, replacement string will be
       evaluated as PHP expression.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The resultant string on success, or FALSE on error.
  
 " 
"mb_ereg_replace_callback", "Perform a regular expresssion seach and replace with multibyte support using a callback
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $pattern
   , callable $callback
   , string $string
   [, string $option = &quot;msr&quot;
  ] )

  
   Scans string for matches to
   pattern, then replaces the matched text
   with the output of callback function.  
  
  
    The behavior of this function is almost identical to mb_ereg_replace(), 
    except for the fact that instead of
    replacement parameter, one should specify a
    callback.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pattern

     

      
       The regular expression pattern.
      
      
       Multibyte characters may be used in pattern.
      
     

    
    
     
callback

     

      
        A callback that will be called and passed an array of matched elements
        in the  subject string. The callback should
       return the replacement string.
      
      
        You'll often need the callback function
        for a) in just one place.
        In this case you can use an
        anonymous function to
        declare the callback within the call to
       ). By doing it this way
        you have all information for the call in one place and do not
        clutter the function namespace with a callback function's name
        not used anywhere else.        
      
     

    
    
     
string

     

      
       The string being checked.
      
     

    
    
     
option

     

      
       Matching condition can be set by option
       parameter. If i is specified for this
       parameter, the case will be ignored. If x is
       specified, white space will be ignored. If m
       is specified, match will be executed in multiline mode and line
       break will be included in '.'. If p is
       specified, match will be executed in POSIX mode, line break 
       will be considered as normal character. Note that e
       cannot be used for).
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The resultant string on success, or FALSE on error.
  
 " 
"mb_ereg_search", "Multibyte regular expression match for predefined multibyte string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ([ string $pattern
   [, string $option = &quot;ms&quot;
  ]] )

  
   Performs a multibyte regular expression match for a predefined multibyte string.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pattern

     

      
       The search pattern.
      
     

    
    
     
option

     

      
       The search option.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns TRUE if the
   multibyte string matches with the regular expression, or FALSE
   otherwise. The string for matching is set by 
   NAME_init(). If
   pattern is not specified, the previous one
   is used.
  
 " 
"mb_ereg_search_getpos", "Returns start point for next regular expression match
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   Returns the start point for the next regular expression match.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  This function has no parameters.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns
   the point to start regular expression match for
   mb_ereg_search(),
   mb_ereg_search_pos(),
   mb_ereg_search_regs(). The position is
   represented by bytes from the head of string.
  
 " 
"mb_ereg_search_getregs", "Retrieve the result from the last multibyte regular expression match
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
   Retrieve the result from the last multibyte regular expression match
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  This function has no parameters.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   An array
   including the sub-string of matched part by last
   mb_ereg_search(),
   mb_ereg_search_pos(),
   mb_ereg_search_regs(). If there are some
   matches, the first element will have the matched sub-string, the
   second element will have the first part grouped with brackets, 
   the third element will have the second part grouped with
   brackets, and so on. It returns FALSE on error;
  
 " 
"mb_ereg_search_init", "Setup string and regular expression for a multibyte regular expression match
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $string
   [, string $pattern
   [, string $option = &quot;msr&quot;
  ]] )

  
  ) sets
   string and pattern
   for a multibyte regular expression. These values are used for
   mb_ereg_search(),
   mb_ereg_search_pos(), and
   mb_ereg_search_regs(). 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
string

     

      
       The search string.
      
     

    
    
     
pattern

     

      
       The search pattern.
      
     

    
    
     
option

     

      
       The search option.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"mb_ereg_search_pos", "Returns position and length of a matched part of the multibyte regular expression for a predefined multibyte string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ([ string $pattern
   [, string $option = &quot;ms&quot;
  ]] )

  
   Returns position and length of a matched part of the multibyte regular expression 
   for a predefined multibyte string
  
  
   The string for match is specified by
   mb_ereg_search_init(). If it is not specified,
   the previous one will be used.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pattern

     

      
       The search pattern.
      
     

    
    
     
option

     

      
       The search option.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   An array containing two elements. The first element is the
   offset, in bytes, where the match begins relative to the start of the
   search string, and the second element is the length in bytes of the match.
  
  
   If an error occurs, FALSE is returned.
  
 " 
"mb_ereg_search_regs", "Returns the matched part of a multibyte regular expression
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ([ string $pattern
   [, string $option = &quot;ms&quot;
  ]] )

  
   Returns the matched part of a multibyte regular expression.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pattern

     

      
       The search pattern.
      
     

    
    
     
option

     

      
       The search option.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) executes the multibyte
   regular expression match, and if there are some matched part, it
   returns an array including substring of matched part as first
   element, the first grouped part with brackets as second element,
   the second grouped part as third element, and so on. 
   It returns FALSE on error.
  
 " 
"mb_ereg_search_setpos", "Set start point of next regular expression match
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( int $position
   )

  
  ) sets the starting
   point of a match for mb_ereg_search().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
position

     

      
       The position to set.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"mb_eregi", "Regular expression match ignoring case with multibyte support
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $pattern
   , string $string
   [, array &amp;$regs
  ] )

  
   Executes the case insensitive regular expression match with multibyte support.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pattern

     

      
       The regular expression pattern.
      
     

    
    
     
string

     

      
       The string being searched.
      
     

    
    
     
regs

     

      
       Contains a substring of the matched string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Executes the regular expression
   match with multibyte support, and returns 1 if matches are found.
   If the optional regs parameter was specified, the function
   returns the byte length of matched part, and the array
   regs will contain the substring of matched
   string. The function returns 1 if it matches with the empty
   string. If no matches are found or an error happens, FALSE will be
   returned.
  
 " 
"mb_eregi_replace", "Replace regular expression with multibyte support ignoring case
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $pattern
   , string $replace
   , string $string
   [, string $option = &quot;msri&quot;
  ] )

  
   Scans string for matches to
   pattern, then replaces the matched text
   with replacement. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pattern

     

      
       The regular expression pattern.  Multibyte characters may be used. The case will be ignored.
      
     

    
    
     
replace

     

      
       The replacement text.
      
     

    
    
     
string

     

      
       The searched string.
      
     

    
    
     
option

     

      
       option has the same meaning as in
       mb_ereg_replace().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The resultant string or FALSE on error. 
  
 " 
"mb_get_info", "Get internal settings of mbstring
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ([ string $type = &quot;all&quot;
  ] )

  
  ) returns the internal setting parameters of mbstring.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
type

     

      
       If type isn't specified or is specified to
       &quot;all&quot;, an array having the elements &quot;internal_encoding&quot;,
       &quot;http_output&quot;, &quot;http_input&quot;, &quot;func_overload&quot;, &quot;mail_charset&quot;,
       &quot;mail_header_encoding&quot;, &quot;mail_body_encoding&quot; will be returned. 
      
      
       If type is specified as &quot;http_output&quot;,
       &quot;http_input&quot;, &quot;internal_encoding&quot;, &quot;func_overload&quot;,
       the specified setting parameter will be returned.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   An array of type information if type 
   is not specified, otherwise a specific type.
  
 " 
"mb_http_input", "Detect HTTP input character encoding
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ([ string $type = &quot;&quot;
  ] )

  
   Detects the HTTP input character encoding.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
type

     

      
       Input string specifies the input type. 
       &quot;G&quot; for GET, &quot;P&quot; for POST, &quot;C&quot; for COOKIE, &quot;S&quot; for string, &quot;L&quot; for list, and
       &quot;I&quot; for the whole list (will return array). 
       If type is omitted, it returns the last input type processed. 
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The character encoding name, as per the type.
   If) does not process specified
   HTTP input, it returns FALSE.
  
 " 
"mb_http_output", "Set/Get HTTP output character encoding
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ([ string $encoding =)
  ] )

  
   Set/Get the HTTP output character encoding.
   Output after this function is called will be converted from the set internal encoding to encoding.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
encoding

     

      
       If encoding is set,
      ) sets the HTTP output character
       encoding to encoding.
      
      
       If encoding is omitted,
      ) returns the current HTTP output
       character encoding.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   If encoding is omitted,
  ) returns the current HTTP output
   character encoding. Otherwise, 
   Returns TRUE on success or FALSE on failure.
  
 " 
"mb_internal_encoding", "Set/Get internal character encoding
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ([ string $encoding =)
  ] )

  
   Set/Get the internal character encoding
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
encoding

     

      
       encoding is the character encoding name 
       used for the HTTP input character encoding conversion, HTTP output 
       character encoding conversion, and the default character encoding 
       for string functions defined by the mbstring module.
       You should notice that the internal encoding is totally different from the one for multibyte regex.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   If encoding is set, then 
   Returns TRUE on success or FALSE on failure.
   In this case, the character encoding for multibyte regex is NOT changed.
   If encoding is omitted, then 
   the current character encoding name is returned.
  
 " 
"mb_language", "Set/Get current language
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ([ string $language =)
  ] )

  
   Set/Get the current language.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
language

     

      
       Used for encoding
       e-mail messages. Valid languages are &quot;Japanese&quot;,
       &quot;ja&quot;,&quot;English&quot;,&quot;en&quot; and &quot;uni&quot;
       (UTF-8). mb_send_mail() uses this setting to
       encode e-mail.
      
       
       Language and its setting is ISO-2022-JP/Base64 for
       Japanese, UTF-8/Base64 for uni, ISO-8859-1/quoted printable for
       English.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   If language is set and
   language is valid, it returns
   TRUE. Otherwise, it returns FALSE. 
   When language is omitted, it returns the language
   name as a string. If no language is set previously, it then returns
   FALSE.
  
 " 
"mb_list_encodings", "Returns an array of all supported encodings
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
   Returns an array containing all supported encodings.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  This function has no parameters.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a numerically indexed array.
  
 " 
"mb_output_handler", "Callback function converts character encoding in output buffer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $contents
   , int $status
   )

  
  ) is
   ob_start() callback
   function.) converts
   characters in the output buffer from internal character encoding to
   HTTP output character encoding. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
contents

     

      
       The contents of the output buffer.
      
     

    
    
     
status

     

      
       The status of the output buffer.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The converted string.
  
 " 
"mb_parse_str", "Parse GET/POST/COOKIE data and set global variable
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $encoded_string
   [, array &amp;$result
  ] )

  
   Parses GET/POST/COOKIE data and
   sets global variables. Since PHP does not provide raw POST/COOKIE
   data, it can only be used for GET data for now. It parses URL
   encoded data, detects encoding, converts coding to internal
   encoding and set values to the result array or
   global variables.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
encoded_string

     

      
       The URL encoded data.
      
     

    
    
     
result

     

      
       An array containing decoded and character encoded converted values.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"mb_preferred_mime_name", "Get MIME charset string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $encoding
   )

  
   Get a MIME charset string for a specific encoding.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
encoding

     

      
       The encoding being checked.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The MIME charset string for character encoding
   encoding. 
  
 " 
"mb_regex_encoding", "Set/Get character encoding for multibyte regex
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ([ string $encoding =)
  ] )

  
   Set/Get character encoding for a multibyte regex.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
encoding

     

      The encoding
parameter is the character encoding. If it is omitted, the internal character
encoding value will be used.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   If encoding is set, then 
   Returns TRUE on success or FALSE on failure. 
   In this case, the internal character encoding is NOT changed.
   If encoding is omitted, then 
   the current character encoding name for a multibyte regex is returned.
  
 " 
"mb_regex_set_options", "Set/Get the default options for mbregex functions
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ([ string $options =)
  ] )

  
   Sets the default options described by options 
   for multibyte regex functions.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
options

     

      
       The options to set. This is a string where each 
       character is an option. To set a mode, the mode 
       character must be the last one set, however there 
       can only be set one mode but multiple options.
      

      Regex options
       
        Option
          Meaning
         i
          Ambiguity match on
         x
          Enables extended pattern form
         m
          '.' matches with newlines
         s
          '^' -&gt; '\A', '$' -&gt; '\Z'
         p
          Same as both the m and s options
         l
          Finds longest matches
         n
          Ignores empty matches
         e
          eval() resulting code
         Regex syntax modes
       
        Mode
          Meaning
         j
          Java (Sun java.util.regex)
         u
          GNU regex
         g
          grep
         c
          Emacs
         r
          Ruby
         z
          Perl
         b
          POSIX Basic regex
         d
          POSIX Extended regex
         

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The previous options. If options is omitted, 
   it returns the string that describes the current options.
  
 " 
"mb_send_mail", "Send encoded mail
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $to
   , string $subject
   , string $message
   [, string $additional_headers = NULL
   [, string $additional_parameter = NULL
  ]] )

  
   Sends email. Headers and messages are converted and encoded according
   to the mb_language() setting. It's a wrapper function
   for mail(), so see also mail() for details.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
to

     

      
       The mail addresses being sent to. Multiple
       recipients may be specified by putting a comma between each
       address in to. 
       This parameter is not automatically encoded.
      
     

    
    
     
subject

     

      
       The subject of the mail.
      
     

    
    
     
message

     

      
       The message of the mail.
      
     

    
    
     
additional_headers (optional)

     

      
       String to be inserted at the end of the email header.
      
      
       This is typically used to add extra headers (From, Cc, and Bcc).
       Multiple extra headers should be separated with a CRLF (\r\n).
       Validate parameter not to be injected unwanted headers by attackers.
      
      Note: 
       
        When sending mail, the mail must contain
        a From header. This can be set with the 
        additional_headers parameter, or a default
        can be set in php.ini.
       
       
        Failing to do this will result in an error
        message similar to Warning: mail(): &quot;sendmail_from&quot; not
        set in php.ini or custom &quot;From:&quot; header missing.
        The From header sets also
        Return-Path under Windows.
       
      
      Note: 
       
        If messages are not received, try using a LF (\n) only.
        Some Unix mail transfer agents (most notably
        » qmail) replace LF by CRLF
        automatically (which leads to doubling CR if CRLF is used).
        This should be a last resort, as it does not comply with
        » RFC 2822.
       
      
     

    
    
     
additional_parameter

     

      
       additional_parameter is a MTA command line
       parameter. It is useful when setting the correct Return-Path
       header when using sendmail.
      
      
       This parameter is escaped by escapeshellcmd() internally
       to prevent command execution. escapeshellcmd() prevents
       command execution, but allows to add addtional parameters. For security reason,
       this parameter should be validated.
      
      
       Since escapeshellcmd() is applied automatically, some characters
       that are allowed as email addresses by internet RFCs cannot be used. Programs
       that are required to use these characters mail() cannot be used.
      
      
       The user that the webserver runs as should be added as a trusted user to the
       sendmail configuration to prevent a 'X-Warning' header from being added
       to the message when the envelope sender (-f) is set using this method.
       For sendmail users, this file is /etc/mail/trusted-users.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"mb_split", "Split multibyte string using regular expression
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $pattern
   , string $string
   [, int $limit = -1
  ] )

  
   Split a multibyte
   string using regular expression
   pattern and returns the result as an
   array.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pattern

     

      
       The regular expression pattern.
      
     

    
    
     
string

     

      
       The string being split.
      
     

    
    
     
limit

     

      
       If optional parameter limit is specified, 
       it will be split in limit elements as
       maximum.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The result as an array.
  
 " 
"mb_strcut", "Get part of string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   , int $start
   [, int $length = NULL
   [, string $encoding = mb_internal_encoding()
  ]] )

  
  ) extracts a substring from a string similarly to
   mb_substr(), but operates on bytes instead of characters. If the
   cut position happens to be between two bytes of a multi-byte character, the cut is
   performed starting from the first byte of that character. This is also the difference
   to the substr() function, which would simply cut the string between
   the bytes and thus result in a malformed byte sequence.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The string being cut.
      
     

    
    
     
start

     

      
       If start is non-negative, the returned string
       will start at the start'th byte position in
       string, counting from zero. For instance,
       in the string 'abcdef', the byte at
       position 0 is 'a', the
       byte at position 2 is
       'c', and so forth.
      
      
       If start is negative, the returned string
       will start at the start'th byte
       from the end of string.
      
     

    
    
     
length

     

      
       Length in bytes. If omitted or NULL
       is passed, extract all bytes to the end of the string.
      
     

    
    
     
encoding

     

      The encoding
parameter is the character encoding. If it is omitted, the internal character
encoding value will be used.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns the portion of
   str specified by the
   start and
   length parameters.
  
 " 
"mb_strimwidth", "Get truncated string with specified width
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   , int $start
   , int $width
   [, string $trimmarker = &quot;&quot;
   [, string $encoding = mb_internal_encoding()
  ]] )

  
   Truncates string str to specified width. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The string being decoded.
      
     

    
    
     
start

     

      
       The start position offset. Number of
       characters from the beginning of string. (First character is 0)
      
     

    
    
     
width

     

      
       The width of the desired trim.
      
     

    
    
     
trimmarker

     

      
       A string that is added to the end of string 
       when string is truncated.
      
     

    
    
     
encoding

     

      The encoding
parameter is the character encoding. If it is omitted, the internal character
encoding value will be used.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The truncated string. If trimmarker is set,
   trimmarker is appended to the return value.
  
 " 
"mb_stripos", "Finds position of first occurrence of a string within another, case insensitive
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $haystack
   , string $needle
   [, int $offset = 0
   [, string $encoding = mb_internal_encoding()
  ]] )

  
  ) returns the numeric position of
   the first occurrence of needle in the
   haystack string.
   Unlike mb_strpos(), 
  ) is case-insensitive.
   If needle is not found, it returns FALSE.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
haystack

     

      
       The string from which to get the position of the first occurrence
       of needle
      
     

    
    
     
needle

     

      
       The string to find in haystack
      
     

    
    
     
offset

     

      
       The position in haystack
       to start searching
      
     

    
    
     
encoding

     

      
       Character encoding name to use.
       If it is omitted, internal character encoding is used.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Return the numeric position of the first occurrence of
   needle in the haystack
   string, or FALSE if needle is not found.
  
 " 
"mb_stristr", "Finds first occurrence of a string within another, case insensitive
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $haystack
   , string $needle
   [, bool $before_needle = false
   [, string $encoding = mb_internal_encoding()
  ]] )

  
  ) finds the first occurrence of
   needle in haystack
   and returns the portion of haystack.
   Unlike mb_strstr(), 
  ) is case-insensitive.
   If needle is not found, it returns FALSE.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
haystack

     

      
       The string from which to get the first occurrence
       of needle
      
     

    
    
     
needle

     

      
       The string to find in haystack
      
     

    
    
     
before_needle

     

      
       Determines which portion of haystack
       this function returns. 
       If set to TRUE, it returns all of  haystack
       from the beginning to the first occurrence of needle (excluding needle).
       If set to FALSE, it returns all of haystack
       from the first occurrence of needle to the end (including needle).
      
     

    
    
     
encoding

     

      
       Character encoding name to use.
       If it is omitted, internal character encoding is used.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the portion of haystack,
   or FALSE if needle is not found.
  
 " 
"mb_strlen", "Get string length
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( string $str
   [, string $encoding = mb_internal_encoding()
  ] )

  
   Gets the length of a string.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The string being checked for length.
      
     

    
    
     
encoding

     

      The encoding
parameter is the character encoding. If it is omitted, the internal character
encoding value will be used.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the number of characters in
   string str having character encoding
   encoding. A multi-byte character is
   counted as 1.
  
  
   Returns FALSE if the given encoding is invalid.
  
  WarningThis function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function.
 " 
"mb_strpos", "Find position of first occurrence of string in a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $haystack
   , string $needle
   [, int $offset = 0
   [, string $encoding = mb_internal_encoding()
  ]] )

  
   Finds position of the first occurrence of a string in a string.
  
  
   Performs a multi-byte safe
   strpos() operation based on number of
   characters. The first character's position is 0, the second character
   position is 1, and so on. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
haystack

     

      
       The string being checked.
      
     

    
    
     
needle

     

      
       The string to find in haystack. In contrast
       with strpos(), numeric values are not applied
       as the ordinal value of a character.
      
     

    
    
     
offset

     

      
       The search offset. If it is not specified, 0 is used.
      
     

    
    
     
encoding

     

      The encoding
parameter is the character encoding. If it is omitted, the internal character
encoding value will be used.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the numeric position of
   the first occurrence of needle in the
   haystack string. If
   needle is not found, it returns FALSE.
  
 " 
"mb_strrchr", "Finds the last occurrence of a character in a string within another
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $haystack
   , string $needle
   [, bool $part = false
   [, string $encoding = mb_internal_encoding()
  ]] )

  
  ) finds the last occurrence of
   needle in haystack
   and returns the portion of haystack.
   If needle is not found, it returns FALSE.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
haystack

     

      
       The string from which to get the last occurrence
       of needle
      
     

    
    
     
needle

     

      
       The string to find in haystack
      
     

    
    
     
part

     

      
       Determines which portion of haystack
       this function returns. 
       If set to TRUE, it returns all of haystack
       from the beginning to the last occurrence of needle.
       If set to FALSE, it returns all of haystack
       from the last occurrence of needle to the end,
      
     

    
    
     
encoding

     

      
       Character encoding name to use.
       If it is omitted, internal character encoding is used.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the portion of haystack.
   or FALSE if needle is not found.
  
 " 
"mb_strrichr", "Finds the last occurrence of a character in a string within another, case insensitive
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $haystack
   , string $needle
   [, bool $part = false
   [, string $encoding = mb_internal_encoding()
  ]] )

  
  ) finds the last occurrence of
   needle in haystack
   and returns the portion of haystack. Unlike
   mb_strrchr(),) is
   case-insensitive.
   If needle is not found, it returns FALSE.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
haystack

     

      
       The string from which to get the last occurrence
       of needle
      
     

    
    
     
needle

     

      
       The string to find in haystack
      
     

    
    
     
part

     

      
       Determines which portion of haystack
       this function returns. 
       If set to TRUE, it returns all of haystack
       from the beginning to the last occurrence of needle.
       If set to FALSE, it returns all of haystack
       from the last occurrence of needle to the end,
      
     

    
    
     
encoding

     

      
       Character encoding name to use.
       If it is omitted, internal character encoding is used.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the portion of haystack.
   or FALSE if needle is not found.
  
 " 
"mb_strripos", "Finds position of last occurrence of a string within another, case insensitive
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $haystack
   , string $needle
   [, int $offset = 0
   [, string $encoding = mb_internal_encoding()
  ]] )

  
  ) performs multi-byte safe
   strripos() operation based on
   number of characters. needle position is
   counted from the beginning of
   haystack. First character's position is
   0. Second character position is 1. 
   Unlike mb_strrpos(),
  ) is case-insensitive.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
haystack

     

      
       The string from which to get the position of the last occurrence
       of needle
      
     

    
    
     
needle

     

      
       The string to find in haystack
      
     

    
    
     
offset

     

      
       The position in haystack
       to start searching
      
     

    
    
     
encoding

     

      
       Character encoding name to use.
       If it is omitted, internal character encoding is used.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Return the numeric position of
   the last occurrence of needle in the
   haystack string, or FALSE
   if needle is not found.
  
 " 
"mb_strrpos", "Find position of last occurrence of a string in a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $haystack
   , string $needle
   [, int $offset = 0
   [, string $encoding = mb_internal_encoding()
  ]] )

  
   Performs a multibyte safe
   strrpos() operation based on the 
   number of characters. needle position is
   counted from the beginning of
   haystack. First character's position is
   0. Second character position is 1. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
haystack

     

      
       The string being checked, for the last occurrence
       of needle
      
     

    
    
     
needle

     

      
       The string to find in haystack.
      
     

    
    
     
offset

     

      
       May be specified to begin searching an arbitrary number of characters into
       the string.  Negative values will stop searching at an arbitrary point
       prior to the end of the string.
      
     

    
    
     
encoding

     

      The encoding
parameter is the character encoding. If it is omitted, the internal character
encoding value will be used.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the numeric position of
   the last occurrence of needle in the
   haystack string. If
   needle is not found, it returns FALSE.
  
 " 
"mb_strstr", "Finds first occurrence of a string within another
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $haystack
   , string $needle
   [, bool $before_needle = false
   [, string $encoding = mb_internal_encoding()
  ]] )

  
  ) finds the first occurrence of
   needle in haystack
   and returns the portion of haystack.
   If needle is not found, it returns FALSE.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
haystack

     

      
       The string from which to get the first occurrence
       of needle
      
     

    
    
     
needle

     

      
       The string to find in haystack
      
     

    
    
     
before_needle

     

      
       Determines which portion of haystack
       this function returns. 
       If set to TRUE, it returns all of  haystack
       from the beginning to the first occurrence of needle (excluding needle).
       If set to FALSE, it returns all of haystack
       from the first occurrence of needle to the end (including needle).
      
     

    
    
     
encoding

     

      
       Character encoding name to use.
       If it is omitted, internal character encoding is used.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the portion of haystack,
   or FALSE if needle is not found.
  
 " 
"mb_strtolower", "Make a string lowercase
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   [, string $encoding = mb_internal_encoding()
  ] )

  
   Returns str
   with all alphabetic characters converted to lowercase.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The string being lowercased.
      
     

    
    
     
encoding

     

      The encoding
parameter is the character encoding. If it is omitted, the internal character
encoding value will be used.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   str with all alphabetic characters converted to lowercase.
  
 " 
"mb_strtoupper", "Make a string uppercase
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   [, string $encoding = mb_internal_encoding()
  ] )

  
   Returns str
   with all alphabetic characters converted to uppercase.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The string being uppercased.
      
     

    
    
     
encoding

     

      The encoding
parameter is the character encoding. If it is omitted, the internal character
encoding value will be used.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   str with all alphabetic characters converted to uppercase.
  
 " 
"mb_strwidth", "Return width of string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $str
   [, string $encoding = mb_internal_encoding()
  ] )

  
   Returns the width of string str.
  
  
   Multi-byte characters are usually twice the width of single byte characters.
  
  
   Characters width
    
     Chars
       Width
      U+0000 - U+0019
       0
      U+0020 - U+1FFF
       1
      U+2000 - U+FF60
       2
      U+FF61 - U+FF9F
       1
      U+FFA0 -      
       2
      
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The string being decoded.
      
     

    
    
     
encoding

     

      The encoding
parameter is the character encoding. If it is omitted, the internal character
encoding value will be used.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The width of string str.
  
 " 
"mb_substitute_character", "Set/Get substitution character
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ([ mixed $substrchar =)
  ] )

  
   Specifies a substitution character when input character encoding is invalid
   or character code does not exist in output character
   encoding. Invalid characters may be substituted NULL (no output),
   string or integer value (Unicode character code value).
  
  
   This setting affects mb_convert_encoding(),
   mb_convert_variables(),
   mb_output_handler(),
   and mb_send_mail().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
substrchar

     

      
       Specify the Unicode value as an integer, 
       or as one of the following strings:
       
         
          &quot;none&quot;: no output
         
        
        
         
          &quot;long&quot;: Output character code value (Example:
          U+3000, JIS+7E7E)
         
        
        
         
          &quot;entity&quot;: Output character entity (Example:
          Ȁ)
         
        
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   If substchar is set, it returns TRUE for success,
   otherwise returns FALSE. 
   If substchar is not set, it returns the current
   setting.
  
 " 
"mb_substr", "Get part of string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   , int $start
   [, int $length = NULL
   [, string $encoding = mb_internal_encoding()
  ]] )

  
   Performs a multi-byte safe
   substr() operation based on
   number of characters. Position is
   counted from the beginning of
   str. First character's position is
   0. Second character position is 1, and so on. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The string to extract the substring from.
      
     

    
    
     
start

     

      
       If start is non-negative, the returned string
       will start at the start'th position in
       string, counting from zero. For instance,
       in the string 'abcdef', the character at
       position 0 is 'a', the
       character at position 2 is
       'c', and so forth.
      
      
       If start is negative, the returned string
       will start at the start'th character
       from the end of string.
      
     

    
    
     
length

     

      
       Maximum number of characters to use from str. If
       omitted or NULL is passed, extract all characters to
       the end of the string.
      
     

    
    
     
encoding

     

      The encoding
parameter is the character encoding. If it is omitted, the internal character
encoding value will be used.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns the portion of
   str specified by the
   start and
   length parameters.
  
 " 
"mb_substr_count", "Count the number of substring occurrences
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $haystack
   , string $needle
   [, string $encoding = mb_internal_encoding()
  ] )

  
   Counts the number of times the
   needle substring occurs in the
   haystack string.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
haystack

     

      
       The string being checked.
      
     

    
    
     
needle

     

      
       The string being found.
      
     

    
    
     
encoding

     

      The encoding
parameter is the character encoding. If it is omitted, the internal character
encoding value will be used.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The number of times the
   needle substring occurs in the
   haystack string.
  
 " 
"mcrypt_create_iv", "Creates an initialization vector (IV) from a random source
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( int $size
   [, int $source = MCRYPT_DEV_URANDOM
  ] )

  
   Creates an initialization vector (IV) from a random source.
  
  
   The IV is only meant to give an alternative seed to the encryption
   routines. This IV does not need to be secret at all, though it can be
   desirable. You even can send it along with your ciphertext without
   losing security.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
size

     

      
       The size of the IV.
      
     

    
    
     
source

     

      
       The source of the IV. The source can be
       MCRYPT_RAND (system random number generator),
       MCRYPT_DEV_RANDOM (read data from
       /dev/random) and
       MCRYPT_DEV_URANDOM (read data from
       /dev/urandom). Prior to 5.3.0,
       MCRYPT_RAND was the only one supported on Windows.
      
      
       Note that the default value of this parameter was
       MCRYPT_DEV_RANDOM prior to PHP 5.6.0.
      
      Note: 
       
        Note that MCRYPT_DEV_RANDOM may block until more
        entropy is available.
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the initialization vector, or FALSE on error.
  
 " 
"mcrypt_decrypt", "Decrypts crypttext with given parameters
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $cipher
   , string $key
   , string $data
   , string $mode
   [, string $iv
  ] )

  
   Decrypts the data and returns the unencrypted data.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
cipher

     

      One of the MCRYPT_ciphername constants, or the name of the algorithm as string.
     

    
    
     
key

     

      
       The key with which the data was encrypted. If the provided key size is
       not supported by the cipher, the function will emit a warning and return FALSE
      
     

    
    
     
data

     

      
       The data that will be decrypted with the given cipher
       and mode. If the size of the data is not n * blocksize,
       the data will be padded with '\0'.
      
     

    
    
     
mode

     

      One of the MCRYPT_MODE_modename constants, or one of the following strings: &quot;ecb&quot;, &quot;cbc&quot;, &quot;cfb&quot;, &quot;ofb&quot;, &quot;nofb&quot; or &quot;stream&quot;.
     

    
    
     
iv

     

      Used for the initialization in CBC, CFB, OFB modes, and in some algorithms in STREAM mode. If the provided IV size is not supported by the chaining mode or no IV was provided, but the chaining mode requires one, the function will emit a warning and return FALSE.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the decrypted data as a string  or FALSE on failure.
  
 " 
"mcrypt_enc_get_algorithms_name", "Returns the name of the opened algorithm
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $td
   )

  
   This function returns the name of the algorithm.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
td

     

      
       The encryption descriptor.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the name of the opened algorithm as a string.
  
 " 
"mcrypt_enc_get_block_size", "Returns the blocksize of the opened algorithm
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $td
   )

  
   Gets the blocksize of the opened algorithm.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
td

     

      
       The encryption descriptor.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the block size of the specified algorithm in bytes.
  
 " 
"mcrypt_enc_get_iv_size", "Returns the size of the IV of the opened algorithm
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $td
   )

  
   This function returns the size of the IV of the algorithm specified by the
   encryption descriptor in bytes. An IV is used in cbc, cfb and ofb modes,
   and in some algorithms in stream mode.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
td

     

      
       The encryption descriptor.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the size of the IV, or 0 if the IV is ignored by the algorithm.
  
 " 
"mcrypt_enc_get_key_size", "Returns the maximum supported keysize of the opened mode
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $td
   )

  
   Gets the maximum supported key size of the algorithm in bytes.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
td

     

      
       The encryption descriptor.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the maximum supported key size of the algorithm in bytes.
  
 " 
"mcrypt_enc_get_modes_name", "Returns the name of the opened mode
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $td
   )

  
   This function returns the name of the mode.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
td

     

      
       The encryption descriptor.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the name as a string.
  
 " 
"mcrypt_enc_get_supported_key_sizes", "Returns an array with the supported keysizes of the opened algorithm
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $td
   )

  
   Gets the supported key sizes of the opened algorithm.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
td

     

      
       The encryption descriptor.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array with the key sizes supported by the algorithm
   specified by the encryption descriptor. If it returns an empty
   array then all key sizes between 1 and
   mcrypt_enc_get_key_size() are supported by the
   algorithm.
  
 " 
"mcrypt_enc_is_block_algorithm", "Checks whether the algorithm of the opened mode is a block algorithm
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $td
   )

  
   Tells whether the algorithm of the opened mode is a block algorithm.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
td

     

      
       The encryption descriptor.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the algorithm is a block algorithm or FALSE if it is
   a stream one.
  
 " 
"mcrypt_enc_is_block_algorithm_mode", "Checks whether the encryption of the opened mode works on blocks
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $td
   )

  
   Tells whether the algorithm of the opened mode works on blocks (e.g.
   FALSE for stream, and TRUE for cbc, cfb, ofb)..
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
td

     

      
       The encryption descriptor.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the mode is for use with block algorithms, otherwise it
   returns FALSE.
  
 " 
"mcrypt_enc_is_block_mode", "Checks whether the opened mode outputs blocks
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $td
   )

  
   Tells whether the opened mode outputs blocks (e.g. TRUE for cbc and ecb,
   and FALSE for cfb and stream).
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
td

     

      
       The encryption descriptor.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the mode outputs blocks of bytes,
   or FALSE if it outputs just bytes.
  
 " 
"mcrypt_enc_self_test", "Runs a self test on the opened module
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $td
   )

  
   This function runs the self test on the algorithm specified by the
   descriptor td.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
td

     

      
       The encryption descriptor.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   If the self test succeeds it returns FALSE. In case of an error, it
   returns TRUE.
  
 " 
"mcrypt_encrypt", "Encrypts plaintext with given parameters
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $cipher
   , string $key
   , string $data
   , string $mode
   [, string $iv
  ] )

  
   Encrypts the data and returns it.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
cipher

     

      One of the MCRYPT_ciphername constants, or the name of the algorithm as string.
     

    
    
     
key

     

      
       The key with which the data will be encrypted. If the provided key size is
       not supported by the cipher, the function will emit a warning and return FALSE
      
     

    
    
     
data

     

      
       The data that will be encrypted with the given cipher
       and mode. If the size of the data is not n * blocksize,
       the data will be padded with '\0'.
      
      
       The returned crypttext can be larger than the size of the data that was
       given by data.
      
     

    
    
     
mode

     

      One of the MCRYPT_MODE_modename constants, or one of the following strings: &quot;ecb&quot;, &quot;cbc&quot;, &quot;cfb&quot;, &quot;ofb&quot;, &quot;nofb&quot; or &quot;stream&quot;.
     

    
    
     
iv

     

      Used for the initialization in CBC, CFB, OFB modes, and in some algorithms in STREAM mode. If the provided IV size is not supported by the chaining mode or no IV was provided, but the chaining mode requires one, the function will emit a warning and return FALSE.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the encrypted data as a string  or FALSE on failure.
  
 " 
"mcrypt_generic", "This function encrypts data
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $td
   , string $data
   )

  
   This function encrypts data. The data is padded with &quot;\0&quot;
   to make sure the length of the data is n * blocksize. This
   function returns the encrypted data. Note that the length
   of the returned string can in fact be longer than the input,
   due to the padding of the data.
  
  
   If you want to store the encrypted data in a database make sure to store
   the entire string as returned by or the string will not
   entirely decrypt properly.  If your original string is 10 characters long
   and the block size is 8 (use
   mcrypt_enc_get_block_size() to determine the
   blocksize), you would need at least 16 characters in your database field.
   Note the string returned by mdecrypt_generic() will be
   16 characters as well...use rtrim($str, &quot;\0&quot;) to remove the padding.
  
  
   If you are for example storing the data in a MySQL database remember that
   varchar fields automatically have trailing spaces removed during
   insertion. As encrypted data can end in a space (ASCII 32), the data will
   be damaged by this removal.  Store data in a tinyblob/tinytext (or
   larger) field instead.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
td

     

      
       The encryption descriptor.
      
      
       The encryption handle should always be initialized with
       NAME_init() with a key and an IV before
       calling this function. Where the encryption is done, you should free the
       encryption buffers by calling NAME_deinit().
       See mcrypt_module_open() for an example.
      
     

    
    
     
data

     

      
       The data to encrypt.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the encrypted data.
  
 " 
"mcrypt_generic_deinit", "This function deinitializes an encryption module
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $td
   )

  
   This function terminates encryption specified by the encryption
   descriptor (td). It clears all buffers, but does
   not close the module.  You need to call
   mcrypt_module_close() yourself. (But PHP does this for
   you at the end of the script.)
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
td

     

      
       The encryption descriptor.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"mcrypt_generic_init", "This function initializes all buffers needed for encryption
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $td
   , string $key
   , string $iv
   )

  
   You need to call this function before every call to
   mcrypt_generic() or
   mdecrypt_generic().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
td

     

      
       The encryption descriptor.
      
     

    
    
     
key

     

      
       The maximum length of the key should be the one obtained by calling
       mcrypt_enc_get_key_size() and every value smaller
       than this is legal.
      
     

    
    
     
iv

     

      
       The IV should normally have the size of the algorithms block size, but
       you must obtain the size by calling
       mcrypt_enc_get_iv_size(). IV is ignored in ECB. IV
       MUST exist in CFB, CBC, STREAM, nOFB and OFB modes. It needs to be
       random and unique (but not secret). The same IV must be used for
       encryption/decryption. If you do not want to use it you should set it
       to zeros, but this is not recommended.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The function returns a negative value on error: -3 when the key length
   was incorrect, -4 when there was a memory allocation problem and any
   other return value is an unknown error. If an error occurs a warning will
   be displayed accordingly. FALSE is returned if incorrect parameters
   were passed.
  
 " 
"mcrypt_get_block_size", "Gets the block size of the specified cipher
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( int $cipher
   )

  
   int    ( string $cipher
   , string $mode
   )

  
   The first prototype is when linked against libmcrypt 2.2.x, the
   second when linked against libmcrypt 2.4.x or 2.5.x.
  
  
  ) is used to get the
   size of a block of the specified cipher (in
   combination with an encryption mode).
  
  
   It is more useful to use the mcrypt_enc_get_block_size()
   function as this uses the resource returned by
   mcrypt_module_open().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
cipher

     

      One of the MCRYPT_ciphername constants, or the name of the algorithm as string.
     

    
    
     
mode

     

      One of the MCRYPT_MODE_modename constants, or one of the following strings: &quot;ecb&quot;, &quot;cbc&quot;, &quot;cfb&quot;, &quot;ofb&quot;, &quot;nofb&quot; or &quot;stream&quot;.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Gets the block size, as an integer.
  
 " 
"mcrypt_get_cipher_name", "Gets the name of the specified cipher
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( int $cipher
   )

  
   string    ( string $cipher
   )

  
  ) is used to get the
   name of the specified cipher.
  
  
  ) takes the cipher
   number as an argument (libmcrypt 2.2.x) or takes the cipher name
   as an argument (libmcrypt 2.4.x or higher) and returns the name of the cipher
   or FALSE, if the cipher does not exist.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
cipher

     

      One of the MCRYPT_ciphername constants, or the name of the algorithm as string.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function returns the name of the cipher or FALSE if the cipher does
   not exist.
  
 " 
"mcrypt_get_iv_size", "Returns the size of the IV belonging to a specific cipher/mode combination
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $cipher
   , string $mode
   )

  
   Gets the size of the IV belonging to a specific 
   cipher/mode combination.
  
  
   It is more useful to use the mcrypt_enc_get_iv_size()
   function as this uses the resource returned by
   mcrypt_module_open().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
cipher

     

      One of the MCRYPT_ciphername constants, or the name of the algorithm as string.
     

    
    
     
mode

     

      One of the MCRYPT_MODE_modename constants, or one of the following strings: &quot;ecb&quot;, &quot;cbc&quot;, &quot;cfb&quot;, &quot;ofb&quot;, &quot;nofb&quot; or &quot;stream&quot;.
      
       The IV is ignored in ECB mode as this mode does not require it. You will
       need to have the same IV (think: starting point) both at encryption and
       decryption stages, otherwise your encryption will fail.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the size of the Initialization Vector (IV) in bytes. On error the
   function returns FALSE. If the IV is ignored in the specified cipher/mode
   combination zero is returned.
  
 " 
"mcrypt_get_key_size", "Gets the key size of the specified cipher
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( int $cipher
   )

  
   int    ( string $cipher
   , string $mode
   )

  
   The first prototype is when linked against libmcrypt 2.2.x, the
   second when linked against libmcrypt 2.4.x or 2.5.x.
  
  
  ) is used to get the size
   of a key of the specified cipher (in
   combination with an encryption mode).
  
  
   It is more useful to use the mcrypt_enc_get_key_size()
   function as this uses the resource returned by mcrypt_module_open().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
cipher

     

      One of the MCRYPT_ciphername constants, or the name of the algorithm as string.
     

    
    
     
mode

     

      One of the MCRYPT_MODE_modename constants, or one of the following strings: &quot;ecb&quot;, &quot;cbc&quot;, &quot;cfb&quot;, &quot;ofb&quot;, &quot;nofb&quot; or &quot;stream&quot;.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the maximum supported key size of the algorithm in bytes
    or FALSE on failure.
  
 " 
"mcrypt_list_algorithms", "Gets an array of all supported ciphers
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ([ string $lib_dir = ini_get(&quot;mcrypt.algorithms_dir&quot;)
  ] )

  
   Gets the list of all supported algorithms in the
   lib_dir parameter.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
lib_dir

     

      
       Specifies the directory where all algorithms are located. If not
       specified, the value of the mcrypt.algorithms_dir
       php.ini directive is used.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array with all the supported algorithms.
  
 " 
"mcrypt_list_modes", "Gets an array of all supported modes
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ([ string $lib_dir = ini_get(&quot;mcrypt.modes_dir&quot;)
  ] )

  
   Gets the list of all supported modes in the
   lib_dir parameter.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
lib_dir

     

      
       Specifies the directory where all modes are located. If not
       specified, the value of the mcrypt.modes_dir
       php.ini directive is used.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array with all the supported modes.
  
 " 
"mcrypt_module_close", "Closes the mcrypt module
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $td
   )

  
   Closes the specified encryption handle.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
td

     

      
       The encryption descriptor.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"mcrypt_module_get_algo_block_size", "Returns the blocksize of the specified algorithm
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $algorithm
   [, string $lib_dir
  ] )

  
   Gets the blocksize of the specified algorithm.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
algorithm

     

      
       The algorithm name.
      
     

    
    
     
lib_dir

     

      
       This optional parameter can contain the location where the mode module
       is on the system.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the block size of the algorithm specified in bytes.
  
 " 
"mcrypt_module_get_algo_key_size", "Returns the maximum supported keysize of the opened mode
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $algorithm
   [, string $lib_dir
  ] )

  
   Gets the maximum supported keysize of the opened mode.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
algorithm

     

      
       The algorithm name.
      
     

    
    
     
lib_dir

     

      
       This optional parameter can contain the location where the mode module
       is on the system.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function returns the maximum supported key size of the
   algorithm specified in bytes.
  
 " 
"mcrypt_module_get_supported_key_sizes", "Returns an array with the supported keysizes of the opened algorithm
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $algorithm
   [, string $lib_dir
  ] )

  
   Returns an array with the key sizes supported by the specified algorithm.
   If it returns an empty array then all key sizes between 1 and
   mcrypt_module_get_algo_key_size() are supported by the
   algorithm.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
algorithm

     

      
       The algorithm to be used.
      
     

    
    
     
lib_dir

     

      
       The optional lib_dir parameter can contain the
       location where the algorithm module is on the system.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array with the key sizes supported by the specified algorithm.
   If it returns an empty array then all key sizes between 1 and
   mcrypt_module_get_algo_key_size() are supported by the
   algorithm.
  
 " 
"mcrypt_module_is_block_algorithm", "This function checks whether the specified algorithm is a block algorithm
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $algorithm
   [, string $lib_dir
  ] )

  
   This function returns TRUE if the specified algorithm is a block
   algorithm, or FALSE if it is a stream one.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
algorithm

     

      
       The algorithm to check.
      
     

    
    
     
lib_dir

     

      
       The optional lib_dir parameter can contain the
       location where the algorithm module is on the system.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function returns TRUE if the specified algorithm is a block
   algorithm, or FALSE if it is a stream one.
  
 " 
"mcrypt_module_is_block_algorithm_mode", "Returns if the specified module is a block algorithm or not
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $mode
   [, string $lib_dir
  ] )

  
   This function returns TRUE if the mode is for use with block
   algorithms, otherwise it returns FALSE. (e.g. FALSE for stream, and
   TRUE for cbc, cfb, ofb).
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
mode

     

      
       The mode to check.
      
     

    
    
     
lib_dir

     

      
       The optional lib_dir parameter can contain the
       location where the algorithm module is on the system.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function returns TRUE if the mode is for use with block
   algorithms, otherwise it returns FALSE. (e.g. FALSE for stream, and
   TRUE for cbc, cfb, ofb).
  
 " 
"mcrypt_module_is_block_mode", "Returns if the specified mode outputs blocks or not
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $mode
   [, string $lib_dir
  ] )

  
   This function returns TRUE if the mode outputs blocks of bytes or
   FALSE if it outputs just bytes. (e.g. TRUE for cbc and ecb, and
   FALSE for cfb and stream).
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
mode

     

      One of the MCRYPT_MODE_modename constants, or one of the following strings: &quot;ecb&quot;, &quot;cbc&quot;, &quot;cfb&quot;, &quot;ofb&quot;, &quot;nofb&quot; or &quot;stream&quot;.
     

    
    
     
lib_dir

     

      
       The optional lib_dir parameter can contain the
       location where the algorithm module is on the system.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function returns TRUE if the mode outputs blocks of bytes or
   FALSE if it outputs just bytes. (e.g. TRUE for cbc and ecb, and
   FALSE for cfb and stream).
  
 " 
"mcrypt_module_open", "Opens the module of the algorithm and the mode to be used
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( string $algorithm
   , string $algorithm_directory
   , string $mode
   , string $mode_directory
   )

  
   This function opens the module of the algorithm and the mode to be used.
   The name of the algorithm is specified in algorithm, e.g. &quot;twofish&quot; or is
   one of the MCRYPT_ciphername constants.  The module is closed by calling
   mcrypt_module_close().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
algorithm

     

      One of the MCRYPT_ciphername constants, or the name of the algorithm as string.
     

    
    
     
algorithm_directory

     

      
       The algorithm_directory parameter is used to locate
       the encryption module. When you supply a directory name, it is used.  When
       you set it to an empty string (&quot;&quot;), the value set by the
       mcrypt.algorithms_dir php.ini directive is used. When
       it is not set, the default directory that is used is the one that was compiled
       into libmcrypt (usually /usr/local/lib/libmcrypt).
      
     

    
    
     
mode

     

      One of the MCRYPT_MODE_modename constants, or one of the following strings: &quot;ecb&quot;, &quot;cbc&quot;, &quot;cfb&quot;, &quot;ofb&quot;, &quot;nofb&quot; or &quot;stream&quot;.
     

    
    
     
mode_directory

     

      
       The mode_directory parameter is used to locate
       the encryption module. When you supply a directory name, it is used.  When
       you set it to an empty string (&quot;&quot;), the value set by the
       mcrypt.modes_dir php.ini directive is used. When
       it is not set, the default directory that is used is the one that was compiled-in
       into libmcrypt (usually /usr/local/lib/libmcrypt).
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Normally it returns an encryption descriptor, or FALSE on error.
  
 " 
"mcrypt_module_self_test", "This function runs a self test on the specified module
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $algorithm
   [, string $lib_dir
  ] )

  
   This function runs the self test on the algorithm specified.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
algorithm

     

      One of the MCRYPT_ciphername constants, or the name of the algorithm as string.
     

    
    
     
lib_dir

     

      
       The optional lib_dir parameter can contain the
       location where the algorithm module is on the system.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The function returns TRUE if the self test succeeds, or FALSE when it
   fails.
  
 " 
"md5", "Calculate thehash of a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   [, bool $raw_output = false
  ] )

  
   Calculates the MD5 hash of str using the
   » RSA Data Security, Inc.
   MD5 Message-Digest Algorithm, and returns that hash.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The string.
      
     

    
    
     
raw_output

     

      
       If the optional raw_output is set to TRUE,
       then thedigest is instead returned in raw binary format with a
       length of 16.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the hash as a 32-character hexadecimal number. 
  
 " 
"md5_file", "Calculates the md5 hash of a given file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $filename
   [, bool $raw_output = false
  ] )

  
   Calculates the MD5 hash of the file specified by the
   filename parameter using the
   » RSA Data Security, Inc. 
   MD5 Message-Digest Algorithm, and returns that hash.
   The hash is a 32-character hexadecimal number.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       The filename
      
     

    
    
     
raw_output

     

      
       When TRUE, returns the digest in raw binary format with a length of
       16.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string on success, FALSE otherwise.
  
 " 
"mdecrypt_generic", "Decrypts data
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $td
   , string $data
   )

  
   This function decrypts data. Note that the length of the returned string
   can in fact be longer than the unencrypted string, due to the padding of
   the data.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
td

     

      
       An encryption descriptor returned by
       mcrypt_module_open()
      
     

    
    
     
data

     

      
       Encrypted data.
      
     

    
   " 
"memory_get_peak_usage", "Returns the peak of memory allocated by PHP
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ([ bool $real_usage = false
  ] )

  
   Returns the peak of memory, in bytes, that's been allocated to your PHP
   script.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
real_usage

     

      
       Set this to TRUE to get the real size of memory allocated from
       system. If not set or FALSE only the memory used by
       emalloc() is reported.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the memory peak in bytes.
  
 " 
"memory_get_usage", "Returns the amount of memory allocated to PHP
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ([ bool $real_usage = false
  ] )

  
   Returns the amount of memory, in bytes, that's currently being
   allocated to your PHP script.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
real_usage

     

      
       Set this to TRUE to get total memory allocated from
       system, including unused pages. 
       If not set or FALSE only the used memory is reported.
      
     

    
   Note: 
   PHP does not track memory that is not allocated by emalloc()
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the memory amount in bytes.
  
 " 
"metaphone", "Calculate thekey of a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   [, int $phonemes = 0
  ] )

  
   Calculates thekey of str.
  
  
   Similar to soundex()creates the same key for
   similar sounding words. It's more accurate than
   soundex() as it knows the basic rules of English
   pronunciation.  Thegenerated keys are of variable length.
  
  
   Metaphone was developed by Lawrence Philips
   . It is described in [&quot;Practical
   Algorithms for Programmers&quot;, Binstock &amp; Rex, Addison Wesley,
   1995].
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The input string.
      
     

    
    
     
phonemes

     

      
       This parameter restricts the returnedkey to 
       phonemes characters in length.
       The default value of 0 means no restriction.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns thekey as a string,  or FALSE on failure.
  
 " 
"method_exists", "Checks if the class method exists
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( mixed $object
   , string $method_name
   )

  
   Checks if the class method exists in the given
   object.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
object

     

      
       An object instance or a class name
      
     

    
    
     
method_name

     

      
       The method name
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the method given by method_name
   has been defined for the given object, FALSE 
   otherwise.
  
 " 
"mhash", "Computes hash
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( int $hash
   , string $data
   [, string $key
  ] )

  
  ) applies a hash function specified by
   hash to the data.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
hash

     

      
       The hash ID. One of the MHASH_hashname constants.
      
     

    
    
     
data

     

      
       The user input, as a string.
      
     

    
    
     
key

     

      
       If specified, the function will return the resulting HMAC instead.
       HMAC is keyed hashing for message authentication, or simply a message
       digest that depends on the specified key. Not all algorithms 
       supported incan be used in HMAC mode.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the resulting hash (also called digest) or HMAC as a string, or
   FALSE on error.
  
 " 
"mhash_count", "Gets the highest available hash ID
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   Gets the highest available hash ID.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the highest available hash ID. Hashes are numbered from 0 to this
   hash ID.
  
 " 
"mhash_get_block_size", "Gets the block size of the specified hash
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( int $hash
   )

  
   Gets the size of a block of the specified hash.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
hash

     

      
       The hash ID. One of the MHASH_hashname constants.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the size in bytes or FALSE, if the hash
   does not exist.
  
 " 
"mhash_get_hash_name", "Gets the name of the specified hash
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( int $hash
   )

  
   Gets the name of the specified hash.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
hash

     

      
       The hash ID. One of the MHASH_hashname constants.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the name of the hash or FALSE, if the hash does not exist.
  
 " 
"mhash_keygen_s2k", "Generates a key
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( int $hash
   , string $password
   , string $salt
   , int $bytes
   )

  
   Generates a key according to the given hash, using an user
   provided password.
  
  
   This is the Salted S2K algorithm as specified in the OpenPGP
   document (» RFC 2440).
  
  
   Keep in mind that user supplied passwords are not really suitable
   to be used as keys in cryptographic algorithms, since users normally
   choose keys they can write on keyboard. These passwords use
   only 6 to 7 bits per character (or less). It is highly recommended
   to use some kind of transformation (like this function) to the user
   supplied key.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
hash

     

      
       The hash ID used to create the key.
       One of the MHASH_hashname constants.
      
     

    
    
     
password

     

      
       An user supplied password.
      
     

    
    
     
salt

     

      
       Must be different and random enough for every key you generate in
       order to create different keys. Because salt
       must be known when you check the keys, it is a good idea to append
       the key to it. Salt has a fixed length of 8 bytes and will be padded
       with zeros if you supply less bytes.
      
     

    
    
     
bytes

     

      
       The key length, in bytes.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the generated key as a string, or FALSE on error.
  
 " 
"microtime", "Return current Unix timestamp with microseconds
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ([ bool $get_as_float = false
  ] )

  
  ) returns the current Unix timestamp with
   microseconds. This function is only available on operating systems that
   support the gettimeofday() system call.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
get_as_float

     

      
       If used and set to TRUE,) will return a
       float instead of a string, as described in
       the return values section below.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   By default,) returns a string in
   the form &quot;msec sec&quot;, where sec is the number of seconds 
   since the Unix epoch (0:00:00 January 1,1970 GMT), and msec 
   measures microseconds that have elapsed since sec 
   and is also expressed in seconds.
  
  
   If get_as_float is set to TRUE, then
  ) returns a float, which
   represents the current time in seconds since the Unix epoch accurate to the
   nearest microsecond.
  
 " 
"mime_content_type", "Detect MIME Content-type for a file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $filename
   )

  
   Returns the MIME content type for a file as determined by using
   information from the magic.mime file. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the tested file.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the content type in MIME format, like 
   text<BR>lain or application/octet-stream.
  
 " 
"min", "Find lowest value
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    mixed     ( array $values
    )

   
    mixed     ( mixed $value1
    , mixed $value2
    [, mixed $...
   ] )

  
   If the first and only parameter is an array,)
   returns the lowest value in that array. If at least two parameters are 
   provided,) returns the smallest of these values.
  
  Note: 
   
    Values of different types will be compared using the 
    standard comparison rules. For instance, a non-numeric string will be
    compared to an integer as though it were 0, but multiple
    string values will be compared alphanumerically. The actual value returned will be of the
    original type with no conversion applied.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
values

     

      
       An array containing the values.
      
     

    
    
     
value1

     

      
       Any comparable
       value.
      
     

    
    
     
value2

     

      
       Any comparable
       value.
      
     

    
    
     
...

     

      
       Any comparable
       value.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns the parameter value considered &quot;lowest&quot; according to standard
   comparisons. If multiple values of different types evaluate as equal (e.g. 0
   and 'abc') the first provided to the function will be returned.
  

  
   If an empty array is passed, then FALSE will be returned and an
   E_WARNING error will be emitted.
  
 " 
"mkdir", "Makes directory
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $pathname
   [, int $mode = 0777
   [, bool $recursive = false
   [, resource $context
  ]]] )

  
   Attempts to create the directory specified by pathname. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pathname

     

      
       The directory path.
      
     

    
    
     
mode

     

      
       The mode is 0777 by default, which means the widest possible
       access. For more information on modes, read the details
       on the chmod() page.
      
      Note: 
       
        mode is ignored on Windows.
       
      
      
       Note that you probably want to specify the mode as an octal number,
       which means it should have a leading zero. The mode is also modified
       by the current umask, which you can change using
       umask().
      
     

    
    
     
recursive

     

      
       Allows the creation of nested directories specified in the 
       pathname.
      
     

    
    
     
context

     

      Note: Context support was added
with PHP 5.0.0. For a description of contexts, refer to
Streams.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"mktime", "Get Unix timestamp for a date
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ([ int $hour = date(&quot;H&quot;)
   [, int $minute = date(&quot;i&quot;)
   [, int $second = date(&quot;s&quot;)
   [, int $month = date(&quot;n&quot;)
   [, int $day = date(&quot;j&quot;)
   [, int $year = date(&quot;Y&quot;)
   [, int $is_dst = -1
  ]]]]]]] )

  
   Returns the Unix timestamp corresponding to the arguments
   given. This timestamp is a long integer containing the number of
   seconds between the Unix Epoch (January 1 1970 00:00:00 GMT) and the time
   specified.
  
  
   Arguments may be left out in order from right to left; any
   arguments thus omitted will be set to the current value according
   to the local date and time.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
hour

     

      
       The number of the hour relative to the start of the day determined by
       month, day and year.
       Negative values reference the hour before midnight of the day in question.
       Values greater than 23 reference the appropriate hour in the following day(s).
      
     

    
    
     
minute

     

      
       The number of the minute relative to the start of the hour.
       Negative values reference the minute in the previous hour.
       Values greater than 59 reference the appropriate minute in the following hour(s).
      
     

    
    
     
second

     

      
       The number of seconds relative to the start of the minute.
       Negative values reference the second in the previous minute.
       Values greater than 59 reference the appropriate second in the following minute(s).
      
     

    
    
     
month

     

      
       The number of the month relative to the end of the previous year.
       Values 1 to 12 reference the normal calendar months of the year in question.
       Values less than 1 (including negative values) reference the months in the previous year in reverse order, so 0 is December, -1 is November, etc.
       Values greater than 12 reference the appropriate month in the following year(s).
      
     

    
    
     
day

     

      
       The number of the day relative to the end of the previous month.
       Values 1 to 28, 29, 30 or 31 (depending upon the month) reference the normal days in the relevant month.
       Values less than 1 (including negative values) reference the days in the previous month, so 0 is the last day of the previous month, -1 is the day before that, etc.
       Values greater than the number of days in the relevant month reference the appropriate day in the following month(s).
      
     

    
    
     
year

     

      
       The number of the year, may be a two or four digit value,
       with values between 0-69 mapping to 2000-2069 and 70-100 to
       1970-2000. On systems where time_t is a 32bit signed integer, as
       most common today, the valid range for year 
       is somewhere between 1901 and 2038. However, before PHP 5.1.0 this
       range was limited from 1970 to 2038 on some systems (e.g. Windows).
      
     

    
    
     
is_dst

     

      
       This parameter can be set to 1 if the time is during daylight savings time (DST), 
       0 if it is not, or -1 (the default) if it is unknown whether the time is within 
       daylight savings time or not. If it's unknown, PHP tries to figure it out itself.
       This can cause unexpected (but not incorrect) results.
       Some times are invalid if DST is enabled on the system PHP is running on or 
       is_dst is set to 1. If DST is enabled in e.g. 2:00, all times 
       between 2:00 and 3:00 are invalid and) returns an undefined 
       (usually negative) value. 
       Some systems (e.g. Solaris 8) enable DST at midnight so time 0:30 of the day when DST 
       is enabled is evaluated as 23:30 of the previous day.
      
      Note: 
       
        As of PHP 5.1.0, this parameter became deprecated. As a result, the
        new timezone handling features should be used instead.
       
      
      Note: 
       
        This parameter has been removed in PHP 7.0.0.
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre> 
  
  ) returns the Unix timestamp of the arguments
   given.
   If the arguments are invalid, the function returns FALSE (before PHP 5.1
   it returned -1).
  
 " 
"money_format", "Formats a number as a currency string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $format
   , float $number
   )

  
  ) returns a formatted version of
   number.  This function wraps the C library
   function strfmon(), with the difference that
   this implementation converts only one number at a time.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
format

     

      
       The format specification consists of the following sequence:
       a % character
        optional flags
        optional field width
        optional left precision
        optional right precision
        a required conversion character
       
       Flags
       
       One or more of the optional flags below can be used:
        
=f

          

           
            The character = followed by a (single byte)
            character f to be used as the numeric fill
            character. The default fill character is space.
           
          

         
         
          
^

          

           
            Disable the use of grouping characters (as defined
            by the current locale).
           
          

         
         
          
+ or (

          

           
            Specify the formatting style for positive and negative numbers.
            If + is used, the locale's equivalent for
            + and - will be used. If
            ( is used, negative amounts are enclosed in
            parenthesis. If no specification is given, the default is
            +.
           
          

         
         
          
!

          

           
            Suppress the currency symbol from the output string.
           
          

         
         
          
-

          

           
            If present, it will make all fields left-justified (padded to the
            right), as opposed to the default which is for the fields to be
            right-justified (padded to the left).
           
          

         
        
       Field width
       
        
w

          

           
            A decimal digit string specifying a minimum field width. Field will
            be right-justified unless the flag - is used.
            Default value is 0 (zero).
           
          

         
        
       Left precision
       
        
#n

          

           
            The maximum number of digits (n) expected
            to the left of the decimal character (e.g. the decimal point). It is
            used usually to keep formatted output aligned in the same columns,
            using the fill character if the number of digits is less than
            n. If the number of actual digits is
            bigger than n, then this specification is
            ignored.
           
           
            If grouping has not been suppressed using the ^
            flag, grouping separators will be inserted before the fill
            characters (if any) are added. Grouping separators will not be
            applied to fill characters, even if the fill character is a digit.
           
           
            To ensure alignment, any characters appearing before or after the
            number in the formatted output such as currency or sign symbols are
            padded as necessary with space characters to make their positive and
            negative formats an equal length.
           
          

         
        
       
        Right precision
       
       
        
.p

          

           
            A period followed by the number of digits
            (p) after the decimal character. If the
            value of p is 0 (zero), the decimal
            character and the digits to its right will be omitted. If no right
            precision is included, the default will dictated by the current
            local in use. The amount being formatted is rounded to the specified
            number of digits prior to formatting.
           
          

         
        
       
        Conversion characters
       
       
        
i

          

           
            The number is formatted according to the locale's international
            currency format (e.g. for the USA locale: USD 1,234.56).
           
          

         
         
          
n

          

           
            The number is formatted according to the locale's national
            currency format (e.g. for the de_DE locale: EU1.234,56).
           
          

         
         
          
%

          

           
            Returns the % character.
           
          

         
        

    
    
     
number

     

      
       The number to be formatted.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the formatted string. Characters before and after the formatting
   string will be returned unchanged.
   Non-numeric number causes returning NULL and
   emitting E_WARNING.
  
 " 
"move_uploaded_file", "Moves an uploaded file to a new location
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $filename
   , string $destination
   )

  
   This function checks to ensure that the file designated by
   filename is a valid upload file (meaning
   that it was uploaded via PHP's HTTP POST upload mechanism). If
   the file is valid, it will be moved to the filename given by
   destination.
  
  
   This sort of check is especially important if there is any chance
   that anything done with uploaded files could reveal their
   contents to the user, or even to other users on the same
   system.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       The filename of the uploaded file.
      
     

    
    
     
destination

     

      
       The destination of the moved file.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success.
  
  
   If filename is not a valid upload file,
   then no action will occur, and
  ) will return
   FALSE.
  
  
   If filename is a valid upload file, but
   cannot be moved for some reason, no action will occur, and
  ) will return
   FALSE. Additionally, a warning will be issued.
  
 " 
"mt_getrandmax", "Show largest possible random value
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    int     ( void
    )

  
   Returns the maximum value that can be returned by a call to
   mt_rand().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the maximum random value returned by a call to
   mt_rand() without arguments, which is the maximum value 
   that can be used for its max parameter without the
   result being scaled up (and therefore less random).
  
 " 
"mt_rand", "Generate a better random value
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   int    ( int $min
   , int $max
   )

  
   Many random number generators of older libcs have dubious or
   unknown characteristics and are slow. By default, PHP uses the
   libc random number generator with the rand()
   function.  The) function is a drop-in
   replacement for this.  It uses a random number generator with
   known characteristics using the » 
   Mersenne Twister, which will produce random numbers four times
   faster than what the average libc rand() provides.
  
  
   If called without the optional min,
   max arguments)
   returns a pseudo-random value between 0 and
   mt_getrandmax().  If you want a random number
   between 5 and 15 (inclusive), for example, use5,
   15).
  
  CautionThis function does not
generate cryptographically secure values, and should not be used for cryptographic purposes. If you need a
cryptographically secure value, consider using random_int(), random_bytes(), or
openssl_random_pseudo_bytes() instead.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
min

     

      
       Optional lowest value to be returned (default: 0)
      
     

    
    
     
max

     

      
       Optional highest value to be returned (default: mt_getrandmax())
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   A random integer value between min (or 0)
   and max (or mt_getrandmax(), inclusive),
   or FALSE if max is less than min.
  
 " 
"mt_srand", "Seed the better random number generator
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    void     ([ int $seed
   ] )

  
   Seeds the random number generator with
   seed or with a random value
   if no seed is given.
  

  Note: There is no need
to seed the random number generator with srand() or) as this is done automatically.


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
seed

     

      
       An optional seed value
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"mysqli_autocommit", "Turns on or off auto-committing database modifications
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool mysqli::autocommit
    ( bool $mode
   )

  Procedural style
  
   bool    ( mysqli $link
   , bool $mode
   )

  
   Turns on or off auto-commit mode on queries for the database connection.
  
  
   To determine the current state of autocommit use the SQL command
   SELECT @@autocommit.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

link

<br />Procedural style only: A link identifier
returned by mysqli_connect() or mysqli_init()


    
     
mode

     

      
       Whether to turn on auto-commit or not.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"mysqli_close", "Closes a previously opened database connection
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool mysqli::close
    ( void
   )

  Procedural style
  
   bool    ( mysqli $link
   )

  
   Closes a previously opened database connection.
  
  
Open non-persistent MySQL connections and result sets are automatically destroyed when a 
PHP script finishes its execution. So, while explicitly closing open 
connections and freeing result sets is optional, doing so is recommended. 
This will immediately return resources to PHP and MySQL, which can 
improve performance. For related information, see 
freeing resources
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

link

<br />Procedural style only: A link identifier
returned by mysqli_connect() or mysqli_init()


   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"mysqli_commit", "Commits the current transaction
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool mysqli::commit
    ([ int $flags
   [, string $name
  ]] )

  Procedural style
  
   bool    ( mysqli $link
   [, int $flags
   [, string $name
  ]] )

  
   Commits the current transaction for the database connection.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

link

<br />Procedural style only: A link identifier
returned by mysqli_connect() or mysqli_init()


    
     
flags

     

      
       A bitmask of MYSQLI_TRANS_COR_* constants.
      
     

    
    
     
name

     

      
       If provided then COMMIT/*name*/ is executed.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"mysqli_connect", "Alias of mysqli::__construct()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  mysqli::__construct()
  
  
   Although the mysqli::__construct() documentation also includes
   procedural examples that use the) function, here
   is a short example:
  
 " 
"mysqli_debug", "Performs debugging operations
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool mysqli::debug
    ( string $message
   )

  Procedural style
  
   bool    ( string $message
   )

  
   Performs debugging operations using the Fred Fish debugging library.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
message

     

      
       A string representing the debugging operation to perform
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE.
  
 " 
"mysqli_errno", "Returns the error code for the most recent function call
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  int $mysqli-&gt;errno;

  Procedural style
  
   int    ( mysqli $link
   )

  
   Returns the last error code for the most recent MySQLi function call that
   can succeed or fail.
  
  
   Client error message numbers are listed in the MySQL 
   errmsg.h header file, server error message numbers
   are listed in mysqld_error.h.
   In the MySQL source distribution you can find a complete list of error
   messages and error numbers in the file 
   Docs/mysqld_error.txt.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

link

<br />Procedural style only: A link identifier
returned by mysqli_connect() or mysqli_init()


   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   An error code value for the last call, if it failed. zero means no error
   occurred.
  
 " 
"mysqli_error", "Returns a string description of the last error
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  string $mysqli-&gt;error;

  Procedural style
  
   string    ( mysqli $link
   )

  
   Returns the last error message for the most recent MySQLi function call
   that can succeed or fail.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

link

<br />Procedural style only: A link identifier
returned by mysqli_connect() or mysqli_init()


   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
    A string that describes the error. An empty string if no error occurred.
  
 " 
"mysqli_escape_string", "Alias of mysqli_real_escape_string()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  mysqli_real_escape_string().
  
 " 
"mysqli_execute", "Alias for mysqli_stmt_execute()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of mysqli_stmt_execute().
  
 " 
"mysqli_get_links_stats", "Return information about open and cached links
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
  ) returns information about open
   and cached MySQL links.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  This function has no parameters.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns an associative array
   with three elements, keyed as follows:
   
total

     

      
       An integer indicating the total number of open links in
       any state.
      
     

    
    
     
active_plinks

     

      
       An integer representing the number of active persistent
       connections.
      
     

    
    
     
cached_plinks

     

      
       An integer representing the number of inactive persistent
       connections.
      
     

    
   " 
"mysqli_info", "Retrieves information about the most recently executed query
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  string $mysqli-&gt;info;

  Procedural style
  
   string    ( mysqli $link
   )

  
   The) function returns a string providing
   information about the last query executed. The nature of this string is
   provided below:
  
  
  Possiblereturn values
   
    Query type
      Example result string
     INSERT INTO...SELECT...
      Records: 100 Duplicates: 0 Warnings: 0
     INSERT INTO...VALUES (...),(...),(...)
      Records: 3 Duplicates: 0 Warnings: 0
     LOAD DATA INFILE ...
      Records: 1 Deleted: 0 Skipped: 0 Warnings: 0
     ALTER TABLE ...
      Records: 3 Duplicates: 0 Warnings: 0
     UPDATE ...
      Rows matched: 40 Changed: 40 Warnings: 0
     Note: 
   
    Queries which do not fall into one of the preceding formats are not supported.
    In these situations,) will return an empty string.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

link

<br />Procedural style only: A link identifier
returned by mysqli_connect() or mysqli_init()


   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   A character string representing additional information about the most recently executed query.
  
 " 
"mysqli_init", "Initializes MySQLi and returns a resource for use with mysqli_real_connect()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   mysqli mysqli::init
    ( void
   )

  Procedural style
  
   mysqli    ( void
   )

  
   Allocates or initializes a MYSQL object suitable for
   mysqli_options() and mysqli_real_connect().
  
  Note: 
   
    Any subsequent calls to any mysqli function (except mysqli_options())
    will fail until mysqli_real_connect() was called.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an object.
  
 " 
"mysqli_kill", "Asks the server to kill a MySQL thread
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool mysqli::kill
    ( int $processid
   )

  Procedural style
  
   bool    ( mysqli $link
   , int $processid
   )

  
   This function is used to ask the server to kill a MySQL thread specified
   by the processid parameter. This value must be
   retrieved by calling the mysqli_thread_id() function.
  
  
   To stop a running query you should use the SQL command
   KILL QUERY processid.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

link

<br />Procedural style only: A link identifier
returned by mysqli_connect() or mysqli_init()


   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"mysqli_options", "Set options
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool mysqli::options
    ( int $option
   , mixed $value
   )

  Procedural style
  
   bool    ( mysqli $link
   , int $option
   , mixed $value
   )

  
   Used to set extra connect options and affect behavior for a connection.
  
  
   This function may be called multiple times to set several options.
  
  
  ) should be called after
   mysqli_init() and before
   mysqli_real_connect().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

link

<br />Procedural style only: A link identifier
returned by mysqli_connect() or mysqli_init()


    
     
option

     

      
       The option that you want to set. It can be one of the following values:
       Valid options
        
         Name
           </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
          MYSQLI_OPT_CONNECT_TIMEOUT
           connection timeout in seconds (supported on Windows with TCP/IP since PHP 5.3.1)
          MYSQLI_OPT_LOCAL_INFILE
           enable/disable use of LOAD LOCAL INFILE
          MYSQLI_INIT_COMMAND
           command to execute after when connecting to MySQL server
          MYSQLI_READ_DEFAULT_FILE
           
            Read options from named option file instead of my.cnf
           
          MYSQLI_READ_DEFAULT_GROUP
           
            Read options from the named group from my.cnf
            or the file specified with MYSQL_READ_DEFAULT_FILE.
           
          MYSQLI_SERVER_PUBLIC_KEY
           
             RSA public key file used with the SHA-256 based authentication.
           
          MYSQLI_OPT_NET_CMD_BUFFER_SIZE
           
             The size of the internal command/network buffer. Only valid for
             mysqlnd.
           
          MYSQLI_OPT_NET_READ_BUFFER_SIZE
           
             Maximum read chunk size in bytes when reading the body of a MySQL
             command packet. Only valid for mysqlnd.
           
          MYSQLI_OPT_INT_AND_FLOAT_NATIVE
           
             Convert integer and float columns back to PHP numbers. Only valid
             for mysqlnd.
           
          MYSQLI_OPT_SSL_VERIFY_SERVER_CERT
           
           
          

    
    
     
value

     

      
       The value for the option.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"mysqli_ping", "Pings a server connection, or tries to reconnect if the connection has gone down
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool mysqli::ping
    ( void
   )

  Procedural style
  
   bool    ( mysqli $link
   )

  
   Checks whether the connection to the server is working. If it has gone
   down, and global option mysqli.reconnect is enabled
   an automatic reconnection is attempted.
  
  
   This function can be used by clients that remain idle for a long while,
   to check whether the server has closed the connection and reconnect if
   necessary.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

link

<br />Procedural style only: A link identifier
returned by mysqli_connect() or mysqli_init()


   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"mysqli_poll", "Poll connections
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   public static int mysqli::poll
    ( array &amp;$read
   , array &amp;$error
   , array &amp;$reject
   , int $sec
   [, int $usec
  ] )

  Procedural style
  
   int    ( array &amp;$read
   , array &amp;$error
   , array &amp;$reject
   , int $sec
   [, int $usec
  ] )

  
   Poll connections.
   Available only with mysqlnd.
   The method can be used as
   static.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
read

     

      
       List of connections to check for outstanding results that can be read.
      
     

    
    
     
error

     

      
      List of connections on which an error occured, for example, query
      failure or lost connection.
      
     

    
    
     
reject

     

      
      List of connections rejected because no asynchronous query
      has been run on for which the function could poll results.
      
     

    
    
     
sec

     

      
       Number of seconds to wait, must be non-negative.
      
     

    
    
     
usec

     

      
       Number of microseconds to wait, must be non-negative.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns number of ready connections upon success, FALSE otherwise.
  
 " 
"mysqli_prepare", "Prepare an SQL statement for execution
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   mysqli_stmt mysqli::prepare
    ( string $query
   )

  Procedural style
  
   mysqli_stmt    ( mysqli $link
   , string $query
   )

  
   Prepares the SQL query, and returns a statement handle to be used for further
   operations on the statement. The query must consist of a single SQL statement.
  
  
   The parameter markers must be bound to application variables using
   mysqli_stmt_bind_param() and/or 
   mysqli_stmt_bind_result() before executing the
   statement or fetching rows.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

link

<br />Procedural style only: A link identifier
returned by mysqli_connect() or mysqli_init()


    
     
query

     

      
       The query, as a string.
      
      Note: 
       
        You should not add a terminating semicolon or \g
        to the statement.
       
      
      
       This parameter can include one or more parameter markers in the SQL
       statement by embedding question mark (?) characters
       at the appropriate positions.
      
      Note: 
       
        The markers are legal only in certain places in SQL statements.
        For example, they are allowed in the VALUES()
        list of an INSERT statement (to specify column
        values for a row), or in a comparison with a column in a
        WHERE clause to specify a comparison value.
       
       
        However, they are not allowed for identifiers (such as table or
        column names), in the select list that names the columns to be
        returned by a SELECT statement, or to specify both
        operands of a binary operator such as the = equal
        sign. The latter restriction is necessary because it would be
        impossible to determine the parameter type. It's not allowed to
        compare marker with NULL by 
        ? IS NULL too. In general, parameters are legal
        only in Data Manipulation Language (DML) statements, and not in Data
        Definition Language (DDL) statements.
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns a statement object or FALSE if an error occurred.
  
 " 
"mysqli_query", "Performs a query on the database
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   mixed mysqli::query
    ( string $query
   [, int $resultmode = MYSQLI_STORE_RESULT
  ] )

  Procedural style
  
   mixed    ( mysqli $link
   , string $query
   [, int $resultmode = MYSQLI_STORE_RESULT
  ] )

  
   Performs a query against the database.
  
  
   For non-DML queries (not INSERT, UPDATE or DELETE),
   this function is similar to calling 
   mysqli_real_query() followed by either
   mysqli_use_result() or 
   mysqli_store_result().
  
  Note: 
   
    In the case where you pass a statement to
   ) that is longer than
    max_allowed_packet of the server, the returned
    error codes are different depending on whether you are using MySQL
    Native Driver (mysqlnd) or MySQL Client Library
    (libmysqlclient). The behavior is as follows:
   
   
     
      mysqlnd on Linux returns an error code of 1153.
      The error message means &quot;got a packet bigger than
      max_allowed_packet bytes&quot;.
     
    
    
     
      mysqlnd on Windows returns an error code 2006.
      This error message means &quot;server has gone away&quot;.
     
    
    
     
      libmysqlclient on all platforms returns an error code
      2006. This error message means &quot;server has gone
      away&quot;.
     
    
   
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

link

<br />Procedural style only: A link identifier
returned by mysqli_connect() or mysqli_init()


    
     
query

     

      
       The query string.
      
      
       Data inside the query should be properly escaped.
      
     

    
    
     
resultmode

     

      
       Either the constant MYSQLI_USE_RESULT or
       MYSQLI_STORE_RESULT depending on the desired
       behavior. By default, MYSQLI_STORE_RESULT is used.
      
      
       If you use MYSQLI_USE_RESULT all subsequent calls
       will return error Commands out of sync unless you
       call mysqli_free_result()
      
      
       With MYSQLI_ASYNC (available with mysqlnd), it is
       possible to perform query asynchronously.
       mysqli_poll() is then used to get results from such
       queries.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns FALSE on failure. For successful SELECT, SHOW, DESCRIBE or
   EXPLAIN queries) will return
   a mysqli_result object. For other successful queries) will
   return TRUE.
  
 " 
"mysqli_refresh", "Refreshes
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   public bool mysqli::refresh
    ( int $options
   )

  Procedural style
  
   int    ( resource $link
   , int $options
   )

  
   Flushes tables or caches, or resets the replication server information.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

link

<br />Procedural style only: A link identifier
returned by mysqli_connect() or mysqli_init()


    
     
options

     

      
       The options to refresh, using the MYSQLI_REFRESH_* constants as documented
       within the MySQLi constants documentation.
      
      
       See also the official » MySQL Refresh
       documentation.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   TRUE if the refresh was a success, otherwise FALSE
  
 " 
"mysqli_report", "Alias of mysqli_driver-&gt;report_mode
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
    This function is an alias of:  mysqli_driver-&gt;report_mode
  
 " 
"mysqli_rollback", "Rolls back current transaction
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool mysqli::rollback
    ([ int $flags
   [, string $name
  ]] )

  Procedural style
  
   bool    ( mysqli $link
   [, int $flags
   [, string $name
  ]] )

  
   Rollbacks the current transaction for the database.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

link

<br />Procedural style only: A link identifier
returned by mysqli_connect() or mysqli_init()


    
     
flags

     

      
       A bitmask of MYSQLI_TRANS_COR_* constants.
      
     

    
    
     
name

     

      
       If provided then ROLLBACK/*name*/ is executed.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"mysqli_savepoint", "Set a named transaction savepoint
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style (method):
   
   public bool mysqli::savepoint
    ( string $name
    )

  Procedural style:
  
   bool    ( mysqli $link
   , string $name
   )

  

  
  
  WarningThis function is
currently not documented; only its argument list is available.

 
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

link

<br />Procedural style only: A link identifier
returned by mysqli_connect() or mysqli_init()


    
     
name

     

      
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"mysqli_set_opt", "Alias of mysqli_options()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of mysqli_options().
  
 " 
"mysqli_sqlstate", "Returns the SQLSTATE error from previous MySQL operation
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  string $mysqli-&gt;sqlstate;

  Procedural style
  
   string    ( mysqli $link
   )

  
   Returns a string containing the SQLSTATE error code for the last error.
   The error code consists of five characters. '00000' means no error.
   The values are specified by ANSI SQL and ODBC. For a list of possible values, see
   » http://dev.mysql.com/doc/mysql/en/error-handling.html.
  
  Note: 
   
    Note that not all MySQL errors are yet mapped to SQLSTATE's.
    The value HY000 (general error) is used for unmapped errors.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

link

<br />Procedural style only: A link identifier
returned by mysqli_connect() or mysqli_init()


   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string containing the SQLSTATE error code for the last error.
   The error code consists of five characters. '00000' means no error.
  
 " 
"mysqli_stat", "Gets the current system status
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   string mysqli::stat
    ( void
   )

  Procedural style
  
   string    ( mysqli $link
   )

  
  ) returns a string containing
   information similar to that provided by the 'mysqladmin status' command.
   This includes uptime in seconds and the number of running threads,
   questions, reloads, and open tables.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

link

<br />Procedural style only: A link identifier
returned by mysqli_connect() or mysqli_init()


   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   A string describing the server status. FALSE if an error occurred.
  
 " 
"mysqli_stmt_close", "Closes a prepared statement
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool mysqli_stmt::close
    ( void
   )

  Procedural style
  
   bool    ( mysqli_stmt $stmt
   )

  
   Closes a prepared statement.) also
   deallocates the statement handle. If the current statement has pending or
   unread results, this function cancels them so that the next query can be
   executed.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

stmt

<br />Procedural style only: A statement identifier
returned by mysqli_stmt_init().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"mysqli_stmt_errno", "Returns the error code for the most recent statement call
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  int $mysqli_stmt-&gt;errno;

  Procedural style
  
   int    ( mysqli_stmt $stmt
   )

  
   Returns the error code for the most recently invoked statement function
   that can succeed or fail.
  
  
   Client error message numbers are listed in the MySQL
   errmsg.h header file,
   server error message numbers are listed in
   mysqld_error.h.
   In the MySQL source distribution you can find a complete list of error
   messages and error numbers in the file 
   Docs/mysqld_error.txt.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

stmt

<br />Procedural style only: A statement identifier
returned by mysqli_stmt_init().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   An error code value. Zero means no error occurred.
  
 " 
"mysqli_stmt_error", "Returns a string description for last statement error
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  string $mysqli_stmt-&gt;error;

  Procedural style
  
   string    ( mysqli_stmt $stmt
   )

  
   Returns a string containing the error message for the most recently invoked
   statement function that can succeed or fail.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

stmt

<br />Procedural style only: A statement identifier
returned by mysqli_stmt_init().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   A string that describes the error. An empty string if no error occurred.
  
 " 
"mysqli_stmt_execute", "Executes a prepared Query
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool mysqli_stmt::execute
    ( void
   )

  Procedural style
  
   bool    ( mysqli_stmt $stmt
   )

  
   Executes a query that has been previously prepared using the
   mysqli_prepare() function. When executed any
   parameter markers which exist will automatically be replaced with the
   appropriate data.
  
  
   If the statement is UPDATE, DELETE,
   or INSERT, the total number of affected rows can be
   determined by using the mysqli_stmt_affected_rows()
   function. Likewise, if the query yields a result set the 
   mysqli_stmt_fetch() function is used.
  
  Note: 
   
    When using), the 
    mysqli_stmt_fetch() function must be used to fetch the
    data prior to performing any additional queries.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

stmt

<br />Procedural style only: A statement identifier
returned by mysqli_stmt_init().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"mysqli_stmt_fetch", "Fetch results from a prepared statement into the bound variables
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool mysqli_stmt::fetch
    ( void
   )

  Procedural style
  
   bool    ( mysqli_stmt $stmt
   )

  
   Fetch the result from a prepared statement into the variables bound by
   mysqli_stmt_bind_result().
  
  Note: 
   
    Note that all columns must be bound by the application before calling
   ).
   
  
  Note: 
   
    Data are transferred unbuffered without calling
    mysqli_stmt_store_result() which can decrease
    performance (but reduces memory cost).
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

stmt

<br />Procedural style only: A statement identifier
returned by mysqli_stmt_init().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
   
    Value
      </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
     TRUE
      Success. Data has been fetched
     FALSE
      Error occurred
     NULL
      No more rows/data exists or data truncation occurred
     " 
"mysqli_stmt_prepare", "Prepare an SQL statement for execution
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   mixed mysqli_stmt::prepare
    ( string $query
   )

  Procedural style
  
   bool    ( mysqli_stmt $stmt
   , string $query
   )

  
   Prepares the SQL query pointed to by the null-terminated string query. 
  
  
   The parameter markers must be bound to application variables using
   mysqli_stmt_bind_param() and/or 
   mysqli_stmt_bind_result() before executing the
   statement or fetching rows.
  
  Note: 
   
    In the case where you pass a statement to
   ) that is longer than
    max_allowed_packet of the server, the returned
    error codes are different depending on whether you are using MySQL
    Native Driver (mysqlnd) or MySQL Client Library
    (libmysqlclient). The behavior is as follows:
   
   
     
      mysqlnd on Linux returns an error code of 1153.
      The error message means &quot;got a packet bigger than
      max_allowed_packet bytes&quot;.
     
    
    
     
      mysqlnd on Windows returns an error code 2006.
      This error message means &quot;server has gone away&quot;.
     
    
    
     
      libmysqlclient on all platforms returns an error code
      2006. This error message means &quot;server has gone
      away&quot;.
     
    
   
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

stmt

<br />Procedural style only: A statement identifier
returned by mysqli_stmt_init().

    
     
query

     

      
       The query, as a string. It must consist of a single SQL statement.
      
      
       You can include one or more parameter markers in the SQL statement by
       embedding question mark (?) characters at the
       appropriate positions.
      
      Note: 
       
        You should not add a terminating semicolon or \g
        to the statement.
       
      
      Note: 
       
        The markers are legal only in certain places in SQL statements.
        For example, they are allowed in the VALUES() list of an INSERT statement
        (to specify column values for a row), or in a comparison with a column in
        a WHERE clause to specify a comparison value.
       
       
        However, they are not allowed for identifiers (such as table or column names),
        in the select list that names the columns to be returned by a SELECT statement),
        or to specify both operands of a binary operator such as the =
        equal sign. The latter restriction is necessary because it would be impossible
        to determine the parameter type. In general, parameters are legal only in Data
        Manipulation Language (DML) statements, and not in Data Definition Language
        (DDL) statements.
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"mysqli_stmt_reset", "Resets a prepared statement
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool mysqli_stmt::reset
    ( void
   )

  Procedural style
  
   bool    ( mysqli_stmt $stmt
   )

  
   Resets a prepared statement on client and server to state after prepare.
  
  
    It resets the statement on the server, data sent using mysqli_stmt_send_long_data(), 
    unbuffered result sets and current errors. It does not clear bindings or stored result sets. 
    Stored result sets will be cleared when executing the prepared statement (or closing it).
  
  
   To prepare a statement with another query use function
   mysqli_stmt_prepare().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

stmt

<br />Procedural style only: A statement identifier
returned by mysqli_stmt_init().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"mysqli_stmt_sqlstate", "Returns SQLSTATE error from previous statement operation
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  string $mysqli_stmt-&gt;sqlstate;

  Procedural style
  
   string    ( mysqli_stmt $stmt
   )

  
   Returns a string containing the SQLSTATE error code
   for the most recently invoked prepared statement function that can succeed or fail.
   The error code consists of five characters. '00000' means no error.
   The values are specified by ANSI SQL and ODBC. For a list of possible values, see
   » http://dev.mysql.com/doc/mysql/en/error-handling.html.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

stmt

<br />Procedural style only: A statement identifier
returned by mysqli_stmt_init().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string containing the SQLSTATE error code for the last error.
   The error code consists of five characters. '00000' means no error.
  
 " 
"natcasesort", "Sort an array using a case insensitive &quot;natural order&quot; algorithm
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( array &amp;$array
   )

  
  ) is a case insensitive version of
   natsort().
  
  
   This function implements a sort algorithm that orders
   alphanumeric strings in the way a human being would while maintaining
   key/value associations.  This is described as a &quot;natural ordering&quot;.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The input array.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"natsort", "Sort an array using a &quot;natural order&quot; algorithm
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( array &amp;$array
   )

  
   This function implements a sort algorithm that orders alphanumeric strings
   in the way a human being would while maintaining key/value associations.
   This is described as a &quot;natural ordering&quot;.  An example of the difference
   between this algorithm and the regular computer string sorting algorithms
   (used in sort()) can be seen in the example below.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The input array.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"next", "Advance the internal array pointer of an array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( array &amp;$array
   )

  
  ) behaves like
   current(), with one difference.  It advances
   the internal array pointer one place forward before returning the
   element value.  That means it returns thearray value and
   advances the internal array pointer by one.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The array being affected.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the array value in theplace that's pointed to by the
   internal array pointer, or FALSE if there are no more elements.
  
  WarningThis function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function.
 " 
"ngettext", "Plural version of gettext
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $msgid1
   , string $msgid2
   , int $n
   )

  
   The plural version of gettext().  Some languages 
   have more than one form for plural messages dependent on the count.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
msgid1

     

      
       The singular message ID.
      
     

    
    
     
msgid2

     

      
       The plural message ID.
      
     

    
    
     
n

     

      
       The number (e.g. item count) to determine the translation for the
       respective grammatical number.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns correct plural form of message identified by 
   msgid1 and msgid2
   for count n. 
  
 " 
"nl2br", "Inserts HTML line breaks before all newlines in a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $string
   [, bool $is_xhtml = true
  ] )

  
   Returns string with '' or 
   '' inserted before all newlines (\r\n,
   \n\r, \n and \r).
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
string

     

      
       The input string.
      
     

    
    
     
is_xhtml

     

      
       Whether to use XHTML compatible line breaks or not.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the altered string.
  
 " 
"nl_langinfo", "Query language and locale information
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( int $item
   )

  
  ) is used to access individual elements of
   the locale categories.  Unlike localeconv(), which
   returns all of the elements,) allows you
   to select any specific element.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
item

     

      
       item may be an integer value of the element or the
       constant name of the element. The following is a list of constant names
       for item that may be used and their description.
       Some of these constants may not be defined or hold no value for certain
       locales.
      Constants
        
         Constant
           </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
          LC_TIME Category Constants
          ABDAY_(1-7)
           Abbreviated name of n-th day of the week.
          DAY_(1-7)
           Name of the n-th day of the week (DAY_1 = Sunday).
          ABMON_(1-12)
           Abbreviated name of the n-th month of the year.
          MON_(1-12)
           Name of the n-th month of the year.
          AM_STR
           String for Ante meridian.
          PM_STR
           String for Post meridian.
          D_T_FMT
           String that can be used as the format string for strftime() to represent time and date.
          D_FMT
           String that can be used as the format string for strftime() to represent date.
          T_FMT
           String that can be used as the format string for strftime() to represent time.
          T_FMT_AMPM
           String that can be used as the format string for strftime() to represent time in 12-hour format with ante<BR>ost meridian.
          ERA
           Alternate era.
          ERA_YEAR
           Year in alternate era format.
          ERA_D_T_FMT
           Date and time in alternate era format (string can be used in strftime()).
          ERA_D_FMT
           Date in alternate era format (string can be used in strftime()).
          ERA_T_FMT
           Time in alternate era format (string can be used in strftime()).
          LC_MONETARY Category Constants
          INT_CURR_SYMBOL
           International currency symbol.
          CURRENCY_SYMBOL
           Local currency symbol.
          CRNCYSTR
           Same value as CURRENCY_SYMBOL.
          MON_DECIMAL_POINT
           Decimal point character.
          MON_THOUSANDS_SEP
           Thousands separator (groups of three digits).
          MON_GROUPING
           Like &quot;grouping&quot; element.
          POSITIVE_SIGN
           Sign for positive values.
          NEGATIVE_SIGN
           Sign for negative values.
          INT_FRAC_DIGITS
           International fractional digits.
          FRAC_DIGITS
           Local fractional digits.
          P_CS_PRECEDES
           Returns 1 if CURRENCY_SYMBOL precedes a positive value.
          P_SEP_BY_SPACE
           Returns 1 if a space separates CURRENCY_SYMBOL from a positive value.
          N_CS_PRECEDES
           Returns 1 if CURRENCY_SYMBOL precedes a negative value.
          N_SEP_BY_SPACE
           Returns 1 if a space separates CURRENCY_SYMBOL from a negative value.
          P_SIGN_POSN
           
            
              
                Returns 0 if parentheses surround the quantity and CURRENCY_SYMBOL.
              
             
             
              
               Returns 1 if the sign string precedes the quantity and CURRENCY_SYMBOL.
              
             
             
              
               Returns 2 if the sign string follows the quantity and CURRENCY_SYMBOL.
              
             
             
              
               Returns 3 if the sign string immediately precedes the CURRENCY_SYMBOL.
              
             
             
              
               Returns 4 if the sign string immediately follows the CURRENCY_SYMBOL.
              
             
            
          N_SIGN_POSN
          LC_NUMERIC Category Constants
          DECIMAL_POINT
           Decimal point character.
          RADIXCHAR
           Same value as DECIMAL_POINT.
          THOUSANDS_SEP
           Separator character for thousands (groups of three digits).
          THOUSEP
           Same value as THOUSANDS_SEP.
          GROUPING
            
          LC_MESSAGES Category Constants
          YESEXPR
           Regex string for matching &quot;yes&quot; input.
          NOEXPR
           Regex string for matching &quot;no&quot; input.
          YESSTR
           Output string for &quot;yes&quot;.
          NOSTR
           Output string for &quot;no&quot;.
          LC_CTYPE Category Constants
          CODESET
           Return a string with the name of the character encoding.
          

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the element as a string, or FALSE if item
   is not valid.
  
 " 
"normalizer_normalize", "
   Normalizes the input provided and returns the normalized string
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
   
    public
    static
    string 
    Normalizer::normalize
     ( string $input
    [, int $form = Normalizer::FORM_C
   ] )

  Procedural style
  
   string 
      ( string $input
   [, int $form = Normalizer::FORM_C
  ] )

  Normalizes the input provided and returns the normalized string
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
input

     

      The input string to normalize
     

    
    
     
form

     

      One of the normalization forms.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  The normalized string or FALSE if an error occurred.
 " 
"number_format", "Format a number with grouped thousands
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( float $number
   [, int $decimals = 0
  ] )

  
   string    ( float $number
   , int $decimals = 0
   , string $dec_point = &quot;.&quot;
   , string $thousands_sep = &quot;,&quot;
   )

  
   This function accepts either one, two, or four parameters (not three):
  
  
   If only one parameter is given,
   number will be formatted without decimals,
   but with a comma (&quot;,&quot;) between every group of thousands.
  
  
   If two parameters are given, number will
   be formatted with decimals decimals with a
   dot (&quot;.&quot;) in front, and a comma (&quot;,&quot;) between every group of
   thousands.
  
  
   If all four parameters are given, number
   will be formatted with decimals decimals,
   dec_point instead of a dot (&quot;.&quot;) before
   the decimals and thousands_sep instead of
   a comma (&quot;,&quot;) between every group of thousands.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
number

     

      
       The number being formatted.
      
     

    
    
     
decimals

     

      
       Sets the number of decimal points.
      
     

    
    
     
dec_point

     

      
       Sets the separator for the decimal point.
      
     

    
    
     
thousands_sep

     

      
       Sets the thousands separator.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   A formatted version of number.
  
 " 
"ob_clean", "Clean (erase) the output buffer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( void
   )

  
   This function discards the contents of the output buffer.
  
  
   This function does not destroy the output buffer like
   ob_end_clean() does.
  
  
   The output buffer must be started by
   ob_start() with PHP_OUTPUT_HANDLER_CLEANABLE
   flag. Otherwise) will not work.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"ob_end_clean", "Clean (erase) the output buffer and turn off output buffering
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( void
   )

  
   This function discards the contents of the topmost output buffer and turns
   off this output buffering. If you want to further process the buffer's
   contents you have to call ob_get_contents() before
  ) as the buffer contents are discarded
   when) is called.
  
  
   The output buffer must be started by
   ob_start() with PHP_OUTPUT_HANDLER_CLEANABLE
   and PHP_OUTPUT_HANDLER_REMOVABLE
   flags. Otherwise) will not work.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure. Reasons for failure are first that you called the
   function without an active buffer or that for some reason a buffer could
   not be deleted (possible for special buffer).
  
 " 
"ob_end_flush", "Flush (send) the output buffer and turn off output buffering
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( void
   )

  
   This function will send the contents of the topmost output buffer (if
   any) and turn this output buffer off.  If you want to further
   process the buffer's contents you have to call
   ob_get_contents() before
  ) as the buffer contents are
   discarded after) is called.
  
  
   The output buffer must be started by
   ob_start() with PHP_OUTPUT_HANDLER_FLUSHABLE
   and PHP_OUTPUT_HANDLER_REMOVABLE
   flags. Otherwise) will not work.
  
  Note: 
   
    This function is similar to ob_get_flush(), except
    that ob_get_flush() returns the buffer as a string.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure. Reasons for failure are first that you called the
   function without an active buffer or that for some reason a buffer could
   not be deleted (possible for special buffer).
  
 " 
"ob_flush", "Flush (send) the output buffer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( void
   )

  
   This function will send the contents of the output buffer (if any). If you
   want to further process the buffer's contents you have to call
   ob_get_contents() before)
   as the buffer contents are discarded after)
   is called.
  
  
   This function does not destroy the output buffer like
   ob_end_flush() does.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"ob_get_clean", "Get current buffer contents and delete current output buffer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( void
   )

  
   Gets the current buffer contents and delete current output buffer.
  
  
  ) essentially executes both
   ob_get_contents() and
   ob_end_clean().
  
  
   The output buffer must be started by
   ob_start() with PHP_OUTPUT_HANDLER_CLEANABLE
   flag. Otherwise) will not work.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the contents of the output buffer and end output buffering.
   If output buffering isn't active then FALSE is returned.
  
 " 
"ob_get_contents", "Return the contents of the output buffer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( void
   )

  
   Gets the contents of the output buffer without clearing it.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This will return the contents of the output buffer or FALSE, if output
   buffering isn't active.
  
 " 
"ob_get_flush", "Flush the output buffer, return it as a string and turn off output buffering
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( void
   )

  
  ) flushes the output buffer, return
   it as a string and turns off output buffering.
  
  
   The output buffer must be started by
   ob_start() with PHP_OUTPUT_HANDLER_FLUSHABLE
   flag. Otherwise) will not work.
  
  Note: 
   
    This function is similar to ob_end_flush(), except
    that this function returns the buffer as a string.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the output buffer or FALSE if no buffering is active.
  
 " 
"ob_get_length", "Return the length of the output buffer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   This will return the length of the contents in the output buffer, in bytes.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the length of the output buffer contents, in bytes, or FALSE if no
   buffering is active.
  
 " 
"ob_get_level", "Return the nesting level of the output buffering mechanism
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   Returns the nesting level of the output buffering mechanism.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the level of nested output buffering handlers or zero if output
   buffering is not active.
  
 " 
"ob_get_status", "Get status of output buffers
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ([ bool  $full_status  = FALSE
  ] )

  
  ) returns status information on either
   the top level output buffer or all active output buffer levels if
   full_status is set to TRUE.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
full_status

     

      
       TRUE to return all active output buffer levels. If FALSE or not
       set, only the top level output buffer is returned.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   If called without the full_status parameter
   or with full_status = FALSE a simple array
   with the following elements is returned:
   
    
Array
(
    [level] =&gt; 2
    [type] =&gt; 0
    [status] =&gt; 0
    [name] =&gt; URL-Rewriter
    [del] =&gt; 1
)

    
   
   Simple) results
    KeyValue
    levelOutput nesting leveltypePHP_OUTPUT_HANDLER_INTERNAL (0) or PHP_OUTPUT_HANDLER_USER (1)statusOne of PHP_OUTPUT_HANDLER_START (0), PHP_OUTPUT_HANDLER_CONT (1) or PHP_OUTPUT_HANDLER_END (2)nameName of active output handler or ' default output handler' if none is setdelErase-flag as set by ob_start()
   If called with full_status = TRUE an array
   with one element for each active output buffer level is returned.
   The output level is used as key of the top level array and each array
   element itself is another array holding status information
   on one active output level.
   
    

Array
(
    [0] =&gt; Array
        (
            [chunk_size] =&gt; 0
            [size] =&gt; 40960
            [block_size] =&gt; 10240
            [type] =&gt; 1
            [status] =&gt; 0
            [name] =&gt; default output handler
            [del] =&gt; 1
        )

    [1] =&gt; Array
        (
            [chunk_size] =&gt; 0
            [size] =&gt; 40960
            [block_size] =&gt; 10240
            [type] =&gt; 0
            [buffer_size] =&gt; 0
            [status] =&gt; 0
            [name] =&gt; URL-Rewriter
            [del] =&gt; 1
        )

)

    
   
  
  
   The full output contains these additional elements:
   Full) results
    KeyValue
    chunk_sizeChunk size as set by ob_start()size...blocksize..." 
"ob_gzhandler", "ob_start callback function to gzip output buffer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $buffer
   , int $mode
   )

  
  ) is intended to be used as a callback
   function for ob_start() to help facilitate sending
   gz-encoded data to web browsers that support compressed web pages.  
   Before) actually sends compressed data,
   it determines what type of content encoding the browser will accept
   (&quot;gzip&quot;, &quot;deflate&quot; or none at all) and will return its output accordingly.
   All browsers are supported since it's up to the browser to send the
   correct header saying that it accepts compressed web pages. If a browser
   doesn't support compressed pages this function returns FALSE.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
buffer

     

      
      
     

    
    
     
mode

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   
  
 " 
"ob_implicit_flush", "Turn implicit flush on/off
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ([ int $flag = true
  ] )

  
  ) will turn implicit flushing on or
   off. Implicit flushing will result in a flush operation after every output
   call, so that explicit calls to flush() will no longer
   be needed.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
flag

     

      
       TRUE to turn implicit flushing on, FALSE otherwise.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"ob_list_handlers", "List all output handlers in use
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
   Lists all output handlers in use.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This will return an array with the output handlers in use (if any). If
   output_buffering is enabled or
   an anonymous function was used with ob_start(),
  ) will return &quot;default output
   handler&quot;.
  
 " 
"ob_start", "Turn on output buffering
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ([ callable $output_callback = NULL
   [, int $chunk_size = 0
   [, int $flags = PHP_OUTPUT_HANDLER_STDFLAGS
  ]]] )

  
   This function will turn output buffering on. While output buffering is
   active no output is sent from the script (other than headers), instead the
   output is stored in an internal buffer.
  
  
   The contents of this internal buffer may be copied into a string variable
   using ob_get_contents().  To output what is stored in
   the internal buffer, use ob_end_flush(). Alternatively,
   ob_end_clean() will silently discard the buffer
   contents.
  
  Warning
   
    Some web servers (e.g. Apache) change the working directory of a script
    when calling the callback function. You can change it back by e.g.
    chdir(dirname($_SERVER['SCRIPT_FILENAME'])) in the
    callback function.
   
  
  
   Output buffers are stackable, that is, you may call
  ) while another
  ) is active. Just make
   sure that you call ob_end_flush()
   the appropriate number of times. If multiple output callback
   functions are active, output is being filtered sequentially
   through each of them in nesting order.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
output_callback

     

      
       An optional output_callback function may be
       specified. This function takes a string as a parameter and should
       return a string. The function will be called when
       the output buffer is flushed (sent) or cleaned (with
       ob_flush(), ob_clean() or similar
       function) or when the output buffer
       is flushed to the browser at the end of the request.  When
       output_callback is called, it will receive the
       contents of the output buffer as its parameter and is expected to
       return a new output buffer as a result, which will be sent to the
       browser. If the output_callback is not a
       callable function, this function will return FALSE.
       This is the callback signature:
      
      
       
        string handler
         ( string $buffer
        [, int $phase
       ] )

       
buffer

         

          
           Contents of the output buffer.
          
         

        
        
         
phase

         

          
           Bitmask of PHP_OUTPUT_HANDLER_* constants.
          
         

        
       
       If output_callback returns FALSE original
       input is sent to the browser.
      
      
       The output_callback parameter may be bypassed
       by passing a NULL value.
      
      
       ob_end_clean(), ob_end_flush(),
       ob_clean(), ob_flush() and
      ) may not be called from a callback
       function. If you call them from callback function, the behavior is
       undefined. If you would like to delete the contents of a buffer,
       return &quot;&quot; (a null string) from callback function.
       You can't even call functions using the output buffering functions like
       print_r($expression, true) or
       highlight_file($filename, true) from a callback
       function.
      
      Note: 
       
        In PHP 4.0.4, ob_gzhandler() was introduced to
        facilitate sending gz-encoded data to web browsers that support
        compressed web pages.  ob_gzhandler() determines
        what type of content encoding the browser will accept and will return
        its output accordingly.
       
      
     

    
    
     
chunk_size

     

      
       If the optional parameter chunk_size is passed, the
       buffer will be flushed after any output call which causes the buffer's
       length to equal or exceed chunk_size. The default
       value 0 means that the output function will only be
       called when the output buffer is closed.
      
      
       Prior to PHP 5.4.0, the value 1 was a special case
       value that set the chunk size to 4096 bytes.
      
     

    
    
     
flags

     

      
       The flags parameter is a bitmask that controls
       the operations that can be performed on the output buffer. The default
       is to allow output buffers to be cleaned, flushed and removed, which
       can be set explicitly via
       PHP_OUTPUT_HANDLER_CLEANABLE |
       PHP_OUTPUT_HANDLER_FLUSHABLE |
       PHP_OUTPUT_HANDLER_REMOVABLE, or
       PHP_OUTPUT_HANDLER_STDFLAGS as shorthand.
      
      
       Each flag controls access to a set of functions, as described below:
       Constant
           Functions
          PHP_OUTPUT_HANDLER_CLEANABLE
           
            ob_clean(),
            ob_end_clean(), and
            ob_get_clean().
           
          PHP_OUTPUT_HANDLER_FLUSHABLE
           
            ob_end_flush(),
            ob_flush(), and
            ob_get_flush().
           
          PHP_OUTPUT_HANDLER_REMOVABLE
           
            ob_end_clean(),
            ob_end_flush(), and
            ob_get_flush().
           
          

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"octdec", "Octal to decimal
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    number     ( string $octal_string
    )

  
   Returns the decimal equivalent of the octal number
   represented by the octal_string argument.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
octal_string

     

      
       The octal string to convert
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The decimal representation of octal_string
  
 " 
"opendir", "Open directory handle
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( string $path
   [, resource $context
  ] )

  
   Opens up a directory handle to be used in subsequent
   closedir(), readdir(), and
   rewinddir() calls.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
path

     

      
       The directory path that is to be opened
      
     

    
    
     
context

     

      
       For a description of the context parameter, 
       refer to the streams section of
       the manual.
       
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a directory handle resource on success, or
   FALSE on failure.
   
  
   If path is not a valid directory or the
   directory can not be opened due to permission restrictions or
   filesystem errors,) returns FALSE and
   generates a PHP error of level 
   E_WARNING.  You can suppress the error output of
  ) by prepending
   '@' to the
   front of the function name.
  
 " 
"openlog", "Open connection to system logger
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $ident
   , int $option
   , int $facility
   )

  
  ) opens a connection to the system
   logger for a program.  
  
   
   The use of) is optional. It
   will automatically be called by syslog() if
   necessary, in which case ident will default
   to FALSE.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ident

     

      
       The string ident is added to each message. 
      
     

    
    
     
option

     

      
       The option argument is used to indicate
       what logging options will be used when generating a log message.
      ) Options
        
         Constant
           </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
          LOG_CONS
           
            if there is an error while sending data to the system logger,
            write directly to the system console
           
          LOG_NDELAY
           
            open the connection to the logger immediately
           
          LOG_ODELAY
           
            (default) delay opening the connection until the first
            message is logged
           
          LOG_PERROR
           print log message also to standard error
          LOG_PID
           include PID with each message
          

       You can use one or more of this options. When using multiple options
       you need to OR them, i.e. to open the connection
       immediately, write to the console and include the PID in each message,
       you will use: LOG_CONS | LOG_NDELAY | LOG_PID
      
     

    
    
     
facility

     

      
       The facility argument is used to specify what
       type of program is logging the message. This allows you to specify
       (in your machine's syslog configuration) how messages coming from
       different facilities will be handled.
      ) Facilities
        
         Constant
           </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
          LOG_AUTH
           
            security/authorization messages (use 
            LOG_AUTHPRIV instead
            in systems where that constant is defined)
           
          LOG_AUTHPRIV
           security/authorization messages (private)
          LOG_CRON
           clock daemon (cron and at)
          LOG_DAEMON
           other system daemons
          LOG_KERN
           kernel messages
          LOG_LOCAL0 ... LOG_LOCAL7
           reserved for local use, these are not available in Windows
          LOG_LPR
           line printer subsystem
          LOG_MAIL
           mail subsystem
          LOG_NEWS
           USENET news subsystem
          LOG_SYSLOG
           messages generated internally by syslogd
          LOG_USER
           generic user-level messages
          LOG_UUCP
           UUCP subsystem
          Note: 
       
        LOG_USER is the only valid log type under Windows
        operating systems
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"openssl_cipher_iv_length", "Gets the cipher iv length
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $method
   )

  
   Gets the cipher initialization vector (iv) length.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
method

    

     
      The cipher method, see openssl_get_cipher_methods() for a list of potential values.
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the cipher length on success, or FALSE on failure. 
  
 " 
"openssl_csr_export", "Exports a CSR as a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $csr
   , string &amp;$out
   [, bool $notext = true
  ] )

  
  ) takes the Certificate Signing
   Request represented by csr and stores it as
   ascii-armoured text into out, which is passed by
   reference.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
csr

     

      
      
     

    
    
     
out

     

      
      
     

    
    
     
notext

     

      
 The optional parameter notext affects
 the verbosity of the output; if it is FALSE, then additional human-readable
 information is included in the output. The default value of
 notext is TRUE.

     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"openssl_csr_export_to_file", "Exports a CSR to a file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $csr
   , string $outfilename
   [, bool $notext = true
  ] )

  
  ) takes the Certificate
   Signing Request represented by csr and saves it
   as ascii-armoured text into the file named by outfilename.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
csr

     

      
      
     

    
    
     
outfilename

     

      
       Path to the output file.
      
     

    
    
     
notext

     

      
 The optional parameter notext affects
 the verbosity of the output; if it is FALSE, then additional human-readable
 information is included in the output. The default value of
 notext is TRUE.

     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"openssl_csr_get_public_key", "Returns the public key of a CERT
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( mixed $csr
   [, bool $use_shortnames = true
  ] )

  WarningThis function is
currently not documented; only its argument list is available.

 " 
"openssl_csr_get_subject", "Returns the subject of a CERT
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( mixed $csr
   [, bool $use_shortnames = true
  ] )

  WarningThis function is
currently not documented; only its argument list is available.

 " 
"openssl_csr_new", "Generates a CSR
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( array $dn
   , resource &amp;$privkey
   [, array $configargs
   [, array $extraattribs
  ]] )

  
  ) generates a new CSR (Certificate Signing Request)
   based on the information provided by dn, which represents the
   Distinguished Name to be used in the certificate.
  
  Note: 
 
  You need to have a valid openssl.cnf installed for
  this function to operate correctly.
  See the notes under the installation
  section for more information.
 

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
dn

     

      
       The Distinguished Name to be used in the certificate.
      
     

    
    
     
privkey

     

      
       privkey should be set to a private key that was
       previously generated by openssl_pkey_new() (or
       otherwise obtained from the other openssl_pkey family of functions).
       The corresponding public portion of the key will be used to sign the
       CSR.
      
     

    
    
     
configargs

     

      
       By default, the information in your system openssl.conf
       is used to initialize the request; you can specify a configuration file
       section by setting the config_section_section key of
       configargs.  You can also specify an alternative
       openssl configuration file by setting the value of the
       config key to the path of the file you want to use.
       The following keys, if present in configargs
       behave as their equivalents in the openssl.conf, as
       listed in the table below.
       Configuration overrides
        
         configargs key
           type
           openssl.conf equivalent
           description
          digest_alg
           string
           default_md
           Selects which digest method to use
          x509_extensions
           string
           x509_extensions
           Selects which extensions should be used when creating an x509
           certificate
          req_extensions
           string
           req_extensions
           Selects which extensions should be used when creating a CSR
          private_key_bits
           integer
           default_bits
           Specifies how many bits should be used to generate a private
            key
          private_key_type
           integer
           none
           Specifies the type of private key to create.  This can be one
            of OPENSSL_KEYTYPE_DSA,
            OPENSSL_KEYTYPE_DH or
            OPENSSL_KEYTYPE_RSA.
            The default value is OPENSSL_KEYTYPE_RSA which
            is currently the only supported key type.
           
          encrypt_key
           boolean
           encrypt_key
           Should an exported key (with passphrase) be encrypted?
          encrypt_key_cipher
           integer
           none
           
            One of cipher constants.
           
          

    
    
     
extraattribs

     

      
       extraattribs is used to specify additional
       configuration options for the CSR.  Both dn and
       extraattribs are associative arrays whose keys are
       converted to OIDs and applied to the relevant part of the request.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the CSR.
  
 " 
"openssl_csr_sign", "Sign a CSR with another certificate (or itself) and generate a certificate
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( mixed $csr
   , mixed $cacert
   , mixed $priv_key
   , int $days
   [, array $configargs
   [, int $serial = 0
  ]] )

  
  ) generates an x509 certificate
   resource from the given CSR.
  
  Note: 
 
  You need to have a valid openssl.cnf installed for
  this function to operate correctly.
  See the notes under the installation
  section for more information.
 

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
csr

     

      
       A CSR previously generated by openssl_csr_new().
       It can also be the path to a PEM encoded CSR when specified as
       file:/<BR>ath/to/csr or an exported string generated
       by openssl_csr_export().
      
     

    
    
     
cacert

     

      
       The generated certificate will be signed by cacert.
       If cacert is NULL, the generated certificate
       will be a self-signed certificate.
      
     

    
    
     
priv_key

     

      
       priv_key is the private key that corresponds to
       cacert.
      
     

    
    
     
days

     

      
       days specifies the length of time for which the
       generated certificate will be valid, in days.
      
     

    
    
     
configargs

     

      
       You can finetune the CSR signing by configargs.
       See openssl_csr_new() for more information about
       configargs.
      
     

    
    
     
serial

     

      
       An optional the serial number of issued certificate. If not specified
       it will default to 0.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an x509 certificate resource on success, FALSE on failure.
  
 " 
"openssl_decrypt", "Decrypts data
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $data
   , string $method
   , string $password
   [, int $options = 0
   [, string $iv = &quot;&quot;
  ]] )

  
   Takes a raw or base64 encoded string and decrypts it using a given method and key.
  

  WarningThis function is
currently not documented; only its argument list is available.


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
data

     

      
       The data.
      
     

    
    
     
method

     

      
       The cipher method.
      
     

    
    
     
password

     

      
       The password.
      
     

    
    
      
options

      

       
        options can be one of
        OPENSSL_RAW_DATA,
        OPENSSL_ZERO_PADDING.
       
      

    
    
     
iv

     

      
       A non-NULL Initialization Vector. 
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The decrypted string on success or FALSE on failure.
  
 " 
"openssl_dh_compute_key", "Computes shared secret for public value of remote DH key and local DH key
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $pub_key
   , resource $dh_key
   )


  WarningThis function is
currently not documented; only its argument list is available.


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pub_key

     

      
       Public key
      
     

    
    
     
dh_key

     

      
       DH key
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns computed key on success or FALSE on failure.
  
 " 
"openssl_digest", "Computes a digest
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $data
   , string $method
   [, bool $raw_output = false
  ] )

  
   Computes a digest hash value for the given data using a given method,
   and returns a raw or binhex encoded string.
  

  WarningThis function is
currently not documented; only its argument list is available.


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
data

     

      
       The data.
      
     

    
    
     
method

     

      
       The digest method.
      
     

    
    
     
raw_output

     

      
       Setting to TRUE will return as raw output data, otherwise the return
       value is binhex encoded.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the digested hash value on success or FALSE on failure.
  
 " 
"openssl_encrypt", "Encrypts data
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $data
   , string $method
   , string $password
   [, int $options = 0
   [, string $iv = &quot;&quot;
  ]] )

  
   Encrypts given data with given method and key, returns a raw
   or base64 encoded string
  

  WarningThis function is
currently not documented; only its argument list is available.


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
data

     

      
       The data.
      
     

    
    
     
method

     

      
       The cipher method.
      
     

    
    
     
password

     

      
       The password.
      
     

    
    
      
options

      

        
          options can be one of
          OPENSSL_RAW_DATA,
          OPENSSL_ZERO_PADDING.
        
      

    
    
     
iv

     

      
       A non-NULL Initialization Vector.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the encrypted string on success or FALSE on failure.
  
 " 
"openssl_error_string", "Return openSSL error message
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( void
   )

  
  ) returns the last error from the
   openSSL library.  Error messages are queued, so this function should be
   called multiple times to collect all of the information. The last error will
   be the most recent one.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an error message string, or FALSE if there are no more error
   messages to return.
  
 " 
"openssl_free_key", "Free key resource
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( resource $key_identifier
   )

  
  ) frees the key associated with
   the specified key_identifier from memory.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
key_identifier

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"openssl_get_cert_locations", "Retrieve the available certificate locations
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
  ) returns an array with
   information about the available certificate locations that will be searched
   for SSL certificates.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  This function has no parameters.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array with the available certificate locations.
  
 " 
"openssl_get_cipher_methods", "Gets available cipher methods
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ([ bool $aliases = false
  ] )

  
   Gets a list of available cipher methods.
  

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
aliases

     

      
       Set to TRUE if cipher aliases should be included within the
       returned array.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   An array of available cipher methods.
  
 " 
"openssl_get_md_methods", "Gets available digest methods
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ([ bool $aliases = false
  ] )

  
   Gets a list of available digest methods.
  

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
aliases

     

      
       Set to TRUE if digest aliases should be included within the
       returned array.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   An array of available digest methods.
  
 " 
"openssl_get_privatekey", "Alias of openssl_pkey_get_private()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   openssl_pkey_get_private().
  
 " 
"openssl_get_publickey", "Alias of openssl_pkey_get_public()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   openssl_pkey_get_public().
  
 " 
"openssl_open", "Open sealed data
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $sealed_data
   , string &amp;$open_data
   , string $env_key
   , mixed $priv_key_id
   [, string $method
  ] )

  
  ) opens (decrypts)
   sealed_data using the private key associated with
   the key identifier priv_key_id and the envelope key
   env_key, and fills
   open_data with the decrypted data.
   The envelope key is generated when the
   data are sealed and can only be used by one specific private key. See
   openssl_seal() for more information.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
sealed_data

     

      
      
     

    
    
     
open_data

     

      
       If the call is successful the opened data is returned in this
       parameter.
      
     

    
    
     
env_key

     

      
      
     

    
    
     
priv_key_id

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"openssl_pbkdf2", "Generates a PKCS5 v2 PBKDF2 string, defaults to SHA-1
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $password
   , string $salt
   , int $key_length
   , int $iterations
   [, string $digest_algorithm
  ] )

  

  

  WarningThis function is
currently not documented; only its argument list is available.


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
password

    

     
      
     
    

   
   
    
salt

    

     
      
     
    

   
   
    
key_length

    

     
      
     
    

   
   
    
iterations

    

     
      
     
    

   
   
    
digest_algorithm

    

     
      
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns string or FALSE on failure.
  
 " 
"openssl_pkcs12_export", "Exports a PKCS#12 Compatible Certificate Store File to variable.
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( mixed $x509
   , string &amp;$out
   , mixed $priv_key
   , string $pass
   [, array $args
  ] )

  
  ) stores
   x509 into a string named by
   out in a PKCS#12 file format.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
x509

 

  
   See Key/Certificate parameters for a list of valid values.
  
 


    
     
out

     

      
       On success, this will hold the PKCS#12.
      
     

    
    
     
priv_key

     

      
      Private key component of PKCS#12 file.
      
     

    
    
     
pass

     

      
      Encryption password for unlocking the PKCS#12 file.
      
     

    
    
     
args

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"openssl_pkcs12_export_to_file", "Exports a PKCS#12 Compatible Certificate Store File
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( mixed $x509
   , string $filename
   , mixed $priv_key
   , string $pass
   [, array $args
  ] )

  
  ) stores
   x509 into a file named by
   filename in a PKCS#12 file format.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
x509

 

  
   See Key/Certificate parameters for a list of valid values.
  
 


    
     
filename

     

      
       Path to the output file.
      
     

    
    
     
priv_key

     

      
      Private key component of PKCS#12 file.
      
     

    
    
     
pass

     

      
      Encryption password for unlocking the PKCS#12 file.
      
     

    
    
     
args

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"openssl_pkcs12_read", "Parse a PKCS#12 Certificate Store into an array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $pkcs12
   , array &amp;$certs
   , string $pass
   )

  
  ) parses the PKCS#12 certificate store supplied by
   pkcs12 into a array named
   certs.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pkcs12

     

      
       The certificate store contents, not its file name.
      
     

    
    
     
certs

     

      
       On success, this will hold the Certificate Store Data.
      
     

    
    
     
pass

     

      
      Encryption password for unlocking the PKCS#12 file.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"openssl_pkcs7_decrypt", "Decrypts an S/MIME encrypted message
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $infilename
   , string $outfilename
   , mixed $recipcert
   [, mixed $recipkey
  ] )

  
   Decrypts the S/MIME encrypted message contained in the file specified by
   infilename using the certificate and its
   associated private key specified by recipcert and
   recipkey.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
infilename

     

      
      
     

    
    
     
outfilename

     

      
       The decrypted message is written to the file specified by
       outfilename.
      
     

    
    
     
recipcert

     

      
      
     

    
    
     
recipkey

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"openssl_pkcs7_encrypt", "Encrypt an S/MIME message
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $infile
   , string $outfile
   , mixed $recipcerts
   , array $headers
   [, int $flags = 0
   [, int $cipherid = OPENSSL_CIPHER_RC2_40
  ]] )

  
  ) takes the contents of the
   file named infile and encrypts them using an RC2
   40-bit cipher so that they can only be read by the intended recipients
   specified by recipcerts.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
infile

     

      
      
     

    
    
     
outfile

     

      
      
     

    
    
     
recipcerts

     

      
       Either a lone X.509 certificate, or an array of X.509 certificates.
      
     

    
    
     
headers

     

      
       headers is an array of headers that
       will be prepended to the data after it has been encrypted.
      
      
       headers can be either an associative array
       keyed by header name, or an indexed array, where each element contains
       a single header line.
      
     

    
    
     
flags

     

      
       flags can be used to specify options that affect
       the encoding process - see PKCS7
       constants.
      
     

    
    
     
cipherid

     

      
       One of cipher constants.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"openssl_pkcs7_sign", "Sign an S/MIME message
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $infilename
   , string $outfilename
   , mixed $signcert
   , mixed $privkey
   , array $headers
   [, int $flags = PKCS7_DETACHED
   [, string $extracerts
  ]] )

  
  ) takes the contents of the file
   named infilename and signs them using the
   certificate and its matching private key specified by
   signcert and privkey
   parameters.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
infilename

     

      
      
     

    
    
     
outfilename

     

      
      
     

    
    
     
signcert

     

      
      
     

    
    
     
privkey

     

      
      
     

    
    
     
headers

     

      
       headers is an array of headers that
       will be prepended to the data after it has been signed (see
       openssl_pkcs7_encrypt() for more information about
       the format of this parameter).
      
     

    
    
     
flags

     

      
       flags can be used to alter the output - see PKCS7 constants.
      
     

    
    
     
extracerts

     

      
       extracerts specifies the name of a file containing
       a bunch of extra certificates to include in the signature which can for
       example be used to help the recipient to verify the certificate that you used.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"openssl_pkcs7_verify", "Verifies the signature of an S/MIME signed message
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( string $filename
   , int $flags
   [, string $outfilename
   [, array $cainfo
   [, string $extracerts
   [, string $content
  ]]]] )

  
  ) reads the S/MIME message
   contained in the given file and examines the digital signature.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the message.
      
     

    
    
     
flags

     

      
       flags can be used to affect how the signature is
       verified - see PKCS7 constants
       for more information.
      
     

    
    
     
outfilename

     

      
       If the outfilename is specified, it should be a
       string holding the name of a file into which the certificates of the
       persons that signed the messages will be stored in PEM format.
      
     

    
    
     
cainfo

     

      
       If the cainfo is specified, it should hold
       information about the trusted CA certificates to use in the verification
       process - see certificate
       verification for more information about this parameter.
      
     

    
    
     
extracerts

     

      
       If the extracerts is specified, it is the filename
       of a file containing a bunch of certificates to use as untrusted CAs.
      
     

    
    
     
content

     

      
       You can specify a filename with content that will
       be filled with the verified data, but with the signature information
       stripped.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the signature is verified, FALSE if it is not correct
   (the message has been tampered with, or the signing certificate is invalid),
   or -1 on error.
  
 " 
"openssl_pkey_export", "Gets an exportable representation of a key into a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( mixed $key
   , string &amp;$out
   [, string $passphrase
   [, array $configargs
  ]] )

  
  ) exports
   key as a PEM encoded string and stores it into
   out (which is passed by reference).
  
  Note: 
 
  You need to have a valid openssl.cnf installed for
  this function to operate correctly.
  See the notes under the installation
  section for more information.
 

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
key

     

      
      
     

    
    
     
out

     

      
      
     

    
    
     
passphrase

     

      
       The key is optionally protected by passphrase.
      
     

    
    
     
configargs

     

      
       configargs can be used to fine-tune the export
       process by specifying and/or overriding options for the openssl
       configuration file.  See openssl_csr_new() for more
       information about configargs.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"openssl_pkey_export_to_file", "Gets an exportable representation of a key into a file 
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( mixed $key
   , string $outfilename
   [, string $passphrase
   [, array $configargs
  ]] )

  
  ) saves an ascii-armoured
   (PEM encoded) rendition of key into the file named
   by outfilename.  
  
  Note: 
 
  You need to have a valid openssl.cnf installed for
  this function to operate correctly.
  See the notes under the installation
  section for more information.
 

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
key

     

      
      
     

    
    
     
outfilename

     

      
       Path to the output file.
      
     

    
    
     
passphrase

     

      
       The key can be optionally protected by a
       passphrase.
      
     

    
    
     
configargs

     

      
       configargs can be used to fine-tune the export
       process by specifying and/or overriding options for the openssl
       configuration file. See openssl_csr_new() for more
       information about configargs.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"openssl_pkey_free", "Frees a private key
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( resource $key
   )

  
   This function frees a private key created by
   openssl_pkey_new().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
key

     

      
       Resource holding the key.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"openssl_pkey_get_details", "Returns an array with the key details
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $key
   )

  
   This function returns the key details (bits, key, type).
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
key

     

      
       Resource holding the key.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array with the key details in success or FALSE in failure.
   Returned array has indexes bits (number of bits),
   key (string representation of the public key) and
   type (type of the key which is one of
   OPENSSL_KEYTYPE_RSA,
   OPENSSL_KEYTYPE_DSA,
   OPENSSL_KEYTYPE_DH,
   OPENSSL_KEYTYPE_EC or -1 meaning unknown).
  
  
   Depending on the key type used, additional details may be returned. Note that 
   some elements may not always be available.
  
  
    
     OPENSSL_KEYTYPE_RSA, an additional array key named &quot;rsa&quot;, 
     containing the key data is returned.
    
     Key
         </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
        &quot;n&quot;
          
        &quot;e&quot;
          
        &quot;d&quot;
          
        &quot;p&quot;
          
        &quot;q&quot;
          
        &quot;dmp1&quot;
          
        &quot;dmq1&quot;
          
        &quot;iqmp&quot;
          
        
   
    
     OPENSSL_KEYTYPE_DSA, an additional array key named &quot;dsa&quot;, 
     containing the key data is returned.
    
     Key
         </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
        &quot;p&quot;
          
        &quot;q&quot;
          
        &quot;g&quot;
          
        &quot;priv_key&quot;
          
        &quot;pub_key&quot;
          
        
   
    
     OPENSSL_KEYTYPE_DH, an additional array key named &quot;dh&quot;, 
     containing the key data is returned.
    
     Key
         </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
        &quot;p&quot;
          
        &quot;g&quot;
          
        &quot;priv_key&quot;
          
        &quot;pub_key&quot;
          
        
  " 
"openssl_pkey_get_private", "Get a private key
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( mixed $key
   [, string $passphrase = &quot;&quot;
  ] )

  
   openssl_get_privatekey() parses
   key and prepares it for use by other functions.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
key

     

      
       key can be one of the following:
       a string having the format
          file:/<BR>ath/to/file.pem. The named file must
          contain a PEM encoded certificate<BR>rivate key (it may contain both).
         
        
        A PEM formatted private key.
       

    
    
     
passphrase

     

      
       The optional parameter passphrase must be used
       if the specified key is encrypted (protected by a passphrase).
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a positive key resource identifier on success, or FALSE on error.
  
 " 
"openssl_pkey_get_public", "Extract public key from certificate and prepare it for use
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( mixed $certificate
   )

  
   openssl_get_publickey() extracts the public key from
   certificate and prepares it for use by other
   functions.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
certificate

     

      
       certificate can be one of the following:
       an X.509 certificate resource
        a string having the format
          file:/<BR>ath/to/file.pem. The named file must
          contain a PEM encoded certificate<BR>ublic key (it may contain both).
         
        
        A PEM formatted public key.
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a positive key resource identifier on success, or FALSE on error.
  
 " 
"openssl_pkey_new", "Generates a new private key 
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ([ array $configargs
  ] )

  
  ) generates a new private and public
   key pair.  The public component of the key can be obtained using
   openssl_pkey_get_public().
  
  Note: 
 
  You need to have a valid openssl.cnf installed for
  this function to operate correctly.
  See the notes under the installation
  section for more information.
 

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
configargs

     

      
       You can finetune the key generation (such as specifying the number of
       bits) using configargs.  See
       openssl_csr_new() for more information about
       configargs.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a resource identifier for the pkey on success, or FALSE on
   error.
  
 " 
"openssl_private_decrypt", "Decrypts data with private key 
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $data
   , string &amp;$decrypted
   , mixed $key
   [, int $padding = OPENSSL_PKCS1_PADDING
  ] )

  
  ) decrypts
   data that was previous encrypted via
   openssl_public_encrypt() and stores the result into
   decrypted. 
  
  
   You can use this function e.g. to decrypt data which were supposed only to
   you.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
data

     

      
      
     

    
    
     
decrypted

     

      
      
     

    
    
     
key

     

      
       key must be the private key corresponding that
       was used to encrypt the data.  
      
     

    
    
     
padding

     

      
       padding can be one of
       OPENSSL_PKCS1_PADDING,
       OPENSSL_SSLV23_PADDING,
       OPENSSL_PKCS1_OAEP_PADDING,
       OPENSSL_NO_PADDING.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"openssl_private_encrypt", "Encrypts data with private key 
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $data
   , string &amp;$crypted
   , mixed $key
   [, int $padding = OPENSSL_PKCS1_PADDING
  ] )

  
  ) encrypts data
   with private key and stores the result into
   crypted. Encrypted data can be decrypted via
   openssl_public_decrypt(). 
  
  
   This function can be used e.g. to sign data (or its hash) to prove that it
   is not written by someone else.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
data

     

      
      
     

    
    
     
crypted

     

      
      
     

    
    
     
key

     

      
      
     

    
    
     
padding

     

      
       padding can be one of
       OPENSSL_PKCS1_PADDING,
       OPENSSL_NO_PADDING.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"openssl_public_decrypt", "Decrypts data with public key 
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $data
   , string &amp;$decrypted
   , mixed $key
   [, int $padding = OPENSSL_PKCS1_PADDING
  ] )

  
  ) decrypts
   data that was previous encrypted via
   openssl_private_encrypt() and stores the result into
   decrypted.  
  
  
   You can use this function e.g. to check if the message was written by the
   owner of the private key.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
data

     

      
      
     

    
    
     
decrypted

     

      
      
     

    
    
     
key

     

      
       key must be the public key corresponding that
       was used to encrypt the data.  
      
     

    
    
     
padding

     

      
       padding can be one of
       OPENSSL_PKCS1_PADDING,
       OPENSSL_NO_PADDING.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"openssl_public_encrypt", "Encrypts data with public key 
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $data
   , string &amp;$crypted
   , mixed $key
   [, int $padding = OPENSSL_PKCS1_PADDING
  ] )

  
  ) encrypts data
   with public key and stores the result into
   crypted. Encrypted data can be decrypted via
   openssl_private_decrypt(). 
  
  
   This function can be used e.g. to encrypt message which can be then read
   only by owner of the private key. It can be also used to store secure data
   in database.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
data

     

      
      
     

    
    
     
crypted

     

      
       This will hold the result of the encryption.
      
     

    
    
     
key

     

      
       The public key.
      
     

    
    
     
padding

     

      
       padding can be one of
       OPENSSL_PKCS1_PADDING,
       OPENSSL_SSLV23_PADDING,
       OPENSSL_PKCS1_OAEP_PADDING,
       OPENSSL_NO_PADDING.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"openssl_random_pseudo_bytes", "Generate a pseudo-random string of bytes
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( int $length
   [, bool &amp;$crypto_strong
  ] )

  
   Generates a string of pseudo-random bytes, with the number of bytes
   determined by the length parameter. 
  
  
   It also indicates if a cryptographically strong algorithm was used to produce the
   pseudo-random bytes, and does this via the optional crypto_strong
   parameter. It's rare for this to be FALSE, but some systems may be broken or old.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
length

     

      
       The length of the desired string of bytes. Must be a positive integer. PHP will
       try to cast this parameter to a non-null integer to use it. 
      
     

    
    
     
crypto_strong

     

      
       If passed into the function, this will hold a boolean value that determines
       if the algorithm used was &quot;cryptographically strong&quot;, e.g., safe for usage with GPG, 
       passwords, etc. TRUE if it did, otherwise FALSE
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the generated string of bytes on success,  or FALSE on failure.
  
 " 
"openssl_seal", "Seal (encrypt) data
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $data
   , string &amp;$sealed_data
   , array &amp;$env_keys
   , array $pub_key_ids
   [, string $method = &quot;RC4&quot;
  ] )

  
  ) seals (encrypts)
   data by using the given method with a randomly generated
   secret key. The key is encrypted with each of the public keys
   associated with the identifiers in pub_key_ids
   and each encrypted key is returned
   in env_keys. This means that one can send
   sealed data to multiple recipients (provided one has obtained their
   public keys). Each recipient must receive both the sealed data and
   the envelope key that was encrypted with the recipient's public key.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
data

     

      
       The data to seal.
      
     

    
    
     
sealed_data

     

      
       The sealed data.
      
     

    
    
     
env_keys

     

      
       Array of encrypted keys.
      
     

    
    
     
pub_key_ids

     

      
       Array of public key resource identifiers.
      
     

    
    
     
method

     

      
       The cipher method.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the length of the sealed data on success, or FALSE on error.
   If successful the sealed data is returned in
   sealed_data, and the envelope keys in
   env_keys.
  
 " 
"openssl_sign", "Generate signature
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $data
   , string &amp;$signature
   , mixed $priv_key_id
   [, mixed $signature_alg = OPENSSL_ALGO_SHA1
  ] )

  
  ) computes a signature for the
   specified data by generating a cryptographic
   digital signature using the private key associated with
   priv_key_id. Note that the data itself is
   not encrypted.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
data

     

      
       The string of data you wish to sign
      
     

    
    
     
signature

     

      
       If the call was successful the signature is returned in
       signature.
      
     

    
    
     
priv_key_id

     

      
       resource - a key, returned by openssl_get_privatekey()
      
      
       string - a PEM formatted key
      
     

    
    
     
signature_alg

     

      
       int - one of these Signature Algorithms.
      
      
       string - a valid string returned by openssl_get_md_methods() example, &quot;sha256WithRSAEncryption&quot; or &quot;sha384&quot;.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"openssl_spki_export", "Exports a valid PEM formatted public key signed public key and challenge
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string &amp;$spkac
   )

  
    Exports PEM formatted public key from encoded signed public key and challenge
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
spkac

     

      
        Expects a valid signed public key and challenge 
      
     

    
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the associated PEM formatted public key or NULL on failure.
  
 " 
"openssl_spki_export_challenge", "Exports the challenge assoicated with a signed public key and challenge
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string &amp;$spkac
   )

  
    Exports challenge from encoded signed public key and challenge
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
spkac

     

      
        Expects a valid signed public key and challenge 
      
     

    
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the associated challenge string or NULL on failure.
  
 " 
"openssl_spki_new", "Generate a new signed public key and challenge
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource &amp;$privkey
   , string &amp;$challenge
   [, int $algorithm = 0
  ] )

  
   Generates a signed public key and challenge using specified hashing algorithm
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
privkey

     

      
       privkey should be set to a private key that was
       previously generated by openssl_pkey_new() (or
       otherwise obtained from the other openssl_pkey family of functions).
       The corresponding public portion of the key will be used to sign the
       CSR.
      
     

    
    
     
challenge

     

      
       The challenge associated to associate with the SPKAC
      
     

    
    
     
algorithm

     

      
       The digest algorithm. See openssl_get_md_method().
      
     

    
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a signed public key and challenge string or NULL on failure.
  
 " 
"openssl_spki_verify", "Verifies a signed public key and challenge
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string &amp;$spkac
   )

  
    Validates the supplied signed public key and challenge
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
spkac

     

      
        Expects a valid signed public key and challenge 
      
     

    
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a boolean on success or failure.
  
 " 
"openssl_verify", "Verify signature
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $data
   , string $signature
   , mixed $pub_key_id
   [, mixed $signature_alg = OPENSSL_ALGO_SHA1
  ] )

  
  ) verifies that the
   signature is correct for the specified
   data using the public key associated with
   pub_key_id. This must be the public key
   corresponding to the private key used for signing.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
data

     

      
       The string of data used to generate the signature previously
      
     

    
    
     
signature

     

      
       A raw binary string, generated by openssl_sign() or similar means
      
     

    
    
     
pub_key_id

     

      
       resource - a key, returned by openssl_get_publickey()
      
      
       string - a PEM formatted key, example, &quot;-----BEGIN PUBLIC KEY-----
MIIBCgK...&quot;
           
     

    
    
     
signature_alg

     

      
       int - one of these Signature Algorithms.
      
      
       string - a valid string returned by openssl_get_md_methods() example, &quot;sha1WithRSAEncryption&quot; or &quot;sha512&quot;.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns 1 if the signature is correct, 0 if it is incorrect, and
   -1 on error.
  
 " 
"openssl_x509_check_private_key", "Checks if a private key corresponds to a certificate
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( mixed $cert
   , mixed $key
   )

  
   Checks whether the given key is the private key
   that corresponds to cert.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
cert

     

      
       The certificate.
      
     

    
    
     
key

     

      
       The private key.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if key is the private key that
   corresponds to cert, or FALSE otherwise.
  
 " 
"openssl_x509_checkpurpose", "Verifies if a certificate can be used for a particular purpose
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( mixed $x509cert
   , int $purpose
   [, array $cainfo = array()
   [, string $untrustedfile
  ]] )

  
  ) examines a certificate to
   see if it can be used for the specified purpose.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
x509cert

     

      
       The examined certificate.
      
     

    
    
     
purpose

     

      
      ) purposes
        
         Constant
           </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
          X509_PURPOSE_SSL_CLIENT
           Can the certificate be used for the client side of an SSL
           connection?
          X509_PURPOSE_SSL_SERVER
           Can the certificate be used for the server side of an SSL
           connection?
          X509_PURPOSE_NS_SSL_SERVER
           Can the cert be used for Netscape SSL server?
          X509_PURPOSE_SMIME_SIGN
           Can the cert be used to sign S/MIME email?
          X509_PURPOSE_SMIME_ENCRYPT
           Can the cert be used to encrypt S/MIME email?
          X509_PURPOSE_CRL_SIGN
           Can the cert be used to sign a certificate revocation list
           (CRL)?
          X509_PURPOSE_ANY
           Can the cert be used for Any/All purposes?
          

       These options are not bitfields - you may specify one only!
      
     

    
    
     
cainfo

     

      
       cainfo should be an array of trusted CA files/dirs
       as described in Certificate
       Verification.
      
     

    
    
     
untrustedfile

     

      
       If specified, this should be the name of a PEM encoded file holding
       certificates that can be used to help verify the certificate, although
       no trust is placed in the certificates that come from that file.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the certificate can be used for the intended purpose,
   FALSE if it cannot, or -1 on error.
  
 " 
"openssl_x509_export", "Exports a certificate as a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( mixed $x509
   , string &amp;$output
   [, bool $notext = TRUE
  ] )

  
  ) stores
   x509 into a string named by
   output in a PEM encoded format.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
x509

 

  
   See Key/Certificate parameters for a list of valid values.
  
 


    
     
output

     

      
       On success, this will hold the PEM.
      
     

    
    
     
notext

     

      
 The optional parameter notext affects
 the verbosity of the output; if it is FALSE, then additional human-readable
 information is included in the output. The default value of
 notext is TRUE.

     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"openssl_x509_export_to_file", "Exports a certificate to file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( mixed $x509
   , string $outfilename
   [, bool $notext = TRUE
  ] )

  
  ) stores
   x509 into a file named by
   outfilename in a PEM encoded format.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
x509

 

  
   See Key/Certificate parameters for a list of valid values.
  
 


    
     
outfilename

     

      
       Path to the output file.
      
     

    
    
     
notext

     

      
 The optional parameter notext affects
 the verbosity of the output; if it is FALSE, then additional human-readable
 information is included in the output. The default value of
 notext is TRUE.

     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"openssl_x509_fingerprint", "Calculates the fingerprint, or digest, of a given X.509 certificate
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( mixed $x509
   [, string $hash_algorithm = &quot;sha1&quot;
   [, bool $raw_output = FALSE
  ]] )

  
  ) returns the digest of
   x509 as a string.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
x509

 

  
   See Key/Certificate parameters for a list of valid values.
  
 


    
     
hash_algorithm

     

      
       The hash algorithm to use, e.g. &quot;md5&quot; or &quot;sha1&quot;
      
     

    
    
     
raw_output

     

      
      When set to TRUE, outputs raw binary data. FALSE outputs lowercase hexits.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
    Returns a string containing the calculated certificate fingerprint as lowercase hexits unless raw_output is set to TRUE in which case the raw binary representation of the message digest is returned.
  
  
    Returns FALSE on failure.
  
 " 
"openssl_x509_free", "Free certificate resource
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( resource $x509cert
   )

  
  ) frees the certificate associated
   with the specified x509cert resource from memory.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
x509cert

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"openssl_x509_parse", "Parse an X509 certificate and return the information as an array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( mixed $x509cert
   [, bool $shortnames = true
  ] )

  
  ) returns information about the
   supplied x509cert, including fields such as subject
   name, issuer name, purposes, valid from and valid to dates etc.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
x509cert

     

      
      
     

    
    
     
shortnames

     

      
       shortnames controls how the data is indexed in the
       array - if shortnames is TRUE (the default) then
       fields will be indexed with the short name form, otherwise, the long name
       form will be used - e.g.: CN is the shortname form of commonName.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The structure of the returned data is (deliberately) not
   yet documented, as it is still subject to change.
  
 " 
"openssl_x509_read", "Parse an X.509 certificate and return a resource identifier for
  it
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( mixed $x509certdata
   )

  
  ) parses the certificate supplied by
   x509certdata and returns a resource identifier for
   it.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
x509certdata

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a resource identifier on success or FALSE on failure.
  
 " 
"ord", "Return ASCII value of character
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $string
   )

  
   Returns the ASCII value of the first character of
   string.
  
  
   This function complements chr().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
string

     

      
       A character.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the ASCII value as an integer.
  
 " 
"output_add_rewrite_var", "Add URL rewriter values
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $name
   , string $value
   )

  
   This function adds another name/value pair to the URL rewrite mechanism.
   The name and value will be added to URLs (as GET parameter) and forms
   (as hidden input fields) the same way as the session ID when transparent
   URL rewriting is enabled with session.use_trans_sid. Please
   note that absolute URLs (http://example.com/..) aren't rewritten.
  
  
   This function's behavior is controlled by the url_rewriter.tags php.ini
   parameter.
  
  Note: 
   
    Calling this function will implicitly start output buffering if it is
    not active already.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
name

     

      
       The variable name.
      
     

    
    
     
value

     

      
       The variable value.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"output_reset_rewrite_vars", "Reset URL rewriter values
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( void
   )

  
   This function resets the URL rewriter and removes all rewrite
   variables previously set by the output_add_rewrite_var()
   function or the session mechanism (if session.use_trans_sid
   was set on session_start()).
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"pack", "Pack data into binary string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $format
   [, mixed $args
   [, mixed $...
  ]] )

  
   Pack given arguments into a binary string according to
   format. 
  
  
   The idea for this function was taken from Perl and all formatting codes
   work the same as in Perl. However, there are some formatting codes that are
   missing such as Perl's &quot;u&quot; format code.
  
  
   Note that the distinction between signed and unsigned values only
   affects the function unNAME(), where as
   function) gives the same result for
   signed and unsigned format codes.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
format

     

      
       The format string consists of format codes
       followed by an optional repeater argument. The repeater argument can
       be either an integer value or * for repeating to
       the end of the input data. For a, A, h, H the repeat count specifies
       how many characters of one data argument are taken, for @ it is the
       absolute position where to put the next data, for everything else the
       repeat count specifies how many data arguments are consumed and NAMEed
       into the resulting binary string.
      
      
       Currently implemented formats are:
      ) format characters
        
         Code
           </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
          a
           NUL-padded string
          A
           SPACE-padded stringh
           Hex string, low nibble firstH
           Hex string, high nibble firstcsigned charC
           unsigned chars
           signed short (always 16 bit, machine byte order)
          S
           unsigned short (always 16 bit, machine byte order)
          n
           unsigned short (always 16 bit, big endian byte order)
          v
           unsigned short (always 16 bit, little endian byte order)
          i
           signed integer (machine dependent size and byte order)
          I
           unsigned integer (machine dependent size and byte order)
          l
           signed long (always 32 bit, machine byte order)
          L
           unsigned long (always 32 bit, machine byte order)
          N
           unsigned long (always 32 bit, big endian byte order)
          V
           unsigned long (always 32 bit, little endian byte order)
          q
           signed long long (always 64 bit, machine byte order)
          Q
           unsigned long long (always 64 bit, machine byte order)
          J
           unsigned long long (always 64 bit, big endian byte order)
          P
           unsigned long long (always 64 bit, little endian byte order)
          f
           float (machine dependent size and representation)
          d
           double (machine dependent size and representation)
          x
           NUL byte
          X
           Back up one byte
          Z
           NUL-padded string (new in PHP 5.5)
          @
           NUL-fill to absolute position
          

    
    
     
args

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a binary string containing data.
  
 " 
"parse_ini_file", "Parse a configuration file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $filename
   [, bool $process_sections = false
   [, int $scanner_mode = INI_SCANNER_NORMAL
  ]] )

  
  ) loads in the
   ini file specified in filename,
   and returns the settings in it in an associative array.
  
  
   The structure of the ini file is the same as the php.ini's.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       The filename of the ini file being parsed.
      
     

    
    
     
process_sections

     

      
       By setting the process_sections
       parameter to TRUE, you get a multidimensional array, with
       the section names and settings included. The default
       for process_sections is FALSE      
      
     

    
    
     
scanner_mode

     

      
       Can either be INI_SCANNER_NORMAL (default) or 
       INI_SCANNER_RAW. If INI_SCANNER_RAW 
       is supplied, then option values will not be parsed.
      
      
    As of PHP 5.6.1 can also be specified as INI_SCANNER_TYPED.
    In this mode boolean, null and integer types are preserved when possible.
    String values &quot;true&quot;, &quot;on&quot; and &quot;yes&quot;
    are converted to TRUE. &quot;false&quot;, &quot;off&quot;, &quot;no&quot;
    and &quot;none&quot; are considered FALSE. &quot;null&quot; is converted to NULL
    in typed mode. Also, all numeric strings are converted to integer type if it is possible.
   
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The settings are returned as an associative array on success,
   and FALSE on failure.
  
 " 
"parse_ini_string", "Parse a configuration string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $ini
   [, bool $process_sections = false
   [, int $scanner_mode = INI_SCANNER_NORMAL
  ]] )

  
  ) returns the settings in string
   ini in an associative array.
  
  
   The structure of the ini string is the same as the php.ini's.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
ini

     

      
       The contents of the ini file being parsed.
      
     

    
    
     
process_sections

     

      
       By setting the process_sections
       parameter to TRUE, you get a multidimensional array, with
       the section names and settings included. The default
       for process_sections is FALSE      
      
     

    
    
     
scanner_mode

     

      
       Can either be INI_SCANNER_NORMAL (default) or 
       INI_SCANNER_RAW. If INI_SCANNER_RAW 
       is supplied, then option values will not be parsed.
      
      
    As of PHP 5.6.1 can also be specified as INI_SCANNER_TYPED.
    In this mode boolean, null and integer types are preserved when possible.
    String values &quot;true&quot;, &quot;on&quot; and &quot;yes&quot;
    are converted to TRUE. &quot;false&quot;, &quot;off&quot;, &quot;no&quot;
    and &quot;none&quot; are considered FALSE. &quot;null&quot; is converted to NULL
    in typed mode. Also, all numeric strings are converted to integer type if it is possible.
   
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The settings are returned as an associative array on success,
   and FALSE on failure.
  
 " 
"parse_str", "Parses the string into variables
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( string $str
   [, array &amp;$arr
  ] )

  
   Parses str as if it were the query string
   passed via a URL and sets variables in the current scope. 
  
  Note: 
   
    To get the current QUERY_STRING, you may use the variable
    $_SERVER['QUERY_STRING'].
    Also, you may want to read the section on
    variables from external
    sources.
   
  
  Note: 
   
    The magic_quotes_gpc setting
    affects the output of this function, as) uses
    the same mechanism that PHP uses to populate the $_GET,
    $_POST, etc. variables.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The input string.
      
     

    
    
     
arr

     

      
       If the second parameter arr is present,
       variables are stored in this variable as array elements instead.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"parse_url", "Parse a URL and return its components
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( string $url
   [, int $component = -1
  ] )

  
   This function parses a URL and returns an associative array containing any
   of the various components of the URL that are present.
  
  
   This function is not meant to validate
   the given URL, it only breaks it up into the above listed parts. Partial
   URLs are also accepted,) tries its best to
   parse them correctly.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
url

     

      
       The URL to parse. Invalid characters are replaced by
       _.
      
     

    
   
component

     

      
       Specify one of PHP_URL_SCHEME,
       PHP_URL_HOST, PHP_URL_PORT,
       PHP_URL_USER, PHP_URL_PASS,
       PHP_URL_PATH, PHP_URL_QUERY
       or PHP_URL_FRAGMENT to retrieve just a specific
       URL component as a string (except when
       PHP_URL_PORT is given, in which case the return
       value will be an integer).
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   On seriously malformed URLs,) may return
   FALSE.
  
  
   If the component parameter is omitted, an
   associative array is returned. At least one element will be
   present within the array. Potential keys within this array are:
   
     
      scheme - e.g. http
     
    
    
     
      host 
     
    
    
     
      port
     
    
    
     
      user
     
    
    
     
      pass
     
    
    
     
      path
     
    
    
     
      query - after the question mark ?
     
    
    
     
      fragment - after the hashmark #
     
    
   
   If the component parameter is specified,
  ) returns a string (or an
   integer, in the case of PHP_URL_PORT)
   instead of an array. If the requested component doesn't exist
   within the given URL, NULL will be returned.
  
 " 
"passthru", "Execute an external program and display raw output
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( string $command
   [, int &amp;$return_var
  ] )

  
   The) function is similar to the
   exec() function in that it executes a
   command. This function
   should be used in place of exec() or
   system() when the output from the Unix command
   is binary data which needs to be passed directly back to the
   browser.  A common use for this is to execute something like the
   pbmplus utilities that can output an image stream directly.  By
   setting the Content-type to image/gif and
   then calling a pbmplus program to output a gif, you can create
   PHP scripts that output images directly.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
command

     

      
       The command that will be executed.
      
     

    
    
     
return_var

     

      
       If the return_var argument is present, the 
       return status of the Unix command will be placed here.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"password_get_info", "Returns information about the given hash
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $hash
   )

  
   When passed in a valid hash created by an algorithm supported by
   password_hash(), this function will return an array of
   information about that hash.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
hash

    

     
      A hash created by password_hash().
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an associative array with three elements: 
   
     
       algo, which will match a
       password algorithm constant
     
    
    
     
      algoName, which has the human readable name of the
      algorithm
     
    
    
     
      options, which includes the options
      provided when calling password_hash()
     
    
   " 
"password_hash", "Creates a password hash
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $password
   , integer $algo
   [, array $options
  ] )

  
  ) creates a new password hash using a strong one-way hashing
   algorithm.) is compatible with crypt().
   Therefore, password hashes created by crypt() can be used with
  ).
  
  
   The following algorithms are currently supported:
  
  
   
     
      PASSWORD_DEFAULT - Use the bcrypt algorithm (default as of PHP 5.5.0).
      Note that this constant is designed to change over time as new and stronger algorithms are added
      to PHP. For that reason, the length of the result from using this identifier can change over
      time. Therefore, it is recommended to store the result in a database column that can expand
      beyond 60 characters (255 characters would be a good choice).
     
    
    
     
      PASSWORD_BCRYPT - Use the CRYPT_BLOWFISH algorithm to
      create the hash. This will produce a standard crypt() compatible hash using
      the &quot;$2y$&quot; identifier. The result will always be a 60 character string,  or FALSE on failure.
     
     
      Supported Options:
     
     
       
        salt - to manually provide a salt to use when hashing the password.
        Note that this will override and prevent a salt from being automatically generated.
       
       
        If omitted, a random salt will be generated by) for
        each password hashed. This is the intended mode of operation.
       
       Warning
        
         The salt option has been deprecated as of PHP 7.0.0. It is now
         preferred to simply use the salt that is generated by default.
        
       
      
      
       
        cost - which denotes the algorithmic cost that should be used. 
        Examples of these values can be found on the crypt() page.
       
       
        If omitted, a default value of 10 will be used. This is a good
        baseline cost, but you may want to consider increasing it depending on your hardware.
       
      
     
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
password

    

     
      The user's password.
     
      Caution
       
        Using the PASSWORD_BCRYPT as the
        algorithm, will result
        in the password parameter being truncated to a
        maximum length of 72 characters.
       
      
    

   
   
    
algo

    

     
      A password algorithm constant denoting the algorithm to use when hashing the password.
     
    

   
   
    
options

    

     
      An associative array containing options. See the password algorithm constants for documentation on the supported options for each algorithm.
     
     
      If omitted, a random salt will be created and the default cost will be
      used.
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the hashed password,  or FALSE on failure.
  
  
   The used algorithm, cost and salt are returned as part of the hash. Therefore,
   all information that's needed to verify the hash is included in it. This allows
   the password_verify() function to verify the hash without
   needing separate storage for the salt or algorithm information.
  
 " 
"password_needs_rehash", "Checks if the given hash matches the given options
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   boolean    ( string $hash
   , integer $algo
   [, array $options
  ] )

  
   This function checks to see if the supplied hash implements the algorithm
   and options provided. If not, it is assumed that the hash needs to be
   rehashed.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
hash

    

     
      A hash created by password_hash().
     
    

   
   
    
algo

    

     
      A password algorithm constant denoting the algorithm to use when hashing the password.
     
    

   
   
    
options

    

     
      An associative array containing options. See the password algorithm constants for documentation on the supported options for each algorithm.
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the hash should be rehashed to match the given
   algo and options, or FALSE
   otherwise.
  
 " 
"password_verify", "Verifies that a password matches a hash
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   boolean    ( string $password
   , string $hash
   )

  
   Verifies that the given hash matches the given password.
  
  
   Note that password_hash() returns the algorithm, cost and salt 
   as part of the returned hash. Therefore, all information that's needed to verify
   the hash is included in it. This allows the verify function to verify the hash
   without needing separate storage for the salt or algorithm information.
  
  
   This function is safe against timing attacks.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
password

    

     
      The user's password.
     
    

   
   
    
hash

    

     
      A hash created by password_hash().
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the password and hash match, or FALSE otherwise.
  
 " 
"pathinfo", "Returns information about a file path
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( string $path
   [, int $options = PATHINFO_DIRNAME | PATHINFO_BASENAME | PATHINFO_EXTENSION | PATHINFO_FILENAME
  ] )

  
  ) returns information about
   path: either an associative array or a string,
   depending on options.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
path

     

      
       The path to be parsed.
      
     

    
    
     
options

     

      
       If present, specifies a specific element to be returned; one of
       PATHINFO_DIRNAME,
       PATHINFO_BASENAME,
       PATHINFO_EXTENSION or
       PATHINFO_FILENAME.
      
      If options is not specified, returns all
       available elements.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   If the options parameter is not passed, an
   associative array containing the following elements is
   returned:
   dirname, basename,
   extension (if any), and filename.
  
  Note: 
   
    If the path has more than one extension,
    PATHINFO_EXTENSION returns only the last one and
    PATHINFO_FILENAME only strips the last one.
    (see first example below).
   
  
  Note: 
   
    If the path does not have an extension, no
    extension element will be returned
    (see second example below).
   
  
  
   If options is present, returns a
   string containing the requested element.
  
 " 
"pclose", "Closes process file pointer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $handle
   )

  
   Closes a file pointer to a pipe opened by popen().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handle

     

      
       The file pointer must be valid, and must have been returned by a
       successful call to popen().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the termination status of the process that was run. In case of 
   an error then -1 is returned.
  
 " 
"pcntl_alarm", "Set an alarm clock for delivery of a signal
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( int $seconds
   )

  
   Creates a timer that will send a SIGALRM signal to
   the process after the given number of seconds.
   Any call to) will cancel any previously
   set alarm.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
seconds

     

      
       The number of seconds to wait. If seconds is
       zero, no new alarm is created.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the time in seconds that any previously scheduled alarm had
   remaining before it was to be delivered, or 0 if there
   was no previously scheduled alarm.
  
 " 
"pcntl_errno", "Alias of pcntl_strerror()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   pcntl_strerror()
  
 " 
"pcntl_exec", "Executes specified program in current process space
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $path
   [, array $args
   [, array $envs
  ]] )

  
   Executes the program with the given arguments.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
path

     

      
       path must be the path to a binary executable or a
       script with a valid path pointing to an executable in the shebang (
       #!/usr/local/bin<BR>erl for example) as the first line.  See your system's
       man execve(2) page for additional information.
      
     

    
    
     
args

     

      
       args is an array of argument strings passed to the
       program.
      
     

    
    
     
envs

     

      
       envs is an array of strings which are passed as
       environment to the program.  The array is in the format of name =&gt; value,
       the key being the name of the environmental variable and the value being
       the value of that variable.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns FALSE on error and does not return on success.
  
 " 
"pcntl_fork", "Forks the currently running process
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   The) function creates a child
   process that differs from the parent process only in its PID and
   PPID. Please see your system's fork(2) man page for specific details as to
   how fork works on your system.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   On success, the PID of the child process is returned in the
   parent's thread of execution, and a 0 is returned in the child's
   thread of execution.  On failure, a -1 will be returned in the
   parent's context, no child process will be created, and a PHP
   error is raised.
  
 " 
"pcntl_get_last_error", "Retrieve the error number set by the last pcntl function which failed
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  

  

  WarningThis function is
currently not documented; only its argument list is available.


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  This function has no parameters.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns error code.
  
 " 
"pcntl_getpriority", "Get the priority of any process
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ([ int $pid = getmypid()
   [, int $process_identifier = PRIO_PROCESS
  ]] )

  
  ) gets the priority of
   pid. Because priority levels can differ between
   system types and kernel versions, please see your system's getpriority(2)
   man page for specific details.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pid

     

      
       If not specified, the pid of the current process is used.
      
     

    
    
     
process_identifier

     

      
       One of PRIO_PGRP, PRIO_USER
       or PRIO_PROCESS.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns the priority of the process
   or FALSE on error.  A lower numerical value causes more favorable
   scheduling.
  
  WarningThis function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function.
 " 
"pcntl_setpriority", "Change the priority of any process
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( int $priority
   [, int $pid = getmypid()
   [, int $process_identifier = PRIO_PROCESS
  ]] )

  
  ) sets the priority of
   pid. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
priority

     

      
       priority is generally a value in the range
       -20 to 20. The default priority
       is 0 while a lower numerical value causes more
       favorable scheduling.  Because priority levels can differ between
       system types and kernel versions, please see your system's setpriority(2)
       man page for specific details.
      
     

    
    
     
pid

     

      
       If not specified, the pid of the current process is used.
      
     

    
    
     
process_identifier

     

      
       One of PRIO_PGRP, PRIO_USER
       or PRIO_PROCESS.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"pcntl_signal", "Installs a signal handler
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( int $signo
   , callable|int $handler
   [, bool $restart_syscalls = true
  ] )

  
   The) function installs a new
   signal handler or replaces the current signal handler for the signal indicated by signo.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
signo

     

      
       The signal number.
      
     

    
    
     
handler

     

      
       The signal handler. This may be either a callable, which
       will be invoked to handle the signal, or either of the two global
       constants SIG_IGN or SIG_DFL,
       which will ignore the signal or restore the default signal handler
       respectively. 
      
      
       If a callable is given, it must implement the following
       signature:
      
      
       
        void handler
         ( int $signo
        )

       
signo

         

          
           The signal being handled.
          
         

        
       Note: 
       
        Note that when you set a handler to an object method, that object's
        reference count is increased which makes it persist until you either
        change the handler to something else, or your script ends.
       
      
     

    
    
     
restart_syscalls

     

      
       Specifies whether system call restarting should be used when this
       signal arrives.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"pcntl_signal_dispatch", "Calls signal handlers for pending signals
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( void
   )

  
   The) function calls the signal 
   handlers installed by pcntl_signal() for each pending
   signal.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"pcntl_sigprocmask", "Sets and retrieves blocked signals
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( int $how
   , array $set
   [, array &amp;$oldset
  ] )

  
   The) function adds, removes or sets blocked
   signals, depending on the how parameter.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
how

     

      
       Sets the behavior of). Possible
       values: 
       SIG_BLOCK: Add the signals to the
         currently blocked signals.
        SIG_UNBLOCK: Remove the signals from the
         currently blocked signals.
        SIG_SETMASK: Replace the currently
         blocked signals by the given list of signals.
       

    
    
     
set

     

      
       List of signals.
      
     

    
    
     
oldset

     

      
       The oldset parameter is set to an array
       containing the list of the previously blocked signals.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"pcntl_sigtimedwait", "Waits for signals, with a timeout
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( array $set
   [, array &amp;$siginfo
   [, int $seconds = 0
   [, int $nanoseconds = 0
  ]]] )

  
   The) function operates in exactly
   the same way as pcntl_sigwaitinfo() except that it takes
   two additional parameters, seconds and
   nanoseconds, which enable an upper bound to be placed
   on the time for which the script is suspended.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
set

     

      
       Array of signals to wait for.
      
     

    
    
     
siginfo

     

      
       The siginfo is set to an array containing
       informations about the signal. See
       pcntl_sigwaitinfo().
      
     

    
    
     
seconds

     

      
       Timeout in seconds.
      
     

    
    
     
nanoseconds

     

      
       Timeout in nanoseconds.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   On success,) returns a signal number.
  
 " 
"pcntl_sigwaitinfo", "Waits for signals
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( array $set
   [, array &amp;$siginfo
  ] )

  
   The) function suspends execution of the
   calling script until one of the signals given in set
   are delivered. If one of the signal is already pending (e.g. blocked by
   pcntl_sigprocmask()),
  ) will return immediately.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
set

     

      
       Array of signals to wait for.
      
     

    
    
     
siginfo

     

      
       The siginfo parameter is set to an array containing
       informations about the signal.
      
      
       The following elements are set for all signals:
       signo: Signal number
        errno: An error number
        code: Signal code
       
       The following elements may be set for the SIGCHLD signal:
       status: Exit value or signal
        utime: User time consumed
        stime: System time consumed
        pid: Sending process ID
        uid: Real user ID of sending process
       
       The following elements may be set for the SIGILL,
       SIGFPE, SIGSEGV and
       SIGBUS signals:
       addr: Memory location which caused fault
       
       The following element may be set for the SIGPOLL
       signal:
       band: Band event
        fd: File descriptor number
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   On success,) returns a signal number.
  
 " 
"pcntl_strerror", "Retrieve the system error message associated with the given errno
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( int $errno
   )

  

  

  WarningThis function is
currently not documented; only its argument list is available.


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
errno

    

     
      
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns error description on success or FALSE on failure.
  
 " 
"pcntl_wait", "Waits on or returns the status of a forked child
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( int &amp;$status
   [, int $options = 0
  ] )

  
   The wait function suspends execution of the current process until a
   child has exited, or until a signal is delivered whose action is to
   terminate the current process or to call a signal handling function.  If a
   child has already exited by the time of the call (a so-called &quot;zombie&quot;
   process), the function returns immediately.  Any system resources used by
   the child are freed.  Please see your system's wait(2) man page for
   specific details as to how wait works on your system.
  
  Note: 
   
    This function is equivalent to calling NAMEpid()
    with a -1 pid and no
    options.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
status

     

      
      ) will store status information
       in the status parameter which can be
       evaluated using the following functions:
       pcntl_wifexited(),
       pcntl_wifstopped(),
       pcntl_wifsignaled(),
       pcntl_wexitstatus(),
       pcntl_wtermsig() and
       pcntl_wstopsig().
      
     

    
    
     
options

     

      
       If wait3 is available on your system (mostly BSD-style systems), you can
       provide the optional options parameter.  If this
       parameter is not provided, wait will be used for the system call.  If
       wait3 is not available, providing a value for options
        will have no effect. The value of options
        is the value of zero or more of the following two constants
       OR'ed together:
       Possible values for options
        
         WNOHANG
           
            Return immediately if no child has exited.
           
          WUNTRACED
           
            Return for children which are stopped, and whose status has
            not been reported.
           
          

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns the process ID of the
   child which exited, -1 on error or zero if WNOHANG was provided as an
   option (on wait3-available systems) and no child was available.
  
 " 
"pcntl_waitpid", "Waits on or returns the status of a forked child
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( int $pid
   , int &amp;$status
   [, int $options = 0
  ] )

  
   Suspends execution of the current process until a child as specified by
   the pid argument has exited, or until a signal is
   delivered whose action is to terminate the current process or to call a
   signal handling function.
  
  
   If a child as requested by pid has already exited
   by the time of the call (a so-called &quot;zombie&quot; process), the function
   returns immediately.  Any system resources used by the child are freed.
   Please see your system's waitpid(2) man page for specific details as to
   how waitpid works on your system.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pid

     

      
       The value of pid can be one of the following:
       possible values for pid
        
         &lt; -1
           
            wait for any child process whose process group ID is equal to
            the absolute value of pid.
           
          -1
           
            wait for any child process; this is the same behaviour that
            the wait function exhibits.
           
          0
           
            wait for any child process whose process group ID is equal to
            that of the calling process.
           
          &gt; 0
           
            wait for the child whose process ID is equal to the value of
            pid.
           
          Note: 
       
        Specifying -1 as the pid is
        equivalent to the functionality pcntl_wait() provides
        (minus options).
       
      
     

    
    
     
status

     

      
      ) will store status information
       in the status parameter which can be
       evaluated using the following functions:
       pcntl_wifexited(),
       pcntl_wifstopped(),
       pcntl_wifsignaled(),
       pcntl_wexitstatus(),
       pcntl_wtermsig() and
       pcntl_wstopsig().
      
     

    
    
     
options

     

      
       The value of options is the value of zero
       or more of the following two global constants
       OR'ed together:
       possible values for options
        
         WNOHANG
           
            return immediately if no child has exited.
           
          WUNTRACED
           
            return for children which are stopped, and whose status has
            not been reported.
           
          

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns the process ID of the
   child which exited, -1 on error or zero if WNOHANG was used and no
   child was available
  
 " 
"pcntl_wexitstatus", "Returns the return code of a terminated child
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( int $status
   )

  
   Returns the return code of a terminated child.  This function is
   only useful if pcntl_wifexited() returned
   TRUE.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
status

     

      The status
parameter is the status parameter supplied to a successful
call to pcntl_waitpid().
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the return code, as an integer.
  
 " 
"pcntl_wifexited", "Checks if status code represents a normal exit
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( int $status
   )

  
   Checks whether the child status code represents a normal exit.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
status

     

      The status
parameter is the status parameter supplied to a successful
call to pcntl_waitpid().
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the child status code represents a normal exit, FALSE
   otherwise.
  
 " 
"pcntl_wifsignaled", "Checks whether the status code represents a termination due to a signal
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( int $status
   )

  
   Checks whether the child process exited because of a signal which was not
   caught.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
status

     

      The status
parameter is the status parameter supplied to a successful
call to pcntl_waitpid().
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the child process exited because of a signal which was
   not caught, FALSE otherwise.
  
 " 
"pcntl_wifstopped", "Checks whether the child process is currently stopped
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( int $status
   )

  
   Checks whether the child process which caused the return is currently
   stopped; this is only possible if the call to
   pcntl_waitpid() was done using the option
   WUNTRACED.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
status

     

      The status
parameter is the status parameter supplied to a successful
call to pcntl_waitpid().
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the child process which caused the return is
   currently stopped, FALSE otherwise.
  
 " 
"pcntl_wstopsig", "Returns the signal which caused the child to stop
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( int $status
   )

  
   Returns the number of the signal which caused the child to stop.
   This function is only useful if
   pcntl_wifstopped() returned TRUE.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
status

     

      The status
parameter is the status parameter supplied to a successful
call to pcntl_waitpid().
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the signal number.
  
 " 
"pcntl_wtermsig", "Returns the signal which caused the child to terminate
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( int $status
   )

  
   Returns the number of the signal that caused the child process to
   terminate. This function is only useful if
   pcntl_wifsignaled() returned TRUE.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
status

     

      The status
parameter is the status parameter supplied to a successful
call to pcntl_waitpid().
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the signal number, as an integer.
  
 " 
"pdo_drivers", "" 
"pfsockopen", "Open persistent Internet or Unix domain socket connection
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( string $hostname
   [, int $port = -1
   [, int &amp;$errno
   [, string &amp;$errstr
   [, float $timeout = ini_get(&quot;default_socket_timeout&quot;)
  ]]]] )

  
   This function behaves exactly as fsockopen() with the
   difference that the connection is not closed after the script finishes.
   It is the persistent version of fsockopen().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   For parameter information, see the fsockopen()
   documentation.
  
 " 
"php_ini_loaded_file", "Retrieve a path to the loaded php.ini file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( void
   )

  
   Check if a php.ini file is loaded, and retrieve its path.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  This function has no parameters.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The loaded php.ini path, or FALSE if one is not loaded.
  
 " 
"php_ini_scanned_files", "Return a list of .ini files parsed from the additional ini dir
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( void
   )

  
  ) returns a comma-separated
   list of configuration files parsed after php.ini. The directories
   searched are set by a compile time option and, optionally, by an
   environment variable at run time: more information can be found in the
   installation guide.
  
  
   The returned configuration files include the full path.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a comma-separated string of .ini files on success. Each comma is
   followed by a newline. If the configure directive --with-config-file-scan-dir
 wasn't set and the
   PHP_INI_SCAN_DIR environment variable isn't set, FALSE
   is returned.  If it was set and the directory was empty, an empty string is
   returned.  If a file is unrecognizable, the file will still make it into
   the returned string but a PHP error will also result.  This PHP error will
   be seen both at compile time and while using
  ).
  
 " 
"php_sapi_name", "Returns the type of interface between web server and PHP
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( void
   )

  
   Returns a lowercase string that describes the type of interface
   (the Server API, SAPI) that PHP is using. For example, in CLI PHP this
   string will be &quot;cli&quot; whereas with Apache it may have several different
   values depending on the exact SAPI used. Possible values are listed
   below.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the interface type, as a lowercase string.
  
  
   Although not exhaustive, the possible return values include 
   aolserver, apache, 
   apache2filter, apache2handler, 
   caudium, cgi (until PHP 5.3), 
   cgi-fcgi, cli, cli-server,
   continuity, embed, fpm-fcgi,
   isapi, litespeed, 
   milter, nsapi, 
   phttpd, pi3web, roxen,
   thttpd, tux, and webjames.
  
 " 
"php_strip_whitespace", "Return source with stripped comments and whitespace
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $filename
   )

  
   Returns the PHP source code in filename with
   PHP comments and whitespace removed. This may be useful for determining the
   amount of actual code in your scripts compared with the amount of comments.
   This is similar to using php -w from the
   commandline.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the PHP file.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The stripped source code will be returned on success, or an empty string
   on failure.
  
  Note: 
   
    This function works as described as of PHP 5.0.1. Before this it would
    only return an empty string. For more information on this bug and its
    prior behavior, see bug report
    » #29606.
   
  
 " 
"php_uname", "Returns information about the operating system PHP is running on
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ([ string $mode = &quot;a&quot;
  ] )

  
  ) returns a description of the operating
   system PHP is running on.  This is the same string you see at the very
   top of the phpinfo() output.  For the name of just
   the operating system, consider using the PHP_OS
   constant, but keep in mind this constant will contain the operating
   system PHP was built on.
  
  
   On some older UNIX platforms, it may not be able to determine the
   current OS information in which case it will revert to displaying
   the OS PHP was built on.  This will only happen if your uname() 
   library call either doesn't exist or doesn't work.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
mode

     

      
       mode is a single character that defines what
       information is returned:
       
         
          'a': This is the default. Contains all modes in
          the sequence &quot;s n r v m&quot;.
         
        
        
         
          's': Operating system name. eg.
           FreeBSD.
         
        
        
         
          'n': Host name. eg. 
          localhost.example.com.
         
        
        
         
          'r': Release name. eg. 
          5.1.2-RELEASE.
         
        
        
         
          'v': Version information. Varies a lot between
          operating systems.
         
        
        
         
          'm': Machine type. eg. i386.
         
        
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the description, as a string.
  
 " 
"phpcredits", "Prints out the credits for PHP
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ([ int $flag = CREDITS_ALL
  ] )

  
   This function prints out the credits listing the PHP developers,
   modules, etc. It generates the appropriate HTML codes to insert
   the information in a page. 
     
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
flag

     

      
       To generate a custom credits page, you may want to use the
       flag parameter.
      
      
       Pre-defined) flags
        
         name
           description
          CREDITS_ALL
           
            All the credits, equivalent to using: CREDITS_DOCS +
            CREDITS_GENERAL + CREDITS_GROUP +
            CREDITS_MODULES + CREDITS_FULLPAGE.
            It generates a complete stand-alone HTML page with the appropriate tags.
           
          CREDITS_DOCS
           The credits for the documentation team
          CREDITS_FULLPAGE
           
            Usually used in combination with the other flags.  Indicates
            that a complete stand-alone HTML page needs to be
            printed including the information indicated by the other
            flags.
           
          CREDITS_GENERAL
           
            General credits: Language design and concept, PHP authors 
            and SAPI module.
           
          CREDITS_GROUP
           A list of the core developers
          CREDITS_MODULES
           
            A list of the extension modules for PHP, and their authors
           
          CREDITS_SAPI
           
            A list of the server API modules for PHP, and their authors
           
          

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"phpinfo", "Outputs information about PHP's configuration
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ([ int $what = INFO_ALL
  ] )

  
   Outputs a large amount of information about the current state of  PHP. 
   This includes information about PHP compilation options and extensions,
   the PHP version, server information and environment (if compiled as a
   module), the PHP environment, OS version information, paths, master and
   local values of configuration options, HTTP headers, and the PHP License.
  
  
   Because every system is setup differently,) is
   commonly used to check configuration settings and for available
   predefined variables
   on a given system.
  
  
  ) is also a valuable debugging tool as it
   contains all EGPCS (Environment, GET, POST, Cookie, Server) data.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
what

     

      
       The output may be customized by passing one or more of the
       following constants bitwise values summed
       together in the optional what parameter.
       One can also combine the respective constants or bitwise values
       together with the or operator.
      
      
      ) options
        
         Name (constant)
           Value
           </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
          INFO_GENERAL
           1
           
            The configuration line, php.ini location, build date, Web
            Server, System and more.
           
          INFO_CREDITS
           2
           
            PHP Credits.  See also phpcredits().
           
          INFO_CONFIGURATION
           4
           
            Current Local and Master values for PHP directives.  See
            also ini_get().
           
          INFO_MODULES
           8
           
            Loaded modules and their respective settings.  See also
            get_loaded_extensions().
           
          INFO_ENVIRONMENT
           16
           
            Environment Variable information that's also available in
            $_ENV.
           
          INFO_VARIABLES
           32
           
            Shows all 
            predefined variables from EGPCS (Environment, GET,
            POST, Cookie, Server).
           
          INFO_LICENSE
           64
           
            PHP License information.  See also the » license FAQ.
           
          INFO_ALL
           -1
           
            Shows all of the above.
           
          

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"phpversion", "Gets the current PHP version
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ([ string $extension
  ] )

  
   Returns a string containing the version of the currently running PHP
   parser or extension.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
extension

     

      
       An optional extension name.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   If the optional extension parameter is
   specified,) returns the version of that
   extension, or FALSE if there is no version information associated or
   the extension isn't enabled.
  
 " 
"pi", "Get value of NAME
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    float     ( void
    )

  
   Returns an approximation of  The returned float
   has a precision based on the
   precision directive in
   php.ini, which defaults to 14.
   Also, you can use the M_PI constant which yields
   identical results to).
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The value ofas float.
  
 " 
"png2wbmp", "Convert PNG image file to WBMP image file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $pngname
   , string $wbmpname
   , int $dest_height
   , int $dest_width
   , int $threshold
   )

  
   Converts a PNG file into a WBMP file.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pngname

     

      
       Path to PNG file.
      
     

    
    
     
wbmpname

     

      
       Path to destination WBMP file.
      
     

    
    
     
dest_height

     

      
       Destination image height.
      
     

    
    
     
dest_width

     

      
       Destination image width.
      
     

    
    
     
threshold

     

      
       Threshold value, between 0 and 8 (inclusive).
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"popen", "Opens process file pointer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( string $command
   , string $mode
   )

  
   Opens a pipe to a process executed by forking the command given
   by command.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
command

     

      
       The command
      
     

    
    
     
mode

     

      
       The mode
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a file pointer identical to that returned by
   fopen(), except that it is unidirectional (may
   only be used for reading or writing) and must be closed with
   pclose(). This pointer may be used with
   fgets(), fgetss(), and
   fwrite(). When the mode is 'r', the returned
   file pointer equals to the STDOUT of the command, when the mode
   is 'w', the returned file pointer equals to the STDIN of the
   command.
  
  
   If an error occurs, returns FALSE.
  
 " 
"pos", "Alias of current()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   current()
  
 " 
"posix_access", "
   Determine accessibility of a file
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $file
   [, int $mode = POSIX_F_OK
  ] )

  
  ) checks the user's permission of a file.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
file

      

       
        The name of the file to be tested.
       
      

     
    
     
mode

      

       
        A mask consisting of one or more of POSIX_F_OK,
        POSIX_R_OK, POSIX_W_OK and
        POSIX_X_OK.
       
       
        POSIX_R_OK, POSIX_W_OK and
        POSIX_X_OK request checking whether the file
        exists and has read, write and execute permissions, respectively.
        POSIX_F_OK just requests checking for the
        existence of the file.
       
      

     
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"posix_ctermid", "Get path name of controlling terminal
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( void
   )

  
   Generates a string which is the pathname for the current 
   controlling terminal for the process.  On error this will set errno, 
   which can be checked using posix_get_last_error()
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Upon successful completion, returns string of the pathname to 
   the current controlling terminal.  Otherwise FALSE is returned and errno
   is set, which can be checked with posix_get_last_error().
  
 " 
"posix_errno", "Alias of posix_get_last_error()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   posix_get_last_error().
  
 " 
"posix_get_last_error", "Retrieve the error number set by the last posix function that failed
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   Retrieve the error number set by the last posix function that failed.
   The system error message associated with the errno may be checked with
   posix_strerror().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the errno (error number) set by the last posix function that
   failed.  If no errors exist, 0 is returned. 
  
 " 
"posix_getcwd", "Pathname of current directory
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( void
   )

  
   Gets the absolute pathname of the script's current working directory.
   On error, it sets errno which can be checked using
   posix_get_last_error()
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string of the absolute pathname on success.  
   On error, returns FALSE and sets errno which can be checked with
   posix_get_last_error().
  
 " 
"posix_getegid", "Return the effective group ID of the current process
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   Return the numeric effective group ID of the current process. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an integer of the effective group ID.
  
 " 
"posix_geteuid", "Return the effective user ID of the current process
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   Return the numeric effective user ID of the current process. See
   also posix_getpwuid() for information on how
   to convert this into a useable username.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the user id, as an integer
  
 " 
"posix_getgid", "Return the real group ID of the current process
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   Return the numeric real group ID of the current process.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the real group id, as an integer.
  
 " 
"posix_getgrgid", "Return info about a group by group id
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( int $gid
   )

  
   Gets information about a group provided its id.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
gid

     

      
       The group id.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The array elements returned are:
   The group information array
    
     Element
       </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
      name
       
        The name element contains the name of the group. This is
        a short, usually less than 16 character &quot;handle&quot; of the
        group, not the real, full name.
       
      passwd
       
        The passwd element contains the group's password in an
        encrypted format. Often, for example on a system employing
        &quot;shadow&quot; passwords, an asterisk is returned instead.
       
      gid
       
        Group ID, should be the same as the
        gid parameter used when calling the
        function, and hence redundant.
       
      members
       
        This consists of an array of
        string's for all the members in the group.
       
      " 
"posix_getgrnam", "Return info about a group by name
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $name
   )

  
   Gets information about a group provided its name. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
name

     

      The name of the group
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The array elements returned are:
   The group information array
    
     Element
       </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
      name
       
        The name element contains the name of the group. This is
        a short, usually less than 16 character &quot;handle&quot; of the
        group, not the real, full name.  This should be the same as
        the name parameter used when
        calling the function, and hence redundant.
       
      passwd
       
        The passwd element contains the group's password in an
        encrypted format. Often, for example on a system employing
        &quot;shadow&quot; passwords, an asterisk is returned instead.
       
      gid
       
        Group ID of the group in numeric form.
       
      members
       
        This consists of an array of
        string's for all the members in the group.
       
      " 
"posix_getgroups", "Return the group set of the current process
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
   Gets the group set of the current process.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of integers containing the numeric group ids of the group
   set of the current process.
  
 " 
"posix_getlogin", "Return login name
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( void
   )

  
   Returns the login name of the user owning the current process.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the login name of the user, as a string.
  
 " 
"posix_getpgid", "Get process group id for job control
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( int $pid
   )

  
   Returns the process group identifier of the process
   pid or FALSE on failure.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pid

     

      
       The process id.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the identifier, as an integer.
  
 " 
"posix_getpgrp", "Return the current process group identifier
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   Return the process group identifier of the current process. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the identifier, as an integer.
  
 " 
"posix_getpid", "Return the current process identifier
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   Return the process identifier of the current process.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the identifier, as an integer.
  
 " 
"posix_getppid", "Return the parent process identifier
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   Return the process identifier of the parent process of the
   current process.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the identifier, as an integer.
  
 " 
"posix_getpwnam", "Return info about a user by username
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $username
   )

  
   Returns an array of information about the given user.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
username

     

      
       An alphanumeric username.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   On success an array with the following elements is returned, else 
   FALSE is returned:
   The user information array
    
     Element
       </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
      name
       
        The name element contains the username of the user. This is
        a short, usually less than 16 character &quot;handle&quot; of the
        user, not the real, full name. This should be the same as
        the username parameter used when
        calling the function, and hence redundant.
       
      passwd
       
        The passwd element contains the user's password in an
        encrypted format. Often, for example on a system employing
        &quot;shadow&quot; passwords, an asterisk is returned instead.
       
      uid
       
        User ID of the user in numeric form.
       
      gid
       
        The group ID of the user. Use the function
        posix_getgrgid() to resolve the group
        name and a list of its members.
       
      gecos
       
        GECOS is an obsolete term that refers to the finger
        information field on a Honeywell batch processing system.
        The field, however, lives on, and its contents have been
        formalized by POSIX. The field contains a comma separated
        list containing the user's full name, office phone, office
        number, and home phone number. On most systems, only the
        user's full name is available.
       
      dir
       
        This element contains the absolute path to the home
        directory of the user.
       
      shell
       
        The shell element contains the absolute path to the
        executable of the user's default shell.
       
      " 
"posix_getpwuid", "Return info about a user by user id
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( int $uid
   )

  
   Returns an array of information about the user 
   referenced by the given user ID.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
uid

     

      
       The user identifier.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an associative array with the following elements:
   The user information array
    
     Element
       </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
      name
       
        The name element contains the username of the user. This is
        a short, usually less than 16 character &quot;handle&quot; of the
        user, not the real, full name.
       
      passwd
       
        The passwd element contains the user's password in an
        encrypted format. Often, for example on a system employing
        &quot;shadow&quot; passwords, an asterisk is returned instead.
       
      uid
       
        User ID, should be the same as the
        uid parameter used when calling the
        function, and hence redundant.
       
      gid
       
        The group ID of the user. Use the function
        posix_getgrgid() to resolve the group
        name and a list of its members.
       
      gecos
       
        GECOS is an obsolete term that refers to the finger
        information field on a Honeywell batch processing system.
        The field, however, lives on, and its contents have been
        formalized by POSIX. The field contains a comma separated
        list containing the user's full name, office phone, office
        number, and home phone number. On most systems, only the
        user's full name is available.
       
      dir
       
        This element contains the absolute path to the
        home directory of the user.
       
      shell
       
        The shell element contains the absolute path to the
        executable of the user's default shell.
       
      " 
"posix_getrlimit", "Return info about system resource limits
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
  ) returns an array
   of information about the current resource's soft and hard limits.
  
  

  Each resource has an associated soft and hard limit.  The soft
  limit is the value that the kernel enforces for the corresponding
  resource.  The hard limit acts as a ceiling for the soft limit.
  An unprivileged process may only set its soft limit to a value
  from 0 to the hard limit, and irreversibly lower its hard limit.


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an associative array of elements for each
   limit that is defined. Each limit has a soft and a hard limit.
   List of possible limits returned
    
     Limit name
       Limit description
      core
       
        The maximum size of the core file.  When 0, not core files are
        created.  When core files are larger than this size, they will
        be truncated at this size.
       
      totalmem
       
        The maximum size of the memory of the process, in bytes.
       
      virtualmem
       
        The maximum size of the virtual memory for the process, in bytes.
       
      data
       
        The maximum size of the data segment for the process, in bytes.
       
      stack
       
        The maximum size of the process stack, in bytes.
       
      rss
       
        The maximum number of virtual pages resident in RAM
       
      maxproc
       
        The maximum number of processes that can be created for the
        real user ID of the calling process.
       
      memlock
       
        The maximum number of bytes of memory that may be locked into RAM.
       
      cpu
       
        The amount of time the process is allowed to use the CPU.
       
      filesize
       
        The maximum size of the data segment for the process, in bytes.
       
      openfiles
       
        One more than the maximum number of open file descriptors.
       
      " 
"posix_getsid", "Get the current sid of the process
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( int $pid
   )

  
   Return the session id of the process pid.
   The session id of a process is the process group id of the session leader.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pid

     

      
       The process identifier. If set to 0, the current process is
       assumed.  If an invalid pid is
       specified, then FALSE is returned and an error is set which
       can be checked with posix_get_last_error().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the identifier, as an integer.
  
 " 
"posix_getuid", "Return the real user ID of the current process
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   Return the numeric real user ID of the current process. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the user id, as an integer
  
 " 
"posix_initgroups", "Calculate the group access list
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $name
   , int $base_group_id
   )

  
   Calculates the group access list for the user specified in name.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
name

     

      
       The user to calculate the list for.
      
     

    
    
     
base_group_id

     

      
       Typically the group number from the password file.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"posix_isatty", "Determine if a file descriptor is an interactive terminal
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( mixed $fd
   )

   
    Determines if the file descriptor fd refers to a valid
    terminal type device.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
fd

 

  
   The file descriptor, which is expected to be either a file
   resource or an integer. An integer
   will be assumed to be a file descriptor that can be passed directly to
   the underlying system call.
  
  
   In almost all cases, you will want to provide a file resource.
  
 


   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if fd is an open descriptor connected
   to a terminal and FALSE otherwise.
  
 " 
"posix_kill", "Send a signal to a process
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( int $pid
   , int $sig
   )

  
   Send the signal sig to the process with
   the process identifier pid.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pid

     

      
       The process identifier.
      
     

    
    
     
sig

     

      
       One of the PCNTL signals constants.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"posix_mkfifo", "Create a fifo special file (a named pipe)
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $pathname
   , int $mode
   )

  
  ) creates a special
   FIFO file which exists in the file system and acts as
   a bidirectional communication endpoint for processes.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pathname

     

      
       Path to the FIFO file.
      
     

    
    
     
mode

     

      
       The second parameter mode has to be given in
       octal notation (e.g. 0644). The permission of the newly created
       FIFO also depends on the setting of the current
       umask(). The permissions of the created file are
       (mode &amp; ~umask).
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"posix_mknod", "
   Create a special or ordinary file (POSIX.1)
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $pathname
   , int $mode
   [, int $major = 0
   [, int $minor = 0
  ]] )

  
   Creates a special or ordinary file.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pathname

     

      
       The file to create
      
     

    
    
     
mode

     

      
       This parameter is constructed by a bitwise OR between file type (one of
       the following constants: POSIX_S_IFREG,
       POSIX_S_IFCHR, POSIX_S_IFBLK,
       POSIX_S_IFIFO or
       POSIX_S_IFSOCK) and permissions.
      
     

    
    
     
major

     

      
       The major device kernel identifier (required to pass when using
       S_IFCHR or S_IFBLK).
      
     

    
    
     
minor

     

      
       The minor device kernel identifier.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"posix_setegid", "Set the effective GID of the current process
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( int $gid
   )

  
   Set the effective group ID of the current process. This is a
   privileged function and needs appropriate privileges (usually
   root) on the system to be able to perform this function.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
gid

     

      
       The group id.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"posix_seteuid", "Set the effective UID of the current process
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( int $uid
   )

  
   Set the real user ID of the current process. This is a privileged
   function and needs appropriate privileges (usually root) on
   the system to be able to perform this function.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
uid

     

      
       The user id.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"posix_setgid", "Set the GID of the current process
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( int $gid
   )

  
   Set the real group ID of the current process. This is a
   privileged function and needs appropriate privileges (usually
   root) on the system to be able to perform this function. The
   appropriate order of function calls is
  ) first,
   posix_setuid() last.
  
  Note: 
   
    If the caller is a super user, this will also set the effective
    group id.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
gid

     

      
       The group id.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"posix_setpgid", "Set process group id for job control
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( int $pid
   , int $pgid
   )

  
   Let the process pid join the process group
   pgid. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pid

     

      
       The process id.
      
     

    
    
     
pgid

     

      
       The process group id.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"posix_setrlimit", "Set system resource limits
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( int $resource
   , int $softlimit
   , int $hardlimit
   )

  
  ) sets the soft and hard limits for a
   given system resource.
  
  

  Each resource has an associated soft and hard limit.  The soft
  limit is the value that the kernel enforces for the corresponding
  resource.  The hard limit acts as a ceiling for the soft limit.
  An unprivileged process may only set its soft limit to a value
  from 0 to the hard limit, and irreversibly lower its hard limit.


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
resource

     

      
       The
       resource limit constant
       corresponding to the limit that is being set.
      
     

    
    
     
softlimit

     

      
       The soft limit, in whatever unit the resource limit requires, or
       POSIX_RLIMIT_INFINITY.
      
     

    
    
     
hardlimit

     

      
       The hard limit, in whatever unit the resource limit requires, or
       POSIX_RLIMIT_INFINITY.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"posix_setsid", "Make the current process a session leader
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   Make the current process a session leader. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the session id, or -1 on errors.
  
 " 
"posix_setuid", "Set the UID of the current process
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( int $uid
   )

  
   Set the real user ID of the current process. This is a privileged
   function that needs appropriate privileges (usually root) on
   the system to be able to perform this function.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
uid

     

      
       The user id.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"posix_strerror", "Retrieve the system error message associated with the given errno
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( int $errno
   )

  
   Returns the POSIX system error message associated with the given
   errno.  You may get the
   errno parameter by calling
   posix_get_last_error().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
errno

     

      
       A POSIX error number, returned by 
       posix_get_last_error(). If set to 0, then the
       string &quot;Success&quot; is returned.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the error message, as a string.
  
 " 
"posix_times", "Get process times
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
   Gets information about the current CPU usage.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a hash of strings with information about the current
   process CPU usage. The indices of the hash are:
   
     
      ticks - the number of clock ticks that have elapsed since
      reboot.
     
    
    
     
      utime - user time used by the current process.
     
    
    
     
      stime - system time used by the current process.
     
    
    
     
      cutime - user time used by current process and children.
     
    
    
     
      cstime - system time used by current process and children.
     
    
   " 
"posix_ttyname", "Determine terminal device name
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( mixed $fd
   )

  
   Returns a string for the absolute path to the current
   terminal device that is open on the file descriptor
   fd.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
fd

 

  
   The file descriptor, which is expected to be either a file
   resource or an integer. An integer
   will be assumed to be a file descriptor that can be passed directly to
   the underlying system call.
  
  
   In almost all cases, you will want to provide a file resource.
  
 


   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   On success, returns a string of the absolute path of the
   fd. On failure, returns FALSE
  
 " 
"posix_uname", "Get system name
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
   Gets information about the system.
  
  
   Posix requires that assumptions must not be made about the
   format of the values, e.g. the assumption that a release may contain
   three digits or anything else returned by this function.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a hash of strings with information about the
   system. The indices of the hash are
   
      sysname - operating system name (e.g. Linux)
     
    
      nodename - system name (e.g. valiant)
     
    
      release - operating system release (e.g. 2.2.10)
     
    
      version - operating system version (e.g. #4 Tue Jul 20
      17:01:36 MEST 1999)
     
    
      machine - system architecture (e.g. i586)
     
    
      domainname - DNS domainname (e.g. example.com)
     
   
   domainname is a GNU extension and not part of POSIX.1, so this
   field is only available on GNU systems or when using the GNU
   libc.
  
 " 
"pow", "Exponential expression
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    number     ( number $base
    , number $exp
    )

  
   Returns base raised to the NAMEer of
   exp. 
  
  Note: 
   
    In PHP 5.6 onwards, you may prefer to use the
    ** operator.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
base

     

      
       The base to use
      
     

    
    
     
exp

     

      
       The exponent
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   base raised to the NAMEer of exp.
   If both arguments are non-negative integers and the result can be represented
   as an integer, the result will be returned with integer type,
   otherwise it will be returned as a float.
  
 " 
"preg_filter", "Perform a regular expression search and replace
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( mixed $pattern
   , mixed $replacement
   , mixed $subject
   [, int $limit = -1
   [, int &amp;$count
  ]] )

  
  ) is identical to preg_replace()
   except it only returns the (possibly transformed) subjects where there was
   a match. For details about how this function works, read the
   preg_replace() documentation.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array if the subject
   parameter is an array, or a string otherwise.
  
  
   If no matches are found or an error occurred, an empty array 
   is returned when subject is an array
   or NULL otherwise.
  
 " 
"preg_grep", "Return array entries that match the pattern
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $pattern
   , array $input
   [, int $flags = 0
  ] )

  
   Returns the array consisting of the elements of the 
   input array that match the given
   pattern.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pattern

     

      
       The pattern to search for, as a string.
      
     

    
    
     
input

     

      
       The input array.
      
     

    
    
     
flags

     

      
       If set to PREG_GREP_INVERT, this function returns
       the elements of the input array that do not match
       the given pattern.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array indexed using the keys from the
   input array. 
  
 " 
"preg_last_error", "Returns the error code of the last PCRE regex execution
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   Returns the error code of the last PCRE regex execution.
  
  
   
    Example #1) example
    




    

    The above example will output:
    

Backtrack limit was exhausted!

    
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns one of the following constants (explained on their own page):
   PREG_NO_ERROR
    PREG_INTERNAL_ERROR
    PREG_BACKTRACK_LIMIT_ERROR (see also pcre.backtrack_limit)
    PREG_RECURSION_LIMIT_ERROR (see also pcre.recursion_limit)
    PREG_BAD_UTF8_ERROR
    PREG_BAD_UTF8_OFFSET_ERROR (since PHP 5.3.0)
    PREG_JIT_STACKLIMIT_ERROR (since PHP 7.0.0)
   " 
"preg_match", "Perform a regular expression match
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $pattern
   , string $subject
   [, array &amp;$matches
   [, int $flags = 0
   [, int $offset = 0
  ]]] )

  
   Searches subject for a match to the regular
   expression given in pattern.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pattern

     

      
       The pattern to search for, as a string.
      
     

    
    
     
subject

     

      
       The input string.
      
     

    
    
     
matches

     

      
       If matches is provided, then it is filled with
       the results of search. $matches[0] will contain the
       text that matched the full pattern, $matches[1]
       will have the text that matched the first captured parenthesized
       subpattern, and so on.
      
     

    
    
     
flags

     

      
       flags can be the following flag:
       
PREG_OFFSET_CAPTURE

         

          
           If this flag is passed, for every occurring match the appendant string
           offset will also be returned. Note that this changes the value of
           matches into an array where every element is an
           array consisting of the matched string at offset 0
           and its string offset into subject at offset
           1.
          
         

        
       

    
    
     
offset

     

      
       Normally, the search starts from the beginning of the subject string.
       The optional parameter offset can be used to
       specify the alternate place from which to start the search (in bytes).
      
      Note: 
       
        Using offset is not equivalent to passing
        substr($subject, $offset) to
       ) in place of the subject string,
        because pattern can contain assertions such as
        ^, $ or
        (?


         

         
          will produce
         
         

Array
(
    [0] =&gt; Array
        (
            [0] =&gt; def
            [1] =&gt; 0
        )

)

         
        
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns 1 if the pattern
   matches given subject, 0 if it does not, or FALSE
   if an error occurred.
  
  WarningThis function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function.
 " 
"preg_match_all", "Perform a global regular expression match
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $pattern
   , string $subject
   [, array &amp;$matches
   [, int $flags = PREG_PATTERN_ORDER
   [, int $offset = 0
  ]]] )

  
   Searches subject for all matches to the regular
   expression given in pattern and puts them in
   matches in the order specified by
   flags.
  
  
   After the first match is found, the subsequent searches  are continued
   on from end of the last match.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pattern

     

      
       The pattern to search for, as a string.
      
     

    
    
     
subject

     

      
       The input string.
      
     

    
    
     
matches

     

      
       Array of all matches in multi-dimensional array ordered according to
       flags.
      
     

    
    
     
flags

     

      
       Can be a combination of the following flags (note that it doesn't make
       sense to use PREG_PATTERN_ORDER together with
       PREG_SET_ORDER):
       
PREG_PATTERN_ORDER

         

          
           Orders results so that $matches[0] is an array of full
           pattern matches, $matches[1] is an array of strings matched by
           the first parenthesized subpattern, and so on.
          
          
           
            




            

            The above example will output:
            

example: , this is a test
example: , this is a test

            
            
             So, $out[0] contains array of strings that matched full pattern,
             and $out[1] contains array of strings enclosed by tags.
            
           
          
         

        
        
         
PREG_SET_ORDER

         

          
           Orders results so that $matches[0] is an array of first set
           of matches, $matches[1] is an array of second set of matches,
           and so on.
           
            




            

            The above example will output:
            

example: , example:
this is a test, this is a test

            
           
          
         

        
        
         
PREG_OFFSET_CAPTURE

         

          
           If this flag is passed, for every occurring match the appendant string
           offset will also be returned. Note that this changes the value of
           matches into an array where every element is an
           array consisting of the matched string at offset 0
           and its string offset into subject at offset
           1.
          
         

        
       
       If no order flag is given, PREG_PATTERN_ORDER is
       assumed.
      
     

    
    
     
offset

     

      
       Normally, the search starts from the beginning of the subject string.
       The optional parameter offset can be used to
       specify the alternate place from which to start the search (in bytes).
      
      Note: 
       
        Using offset is not equivalent to passing
        substr($subject, $offset) to
       ) in place of the subject string,
        because pattern can contain assertions such as
        ^, $ or
        (?
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the number of full pattern matches (which might be zero),
   or FALSE if an error occurred.
  
 " 
"preg_quote", "Quote regular expression characters
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
  [, string $delimiter = NULL
  ] )

  
  ) takes str
   and puts a backslash in front of every character that is part of
   the regular expression syntax.  This is useful if you have a
   run-time string that you need to match in some text and the
   string may contain special regex characters.
  
  
   The special regular expression characters are:
   . \ + * ? [ ^ ] $ ( ) { } = ! &lt; &gt; | : -
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The input string.
      
     

    
    
     
delimiter

     

      
       If the optional delimiter is specified, it
       will also be escaped.  This is useful for escaping the delimiter
       that is required by the PCRE functions. The / is the most commonly
       used delimiter.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the quoted (escaped) string.
  
 " 
"preg_replace", "Perform a regular expression search and replace
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( mixed $pattern
   , mixed $replacement
   , mixed $subject
   [, int $limit = -1
   [, int &amp;$count
  ]] )

  
   Searches subject for matches to
   pattern and replaces them with
   replacement.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pattern

     

      
       The pattern to search for. It can be either a string or an array with
       strings.
      
      
       Several PCRE modifiers
       are also available.
      
     

    
    
     
replacement

     

      
       The string or an array with strings to replace. If this parameter is a
       string and the pattern parameter is an array,
       all patterns will be replaced by that string. If both
       pattern and replacement
       parameters are arrays, each pattern will be
       replaced by the replacement counterpart. If
       there are fewer elements in the replacement
       array than in the pattern array, any extra
       patterns will be replaced by an empty string.
      
      
       replacement may contain references of the form
       \\n or (since PHP 4.0.4)
       $n, with the latter form
       being the preferred one. Every such reference will be replaced by the text
       captured by the n'th parenthesized pattern.
       n can be from 0 to 99, and
       \\0 or $0 refers to the text matched
       by the whole pattern. Opening parentheses are counted from left to right
       (starting from 1) to obtain the number of the capturing subpattern.
       To use backslash in replacement, it must be doubled
       (&quot;\\\\&quot; PHP string).
      
      
       When working with a replacement pattern where a backreference is 
       immediately followed by another number (i.e.: placing a literal number
       immediately after a matched pattern), you cannot use the familiar 
       \\1 notation for your backreference.  
       \\11, for example, would confuse
      ) since it does not know whether you
       want the \\1 backreference followed by a literal 
       1, or the \\11 backreference
       followed by nothing.  In this case the solution is to use 
       \${1}1.  This creates an isolated 
       $1 backreference, leaving the 1
       as a literal.
      
      
       When using the deprecated e modifier, this function escapes
       some characters (namely ', &quot;,
       \ and NULL) in the strings that replace the
       backreferences. This is done to ensure that no syntax errors arise
       from backreference usage with either single or double quotes (e.g.
       'strlen(\'$1\')+strlen(&quot;$2&quot;)'). Make sure you are
       aware of PHP's string
       syntax to know exactly how the interpreted string will look.
      
     

    
    
     
subject

     

      
       The string or an array with strings to search and replace.
      
      
       If subject is an array, then the search and
       replace is performed on every entry of subject,
       and the return value is an array as well.
      
     

    
    
     
limit

     

      
       The maximum possible replacements for each pattern in each
       subject string. Defaults to
       -1 (no limit).
      
     

    
    
     
count

     

      
       If specified, this variable will be filled with the number of
       replacements done.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns an array if the
   subject parameter is an array, or a string
   otherwise.
  
  
   If matches are found, the new subject will
   be returned, otherwise subject will be
   returned unchanged or NULL if an error occurred.
  
 " 
"preg_replace_callback", "Perform a regular expression search and replace using a callback
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( mixed $pattern
   , callable $callback
   , mixed $subject
   [, int $limit = -1
   [, int &amp;$count
  ]] )

  
   The behavior of this function is almost identical to
   preg_replace(), except for the fact that instead of
   replacement parameter, one should specify a
   callback.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pattern

     

      
       The pattern to search for. It can be either a string or an array with
       strings.
      
     

    
    
     
callback

     

      
       A callback that will be called and passed an array of matched elements
       in the subject string. The callback should
       return the replacement string. This is the callback signature:
      
      
       
        string handler
         ( array $matches
        )

      
      
       You'll often need the callback function
       for a) in just one place.
       In this case you can use an
       anonymous function to
       declare the callback within the call to
      ). By doing it this way
       you have all information for the call in one place and do not
       clutter the function namespace with a callback function's name
       not used anywhere else.
      
      
       
        Example #1) and 
        anonymous function
        




        

       
      
     

    
    
     
subject

     

      
       The string or an array with strings to search and replace.
      
     

    
    
     
limit

     

      
       The maximum possible replacements for each pattern in each
       subject string. Defaults to
       -1 (no limit).
      
     

    
    
     
count

     

      
       If specified, this variable will be filled with the number of
       replacements done.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns an array if the
   subject parameter is an array, or a string
   otherwise. On errors the return value is NULL
  
  
   If matches are found, the new subject will be returned, otherwise
   subject will be returned unchanged. 
  
 " 
"preg_replace_callback_array", "Perform a regular expression search and replace using callbacks
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( array $patterns_and_callbacks
   , mixed $subject
   [, int $limit = -1
   [, int &amp;$count
  ]] )

  
   The behavior of this function is similar to
   preg_replace_callback(), except that callbacks are
   executed on a per-pattern basis.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
patterns_and_callbacks

     

      
       An associative array mapping patterns (keys) to callbacks (values).
      
     

    
    
     
subject

     

      
       The string or an array with strings to search and replace.
      
     

    
    
     
limit

     

      
       The maximum possible replacements for each pattern in each
       subject string. Defaults to
       -1 (no limit).
      
     

    
    
     
count

     

      
       If specified, this variable will be filled with the number of
       replacements done.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns an array if the
   subject parameter is an array, or a string
   otherwise. On errors the return value is NULL
  
  
   If matches are found, the new subject will be returned, otherwise
   subject will be returned unchanged. 
  
 " 
"preg_split", "Split string by a regular expression
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $pattern
   , string $subject
   [, int $limit = -1
   [, int $flags = 0
  ]] )

  
   Split the given string by a regular expression.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
pattern

     

      
       The pattern to search for, as a string.
      
     

    
    
     
subject

     

      
       The input string.
      
     

    
    
     
limit

     

      
       If specified, then only substrings up to limit
       are returned with the rest of the string being placed in the last
       substring.  A limit of -1, 0 or NULL means &quot;no limit&quot;
       and, as is standard across PHP, you can use NULL to skip to the 
       flags parameter.
      
     

    
    
     
flags

     

      
       flags can be any combination of the following
       flags (combined with the | bitwise operator):
       
PREG_SPLIT_NO_EMPTY

         

          
          If this flag is set, only non-empty pieces will be returned by
         ).
          
         

        
        
         
PREG_SPLIT_DELIM_CAPTURE

         

          
          If this flag is set, parenthesized expression in the delimiter pattern
          will be captured and returned as well.
          
         

        
        
         
PREG_SPLIT_OFFSET_CAPTURE

         

          
           If this flag is set, for every occurring match the appendant string
           offset will also be returned. Note that this changes the return
           value in an array where every element is an array consisting of the
           matched string at offset 0 and its string offset
           into subject at offset 1.
          
         

        
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array containing substrings of subject
   split along boundaries matched by pattern.
  
 " 
"prev", "Rewind the internal array pointer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( array &amp;$array
   )

  
   Rewind the internal array pointer.
  
  
  ) behaves just like next(),
   except it rewinds the internal array pointer one place instead of advancing it.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The input array.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the array value in the NAMEious place that's pointed to by
   the internal array pointer, or FALSE if there are no more
   elements.
  
 " 
"print_r", "
   Prints human-readable information about a variable
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( mixed $expression
   [, bool $return = false
  ] )

  
  ) displays information about a variable
   in a way that's readable by humans.  
  
  
  ), var_dump() and
   var_export() will
   also show protected and private properties of objects with PHP 5.
   Static class members will not be shown.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
expression

     

      
       The expression to be printed.
      
     

    
    
     
return

     

      
       If you would like to capture the output of), 
       use the return parameter.  When this parameter is set
       to TRUE,) will return the information rather than print it.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   If given a string, integer or float,
   the value itself will be printed.  If given an array, values
   will be presented in a format that shows keys and elements.  Similar
   notation is used for objects.
  
  
   When the return parameter is TRUE, this function
   will return a string. Otherwise, the return value is TRUE.
  
 " 
"printf", "Output a formatted string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $format
   [, mixed $args
   [, mixed $...
  ]] )

  
   Produces output according to format.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
format

     

      
       See sNAME() for a description of
       format.
      
     

    
    
     
args

     

      
      
     

    
    
     
...

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the length of the outputted string.
  
 " 
"proc_close", "Close a process opened by proc_open() and return the exit code of that process
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $process
   )

  
  ) is similar to pclose()
   except that it only works on processes opened by
   proc_open().
  ) waits for the process to terminate, and
   returns its exit code.  If you have open pipes to that process, you
   should fclose() them prior to calling this function in
   order to avoid a deadlock - the child process may not be able to exit
   while the pipes are open.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
process

     

      
       The proc_open() resource that will
       be closed.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the termination status of the process that was run. In case of 
   an error then -1 is returned.
  
 " 
"proc_get_status", "Get information about a process opened by proc_open()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $process
   )

  
  ) fetches data about a
   process opened using proc_open().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
process

     

      
       The proc_open() resource that will
       be evaluated.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   An array of collected information on success, and FALSE
   on failure. The returned array contains the following elements:
  
  
  elementtypedescriptioncommand
      string
      
       The command string that was passed to proc_open().
      
     pid
      int
      process id
     running
      bool
      
       TRUE if the process is still running, FALSE if it has
       terminated.
      
     signaled
      bool
      
       TRUE if the child process has been terminated by
       an uncaught signal. Always set to FALSE on Windows.
      
     stopped
      bool
      
       TRUE if the child process has been stopped by a
       signal. Always set to FALSE on Windows.
      
     exitcode
      int
      
       The exit code returned by the process (which is only
       meaningful if running is FALSE).
       Only first call of this function return real value, next calls return
       -1.
      
     termsig
      int
      
       The number of the signal that caused the child process to terminate
       its execution (only meaningful if signaled is TRUE).
      
     stopsig
      int
      
       The number of the signal that caused the child process to stop its
       execution (only meaningful if stopped is TRUE).
      
     " 
"proc_nice", "Change the priority of the current process
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( int $increment
   )

  
  ) changes the priority of the current
   process by the amount specified in increment. A
   positive increment will lower the priority of the
   current process, whereas a negative increment
   will raise the priority.
  
  
  ) is not related to
   proc_open() and its associated functions in any way.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
increment

     

      
       The increment value of the priority change.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
   If an error occurs, like the user lacks permission to change the priority, 
   an error of level E_WARNING is also generated.
  
 " 
"proc_open", "
     Execute a command and open file pointers for input/output
    
    </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
     
      resource       ( string $cmd
      , array $descriptorspec
      , array &amp;$pipes
      [, string $cwd
      [, array $env
      [, array $other_options
     ]]] )

    
    ) is similar to popen()
     but provides a much greater degree of control over the program execution.
    



   
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
cmd

     

      
       The command to execute
      
     

    
    
     
descriptorspec

     

      
       An indexed array where the key represents the descriptor number and the
       value represents how PHP will pass that descriptor to the child
       process. 0 is stdin, 1 is stdout, while 2 is stderr.
      
      
       Each element can be:
       An array describing the pipe to pass to the process. The first
         element is the descriptor type and the second element is an option for
         the given type. Valid types are pipe (the second
         element is either r to pass the read end of the pipe
         to the process, or w to pass the write end) and
         file (the second element is a filename).
        
        
         A stream resource representing a real file descriptor (e.g. opened file,
         a socket, STDIN).
        
       
       The file descriptor numbers are not limited to 0, 1 and 2 - you may
       specify any valid file descriptor number and it will be passed to the
       child process. This allows your script to interoperate with other
       scripts that run as &quot;co-processes&quot;. In particular, this is useful for
       passing passphrases to programs like PGP, GPG and openssl in a more
       secure manner. It is also useful for reading status information
       provided by those programs on auxiliary file descriptors.
      
     

    
    
     
pipes

     

      
       Will be set to an indexed array of file pointers that correspond to
       PHP's end of any pipes that are created.
      
     

    
    
     
cwd

     

      
       The initial working dir for the command. This must be an
       absolute directory path, or NULL
       if you want to use the default value (the working dir of the current
       PHP process)
      
     

    
    
     
env

     

      
       An array with the environment variables for the command that will be
       run, or NULL to use the same environment as the current PHP process
      
     

    
    
     
other_options

     

      
       Allows you to specify additional options. Currently supported options
       include:
       
         suppress_errors (windows only): suppresses errors
         generated by this function when it's set to TRUE
        
        
         bypass_shell (windows only): bypass
         cmd.exe shell when set to TRUE
        
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a resource representing the process, which should be freed using
   proc_close() when you are finished with it. On failure
   returns FALSE.
  
 " 
"proc_terminate", "Kills a process opened by proc_open
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $process
   [, int $signal = 15
  ] )

  
   Signals a process (created using
   proc_open()) that it should terminate.
  ) returns immediately and does not wait
   for the process to terminate.
  
  
  ) allows you terminate the process and
   continue with other tasks.  You may poll the process (to see if it has
   stopped yet) by using the proc_get_status() function.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
process

     

      
       The proc_open() resource that will
       be closed.
      
     

    
    
     
signal

     

      
       This optional parameter is only useful on POSIX
       operating systems; you may specify a signal to send to the process
       using the kill(2) system call.  The default is
       SIGTERM.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the termination status of the process that was run.
  
 " 
"property_exists", "
   Checks if the object or class has a property
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( mixed $class
   , string $property
   )

  
   This function checks if the given property exists in
   the specified class.
  
  Note: 
   
    As opposed with isset(),
   ) returns TRUE even if the property
    has the value NULL.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
class

      

       
        The class name or an object of the class to test for
       
      

     
    
     
property

      

       
        The name of the property
       
      

     
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the property exists, FALSE if it doesn't exist or
   NULL in case of an error.
  
 " 
"putenv", "Sets the value of an environment variable
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $setting
   )

  
   Adds setting to the server environment.  The
   environment variable will only exist for the duration of the current
   request. At the end of the request the environment is restored to its
   original state.
  
  
   Setting certain environment variables may be a potential security breach.
   The safe_mode_allowed_env_vars directive contains a
   comma-delimited list of prefixes. In Safe Mode, the user may only alter
   environment variables whose names begin with the prefixes supplied by
   this directive. By default, users will only be able to set environment
   variables that begin with PHP_ (e.g.
   PHP_FOO=BAR). Note: if this directive is empty, PHP
   will let the user modify ANY environment variable!
  
  
   The safe_mode_protected_env_vars directive contains a
   comma-delimited list of environment variables, that the end user won't be
   able to change using).  These variables will
   be protected even if safe_mode_allowed_env_vars is set
   to allow to change them.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
setting

     

      
       The setting, like &quot;FOO=BAR&quot;
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"quoted_printable_decode", "Convert a quoted-printable string to an 8 bit string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   )

  
   This function returns an 8-bit binary string corresponding to the decoded
   quoted printable string (according to » RFC2045, section 6.7, not » RFC2821, section 4.5.2, so additional periods
   are not stripped from the beginning of line).
  
  
   This function is similar to imap_qprint(), except this
   one does not require the IMAP module to work.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The input string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the 8-bit binary string.
  
 " 
"quoted_printable_encode", "Convert a 8 bit string to a quoted-printable string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   )

  
   Returns a quoted printable string created according to » RFC2045, section 6.7.
  
  
   This function is similar to imap_8bit(), except this
   one does not require the IMAP module to work.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The input string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the encoded string.
  
 " 
"quotemeta", "Quote meta characters
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   )

  
   Returns a version of str with a backslash character (\)
   before every character that is among these: 
   . \ + * ? [ ^ ] ( $ )
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The input string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the string with meta characters quoted, or FALSE if an empty
   string is given as str.
  
 " 
"rad2deg", "
   Converts the radian number to the equivalent number in degrees
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    float     ( float $number
    )

  
   This function converts number from radian
   to degrees.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
number

     

      
       A radian value
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The equivalent of number in degrees
  
 " 
"rand", "Generate a NAMEom integer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   int    ( int $min
   , int $max
   )

  
   If called without the optional min,
   max arguments)
   returns a pseudo-NAMEom integer between 0 and
   getNAMEmax().  If you want a NAMEom number
   between 5 and 15 (inclusive), for example, use5,
   15).
  
  CautionThis function does not
generate cryptographically secure values, and should not be used for cryptographic purposes. If you need a
cryptographically secure value, consider using NAMEom_int(), NAMEom_bytes(), or
openssl_NAMEom_pseudo_bytes() instead.
  Note: 
   
    On some platforms (such as Windows), getNAMEmax()
    is only 32767.  If you require a range larger than 32767, specifying
    min and max will allow
    you to create a range larger than this, or consider using
    mt_NAME() instead.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
min

     

      
       The lowest value to return (default: 0)
      
     

    
    
     
max

     

      
       The highest value to return (default: getNAMEmax())
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   A pseudo NAMEom value between min
   (or 0) and max (or getNAMEmax(), inclusive).
  
 " 
"random_bytes", "Generates cryptographically secure pseudo-random bytes
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( int $length
   )

  
   Generates an arbitrary length string of cryptographic random bytes that are
   suitable for cryptographic use, such as when generating salts, keys or
   initialization vectors.
  
  

 The sources of randomness used for this function are as follows:


  
   On Windows,
   » CryptGenRandom()
   will always be used.
  
 
 
  
   On Linux, the
   » getrandom(2)
   syscall will be used if available.
  
 
 
  
   On other platforms, /dev/urandom will be used.
  
 
 
  
   If none of the aforementioned sources are available, then an
   Exception will be thrown.
  
 

  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
length

    

     
      The length of the random string that should be returned in bytes.
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string containing the requested number of cryptographically
   secure random bytes.
  
 " 
"random_int", "Generates cryptographically secure pseudo-random integers
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( int $min
   , int $max
   )

  
   Generates cryptographic random integers that are suitable for use where
   unbiased results are critical, such as when shuffling a deck of cards for a
   poker game.
  
  

 The sources of randomness used for this function are as follows:


  
   On Windows,
   » CryptGenRandom()
   will always be used.
  
 
 
  
   On Linux, the
   » getrandom(2)
   syscall will be used if available.
  
 
 
  
   On other platforms, /dev/urandom will be used.
  
 
 
  
   If none of the aforementioned sources are available, then an
   Exception will be thrown.
  
 

  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
min

    

     
      The lowest value to be returned, which must be
      PHP_INT_MIN or higher.
     
    

   
   
    
max

    

     
      The highest value to be returned, which must be less than or equal to
      PHP_INT_MAX.
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a cryptographically secure random integer in the range
   min to max, inclusive.
  
 " 
"range", "Create an array containing aof elements
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( mixed $start
   , mixed $end
   [, number $step = 1
  ] )

  
   Create an array containing aof elements.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
start

     

      
       First value of the sequence.
      
     

    
    
     
end

     

      
       The sequence is ended upon reaching the
       end value.
      
     

    
    
     
step

     

      
       If a step value is given, it will be used as the
       increment between elements in the sequence.  step
       should be given as a positive number.  If not specified,
       step will default to 1.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of elements from start to
   end, inclusive.
  
 " 
"rawurldecode", "Decode URL-encoded strings
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   )

  
   Returns a string in which the sequences with percent
   (%) signs followed by two hex digits have been replaced
   with literal characters.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The URL to be decoded.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the decoded URL, as a string.
  
 " 
"rawurlencode", "URL-encode according to RFC 3986
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   )

  
   Encodes the given string according to » RFC 3986.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The URL to be encoded.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string in which all non-alphanumeric characters except
   -_.~ have been replaced with a percent
   (%) sign followed by two hex digits.  This is the
   encoding described in » RFC 3986 for
   protecting literal characters from being interpreted as special URL
   delimiters, and for protecting URLs from being mangled by transmission
   media with character conversions (like some email systems).
   Note: 
    
     Prior to PHP 5.3.0,encoded tildes (~) as per
     » RFC 1738.
    
   
  
 " 
"read_exif_data", "Alias of exif_read_data()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   exif_read_data().
  
 " 
"readdir", "Read entry from directory handle
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ([ resource $dir_handle
  ] )

  
   Returns the name of the next entry in the directory. The
   entries are returned in the order in which they are stored by
   the filesystem.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
dir_handle

     

      
       The directory handle resource previously opened
       with opendir(). If the directory handle is 
       not specified, the last link opened by opendir() 
       is assumed.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the entry name on success or FALSE on failure.
   
  WarningThis function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function.
 " 
"readfile", "Outputs a file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $filename
   [, bool $use_include_path = false
   [, resource $context
  ]] )

  
   Reads a file and writes it to the output buffer.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       The filename being read.
      
     

    
    
     
use_include_path

     

      
       You can use the optional second parameter and set it to TRUE, if
       you want to search for the file in the include_path, too.
      
     

    
    
     
context

     

      
       A context stream resource.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the number of bytes read from the file. If an error
   occurs, FALSE is returned and unless the function was called as
   ), an error message is printed.
  
 " 
"readgzfile", "Output a gz-file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $filename
   [, int $use_include_path = 0
  ] )

   
   Reads a file, decompresses it and writes it to standard output.
  
  
  ) can be used to read a file which is not in
   gzip format; in this case) will directly 
   read from the file without decompression.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       The file name. This file will be opened from the filesystem and its
       contents written to standard output.
      
     

    
    
     
use_include_path

     

      
       You can set this optional parameter to 1, if you
       want to search for the file in the include_path too.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
   
   Returns the number of (uncompressed) bytes read from the file. If
   an error occurs, FALSE is returned and unless the function was
   called as  an error message is
   printed.
  
 " 
"readlink", "Returns the target of a symbolic link
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $path
   )

  
  ) does the same as theC function.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
path

     

      
       The symbolic link path.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the contents of the symbolic link path or FALSE on error.
  
 " 
"realpath", "Returns canonicalized absolute pathname
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $path
   )

  
  ) expands all symbolic links and
   resolves references to '/./', '/../' and extra '/' characters in
   the input path and returns the canonicalized
   absolute pathname.  
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
path

     

      
       The path being checked.
       Note: 
        
         Whilst a path must be supplied, the value can be blank or NULL
         In these cases, the value is interpreted as the current directory.
        
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the canonicalized absolute pathname on success. The resulting path 
   will have no symbolic link, '/./' or '/../' components. Trailing delimiters,
   such as \ and /, are also removed.
  
  
  ) returns FALSE on failure, e.g. if
   the file does not exist.
  
  Note: 
   
    The running script must have executable permissions on all directories in
    the hierarchy, otherwise) will return
    FALSE.
   
  
  Note: 
   
    For case-insensitive filesystems) may or may
    not normalize the character case.
   
  
  Note: 
    Because PHP's integer type is signed and many platforms use 32bit integers,
    some filesystem functions may return unexpected results for files which
    are larger than 2GB.
   
 " 
"realpath_cache_get", "Get realpath cache entries
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
   Get the contents of the realpath cache.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array of realpath cache entries. The keys are original path
   entries, and the values are arrays of data items, containing the resolved
   path, expiration date, and other options kept in the cache.
   
 " 
"realpath_cache_size", "Get realpath cache size
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   Get the amount of memory used by the realpath cache.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns how much memory realpath cache is using.
  
 " 
"register_shutdown_function", "Register a function for execution on shutdown
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( callable $callback
   [, mixed $parameter
   [, mixed $...
  ]] )

  
   Registers a callback to be executed after script
   execution finishes or exit() is called.
  
  
   Multiple calls to) can be
   made, and each will be called in the same order as they were registered.
   If you call exit() within one registered shutdown
   function, processing will stop completely and no other registered
   shutdown functions will be called.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
callback

     

      
       The shutdown callback to register.
      
      
       The shutdown callbacks are executed as the part of the request, so
       it's possible to send output from them and access output buffers.
      
     

    
    
     
parameter

     

      
       It is possible to pass parameters to the shutdown function by passing
       additional parameters.
      
     

    
    
     
...

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"register_tick_function", "Register a function for execution on each tick
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( callable $function
   [, mixed $arg
   [, mixed $...
  ]] )

  
   Registers the given function to be executed when a
   tick is called.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
function

     

      
       The function name as a string, or an array consisting of an object and
       a method.
      
     

    
    
     
arg

     

      
      
     

    
    
     
...

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"rename", "Renames a file or directory
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $oldname
   , string $newname
   [, resource $context
  ] )

  
   Attempts tooldname to
   newname, moving it between directories if necessary.
   If newname exists, it will be overwritten.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
oldname

     

      
      
      Note: 
       
        The old name. The wrapper used in oldname
        must match the wrapper used in
        newname.
       
      
     

    
    
     
newname

     

      
       The new name.
      
     

    
    
     
context

     

      Note: Context support was added
with PHP 5.0.0. For a description of contexts, refer to
Streams.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"reset", "Set the internal pointer of an array to its first element
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( array &amp;$array
   )

  
  ) rewinds array's internal
   pointer to the first element and returns the value of the first array
   element.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The input array.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the value of the first array element, or FALSE if the array is
   empty.
  
 " 
"resourcebundle_count", "Get number of elements in the bundle
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   Object oriented style
  
  
   public
   int 
   ResourceBundle::count
    ( void
   )

  
   Procedural style
  
  
   int 
      ( ResourceBundle $r
   )

  
   Get the number of elements in the bundle.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
r

     

      
       ResourceBundle object.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns number of elements in the bundle.
  
 " 
"resourcebundle_create", "Create a resource bundle
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   Object oriented style (method)
  
  
   public
   static
   ResourceBundle 
   ResourceBundle::create
    ( string $locale
   , string $bundlename
   [, bool $fallback
  ] )

  
   Procedural style
  
  
   ResourceBundle 
      ( string $locale
   , string $bundlename
   [, bool $fallback
  ] )

  
   Object oriented style (constructor):
  
   
    public
    ResourceBundle::__construct
     ( string $locale
    , string $bundlename
    [, bool $fallback
   ] )

  
   Creates a resource bundle.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
locale

     

      
       Locale for which the resources should be loaded (locale name, e.g. en_CA).
      
     

    
    
     
bundlename

     

      
       The directory where the data is stored or the name of the .dat file.
      
     

    
    
     
fallback

     

      
       Whether locale should match exactly or fallback to parent locale is allowed.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns ResourceBundle object or NULL on error.
  
 " 
"resourcebundle_get", "Get data from the bundle
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   Object oriented style
  
  
   public
   mixed 
   ResourceBundle::get
    ( string|int $index
   )

  
   Procedural style
  
  
   mixed 
      ( ResourceBundle $r
   , string|int $index
   )

  
   Get the data from the bundle by index or string key.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
r

     

      
       ResourceBundle object.
      
     

    
    
     
index

     

      
       Data index, must be string or integer.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the data located at the index or NULL on error. Strings, integers and binary data strings
   are returned as corresponding PHP types, integer array is returned as PHP array. Complex types are
   returned as ResourceBundle object.
  
 " 
"resourcebundle_locales", "Get supported locales
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   Object oriented style
  
  
   public
   array 
   ResourceBundle::getLocales
    ( string $bundlename
   )

  
   Procedural style
  
  
   array 
      ( string $bundlename
   )

  
   Get available locales from ResourceBundle name.
   
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
bundlename

     

      
       Path of ResourceBundle for which to get available locales, or
       empty string for default locales list.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the list of locales supported by the bundle.
  
 " 
"restore_error_handler", "Restores the previous error handler function
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( void
   )

  
   Used after changing the error handler function using
   set_error_handler(), to revert to the previous error
   handler (which could be the built-in or a user defined function). 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function always returns TRUE.
  
 " 
"restore_exception_handler", "
   Restores the previously defined exception handler function
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( void
   )

  
   Used after changing the exception handler function using
   set_exception_handler(), to revert to the previous
   exception handler (which could be the built-in or a user defined
   function).
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function always returns TRUE.
  
 " 
"restore_include_path", "Restores the value of the include_path configuration option
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( void
   )

  
   Restores the include_path
   configuration option back to its original master value as set in
   php.ini
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"rewind", "Rewind the position of a file pointer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $handle
   )

  
   Sets the file position indicator for handle
   to the beginning of the file stream.
  
  Note: 
   
    If you have opened the file in append (&quot;a&quot; or &quot;a+&quot;) mode, any data you
    write to the file will always be appended, regardless of the file
    position.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handle

     

      
       The file pointer must be valid, and must point to a file
       successfully opened by fopen().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"rewinddir", "Rewind directory handle
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ([ resource $dir_handle
  ] )

  
   Resets the directory stream indicated by
   dir_handle to the beginning of the
   directory.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
dir_handle

     

      
       The directory handle resource previously opened
       with opendir(). If the directory handle is 
       not specified, the last link opened by opendir() 
       is assumed.
      
     

    
   " 
"rmdir", "" 
"round", "" 
"rsort", "" 
"rtrim", "" 
"scandir", "" 
"sem_acquire", "" 
"sem_get", "" 
"sem_release", "" 
"sem_remove", "" 
"serialize", "" 
"session_abort", "" 
"session_cache_expire", "" 
"session_cache_limiter", "" 
"session_commit", "Alias of session_write_close()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   session_write_close().
  
 " 
"session_decode", "Decodes session data from a session encoded string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $data
   )

  
  ) decodes the serialized session data provided in
   $data, and populates the $_SESSION superglobal
   with the result.
  
  
   Please note the unserialization method is not the same as unserialize().
   The serialization method is internal to PHP and can be set using 
   session.serialize_handler.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
data

     

      
       The encoded data to be stored.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"session_destroy", "Destroys all data registered to a session
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( void
   )

  
  ) destroys all of the data associated
   with the current session. It does not unset any of the global variables
   associated with the session, or unset the session cookie.
   To use the session variables again, session_start() has
   to be called.
  
  
   In order to kill the session altogether, like to log the user out, the
   session id must also be unset. If a cookie is used to propagate the
   session id (default behavior), then the session cookie must be deleted.
   setcookie() may be used for that.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"session_encode", "Encodes the current session data as a session encoded string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( void
   )

  
  ) returns a serialized string of the
   contents of the current session data stored in the $_SESSION superglobal.
  
  
   Please note, the serialization method is not the same as serialize().
   The serialization method is internal to PHP and can be set using session.serialize_handler.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the contents of the current session encoded.
  
 " 
"session_get_cookie_params", "Get the session cookie parameters
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
   Gets the session cookie parameters.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array with the current session cookie information, the array
   contains the following items:
   
     
      &quot;lifetime&quot; -  The
      lifetime of the cookie in seconds.
     
    
    
     
      &quot;path&quot; -  The path where
      information is stored.
     
    
    
     
      &quot;domain&quot; -  The domain
      of the cookie.
     
    
    
     
      &quot;secure&quot; -  The cookie
      should only be sent over secure connections.
     
    
    
     
      &quot;httponly&quot; - The
      cookie can only be accessed through the HTTP protocol.
     
    
   " 
"session_id", "Get and/or set the current session id
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ([ string $id
  ] )

  
  ) is used to get or set the session id for
   the current session.
  
  
   The constant SID can also be used to
   retrieve the current name and session id as a string suitable for
   adding to URLs. See also Session
   handling.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
id

      

       
        If id is specified, it will replace the current
        session id.) needs to be called before
        session_start() for that purpose. Depending on the
        session handler, not all characters are allowed within the session id.
        For example, the file session handler only allows characters in the
        range a-z A-Z 0-9 , (comma) and - (minus)!
       
       Note: 
        
         When using session cookies, specifying an id
         for) will always send a new cookie
         when session_start() is called, regardless if the
         current session id is identical to the one being set.
        
       
      

     
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns the session id for the current
   session or the empty string (&quot;&quot;) if there is no current
   session (no current session id exists).
  
 " 
"session_module_name", "Get and/or set the current session module
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ([ string $module
  ] )

  
  ) gets the name of the current
   session module. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
module

     

      
       If module is specified, that module will be
       used instead.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the name of the current session module.
  
 " 
"session_name", "Get and/or set the current session name
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ([ string $name
  ] )

  
  ) returns the name of the current
   session. If name is given,
  ) will update the session name and return
   the old session name.
  
  
   The session name is reset to the default value stored in
   session.name at request startup time. Thus, you need to
   call) for every request (and before
   session_start() or session_register()
   are called).
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
name

     

      
       The session name references the name of the session, which is 
       used in cookies and URLs (e.g. PHPSESSID). It
       should contain only alphanumeric characters; it should be short and
       descriptive (i.e. for users with enabled cookie warnings).
       If name is specified, the name of the current
       session is changed to its value.
      
      
       Warning
        
         The session name can't consist of digits only, at least one letter
         must be present. Otherwise a new session id is generated every time.
        
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the name of the current session. If name is given
   and function updates the session name, name of the old session
   is returned.
  
 " 
"session_regenerate_id", "
   Update the current session id with a newly generated one
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ([ bool $delete_old_session = false
  ] )

  
  ) will replace the current
   session id with a new one, and keep the current session information.
  
  
   When session.use_trans_sid
   is enabled, output must be started after)
   call. Otherwise, old session ID is used.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
delete_old_session

      

       
        Whether to delete the old associated session file or not.
       
      

     
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"session_register_shutdown", "Session shutdown function
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( void
   )

  
   Registers session_write_close() as a shutdown function.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  This function has no parameters.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"session_reset", "Re-initialize session array with original values
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( void
   )

  
  ) reinitializes a session with
   original values stored in session storage. This function requires an active session and
   discards changes in $_SESSION.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"session_save_path", "Get and/or set the current session save path
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ([ string $path
  ] )

  
  ) returns the path of the current
   directory used to save session data. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
path

     

      
       Session data path. If specified, the path to which data is saved will
       be changed.) needs to be called
       before session_start() for that purpose.
      
      
       Note: 
        
         On some operating systems, you may want to specify a path on a
         filesystem that handles lots of small files efficiently. For example,
         on Linux, reiserfs may provide better performance than ext2fs.
        
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the path of the current directory used for data storage.
  
 " 
"session_set_cookie_params", "Set the session cookie parameters
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( int $lifetime
   [, string $path
   [, string $domain
   [, bool $secure = false
   [, bool $httponly = false
  ]]]] )

  
   Set cookie parameters defined in the php.ini file. The effect of this
   function only lasts for the duration of the script. Thus, you need to
   call) for every request and
   before session_start() is called.
  
  
   This function updates the runtime ini values of the corresponding PHP ini configuration
   keys which can be retrieved with the ini_get().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
lifetime

     

      
       Lifetime of the
       session cookie, defined in seconds.
      
     

    
    
     
path

     

      
       Path on the domain where
       the cookie will work. Use a single slash ('/') for all paths on the
       domain.
      
     

    
    
     
domain

     

      
       Cookie domain, for
       example 'www.php.net'. To make cookies visible on all subdomains then
       the domain must be prefixed with a dot like '.php.net'.
      
     

    
    
     
secure

     

      
       If TRUE cookie will only be sent over
       secure connections.
      
     

    
    
     
httponly

     

      
       If set to TRUE then PHP will attempt to send the
       httponly
       flag when setting the session cookie.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"session_set_save_handler", "Sets user-level session storage functions
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( callable $open
   , callable $close
   , callable $read
   , callable $write
   , callable $destroy
   , callable $gc
   [, callable $create_sid
  ] )

  
   Since PHP 5.4 it is possible to register the following prototype:
  
  
   bool    ( SessionHandlerInterface $sessionhandler
   [, bool $register_shutdown = true
  ] )

  
  ) sets the user-level
   session storage functions which are used for storing and
   retrieving data associated with a session.  This is most useful
   when a storage method other than those supplied by PHP sessions
   is preferred.  i.e. Storing the session data in a local database.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   This function has two prototypes.
   
sessionhandler

     

      
       An instance of a class implementing
       SessionHandlerInterface, such as
       SessionHandler, to register as the session
       handler. Since PHP 5.4 only.
      
     

    
    
     
register_shutdown

     

      
       Register session_write_close() as a
       register_shutdown_function() function.
      
     

    
   


   or

   
open(string $savePath, string $sessionName)

     

      
       The open callback works like a constructor in classes and is
       executed when the session is being opened.  It is the first callback
       function executed when the session is started automatically or
       manually with session_start().
       Return value is TRUE for success, FALSE for failure.
      
     

    
    
     
close()

     

      
       The close callback works like a destructor in classes and is
       executed after the session write callback has been called. It is also invoked when
       session_write_close() is called.
       Return value should be TRUE for success, FALSE for failure.
      
     

    
    
     
read(string $sessionId)

     

      
       The read callback must always return a session encoded (serialized)
       string, or an empty string if there is no data to read.
      
      
       This callback is called internally by PHP when the session starts or
       when session_start() is called.  Before this callback is invoked
       PHP will invoke the open callback.
      
      
       The value this callback returns must be in exactly the same serialized format that was originally
       passed for storage to the write callback.  The value returned will be
       unserialized automatically by PHP and used to populate the $_SESSION superglobal.
       While the data looks similar to serialize() please note it is a different format
       which is speficied in the session.serialize_handler ini setting.
      
     

    
    
     
write(string $sessionId, string $data)

     

      
       The write callback is called when the session needs to be saved and closed. This
       callback receives the current session ID a serialized version the $_SESSION superglobal.  The serialization
       method used internally by PHP is specified in the session.serialize_handler ini setting.
      
      
       The serialized session data passed to this callback should be stored against the passed session ID. When retrieving
       this data, the read callback must return the exact value that was originally passed to
       the write callback.
      
      
       This callback is invoked when PHP shuts down or explicitly when session_write_close()
       is called.  Note that after executing this function PHP will internally execute the close callback.
       Note: 
        
         The &quot;write&quot; handler is not executed until after the output stream is
         closed.  Thus, output from debugging statements in the &quot;write&quot;
         handler will never be seen in the browser.  If debugging output is
         necessary, it is suggested that the debug output be written to a
         file instead.
        
       
      
     

    
    
     
destroy($sessionId)

     

      
       This callback is executed when a session is destroyed with session_destroy() or with
       session_regenerate_id() with the destroy parameter set to TRUE.
       Return value should be TRUE for success, FALSE for failure.
      
     

    
    
     
gc($lifetime)

     

      
       The garbage collector callback is invoked internally by PHP periodically in order to
       purge old session data.  The frequency is controlled by
       session.gc_probability and session.gc_divisor.
       The value of lifetime which is passed to this callback can be set in session.gc_maxlifetime.
       Return value should be TRUE for success, FALSE for failure.
      
     

    
    
     
create_sid()

     

      
       This callback is executed when a new session ID is required. No
       parameters are provided, and the return value should be a string that
       is a valid session ID for your handler.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"session_start", "Start new or resume existing session
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ([ array $options = []
  ] )

  
  ) creates a session or resumes the
   current one based on a session identifier passed via a GET or POST
   request, or passed via a cookie.
  
  
   When) is called or when a session auto starts,
   PHP will call the open and read session save handlers.  These will either be a built-in
   save handler provided by default or by PHP extensions (such as SQLite or Memcached); or can be
   custom handler as defined by session_set_save_handler().
   The read callback will retrieve any existing session data (stored in a special serialized format)
   and will be unserialized and used to automatically populate the $_SESSION superglobal when the
   read callback returns the saved session data back to PHP session handling.
  
  
   To use a named session, call
   session_name() before calling
  ).
  
  
   When session.use_trans_sid
   is enabled, the) function will
   register an internal output handler for URL rewriting.
  
  
   If a user uses ob_gzhandler or similar with
   ob_start(), the function order is important for
   proper output.  For example,
   ob_gzhandler must be registered before starting the session.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
options

    

     
      If provided, this is an associative array of options that will override
      the currently set
      session configuration directives.
      The keys should not include the session. prefix.
     
     
      In addition to the normal set of configuration directives, a
      read_and_close option may also be provided. If set to
      TRUE, this will result in the session being closed immediately after
      being read, thereby avoiding unnecessary locking if the session data
      won't be changed.
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function returns TRUE if a session was successfully started,
   otherwise FALSE.
  
 " 
"session_status", "Returns the current session status
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
  ) is used to return the current session status.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   
     PHP_SESSION_DISABLED if sessions are disabled.
    
    
     PHP_SESSION_NONE if sessions are enabled, but none exists.
    
    
     PHP_SESSION_ACTIVE if sessions are enabled, and one exists.
    
   " 
"session_unset", "Free all session variables
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( void
   )

  
   The) function frees all session variables
   currently registered.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"session_write_close", "Write session data and end session
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( void
   )

  
   End the current session and store session data.
  
  
   Session data is usually stored after your script terminated without the
   need to call), but as session data
   is locked to prevent concurrent writes only one script may operate on a
   session at any time. When using framesets together with sessions you will
   experience the frames loading one by one due to this locking. You can
   reduce the time needed to load all the frames by ending the session as
   soon as all changes to session variables are done.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"set_error_handler", "Sets a user-defined error handler function
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( callable $error_handler
   [, int $error_types = E_ALL | E_STRICT
  ] )

  
   Sets a user function (error_handler) to handle
   errors in a script.
  
  
   This function can be used for defining your own way of handling errors
   during runtime, for example in applications in which you need to do
   cleanup of data/files when a critical error happens, or when you need
   to trigger an error under certain conditions (using
   trigger_error()).
  
  
   It is important to remember that the standard PHP error handler is completely
   bypassed for the error types specified by error_types 
   unless the callback function returns FALSE.
   error_reporting() settings will have no effect and your
   error handler will be called regardless - however you are still able to read 
   the current value of 
   error_reporting and act
   appropriately. Of particular note is that this value will be 0 if the
   statement that caused the error was prepended by the
   @ error-control
   operator.
  
  
   Also note that it is your responsibility to die() if
   necessary. If the error-handler function returns, script execution
   will continue with the next statement after the one that caused an error.
  
  
   The following error types cannot be handled with a user defined
   function: E_ERROR, E_PARSE,
   E_CORE_ERROR, E_CORE_WARNING,
   E_COMPILE_ERROR,
   E_COMPILE_WARNING, and
   most of E_STRICT raised in the file where
  ) is called.
  
  
   If errors occur before the script is executed (e.g. on file uploads) the 
   custom error handler cannot be called since it is not registered at that 
   time.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
error_handler

     

      
       A callback with the following signature.
       NULL may be passed instead, to reset this handler to its default state.
       Instead of a function name, an array containing an object reference 
       and a method name can also be supplied.
      
      
       
        bool handler
         ( int $errno
        , string $errstr
        [, string $errfile
        [, int $errline
        [, array $errcontext
       ]]] )

       
errno

         

          
           The first parameter, errno, contains the
           level of the error raised, as an integer.
          
         

        
        
         
errstr

         

          
           The second parameter, errstr, contains the
           error message, as a string.
          
         

        
        
         
errfile

         

          
           The third parameter is optional, errfile,
           which contains the filename that the error was raised in, as a string.
          
         

        
        
         
errline

         

          
           The fourth parameter is optional, errline,
           which contains the line number the error was raised at, as an integer.
          
         

        
        
         
errcontext

         

          
           The fifth parameter is optional, errcontext,
           which is an array that points to the active symbol table at the point
           the error occurred.  In other words, errcontext
           will contain an array of every variable that existed in the scope the
           error was triggered in.
           User error handler must not modify error context.
          
         

        
       
       If the function returns FALSE then the normal error handler continues.
      
     

    
    
     
error_types

     

      
       Can be used to mask the triggering of the
       error_handler function just like the error_reporting ini setting 
       controls which errors are shown. Without this mask set the
       error_handler will be called for every error
       regardless to the setting of the error_reporting setting.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string containing the previously defined error handler (if any). If
   the built-in error handler is used NULL is returned. NULL is also returned
   in case of an error such as an invalid callback. If the previous error handler
   was a class method, this function will return an indexed array with the class
   and the method name.
  
 " 
"set_exception_handler", "
   Sets a user-defined exception handler function 
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   callable    ( callable $exception_handler
   )

  
   Sets the default exception handler if an exception is not caught within a
   try/catch block. Execution will stop after the
   exception_handler is called.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
exception_handler

     

      
       Name of the function to be called when an uncaught exception occurs.
       This handler function
       needs to accept one parameter, which will be the exception object that
       was thrown. This is the handler signature before PHP 7:
      
      
       
        void handler
         ( Exception $ex
        )

      
      
       Since PHP 7, most errors are reported by throwing Error
       exceptions, which will be caught by the handler as well. Both Error
       and Exception implements the Throwable interface.
       This is the handler signature since PHP 7:
      
      
       
        void handler
         ( Throwable $ex
        )

      
      
       NULL may be passed instead, to reset this handler to its default state.
      
      Caution
       
        Note that providing an explicit Exception type
        hint for the ex parameter in your callback will
        cause issues with the changed exception hierarchy in PHP 7.
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the name of the previously defined exception handler, or NULL on error. If
   no previous handler was defined, NULL is also returned.
  
 " 
"set_file_buffer", "Alias of stream_set_write_buffer()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   stream_set_write_buffer().
  
 " 
"set_include_path", "Sets the include_path configuration option
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $new_include_path
   )

  
   Sets the include_path
   configuration option for the duration of the script.  
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
new_include_path

     

      
       The new value for the include_path
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the old include_path on
   success or FALSE on failure.
  
 " 
"set_time_limit", "Limits the maximum execution time
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( int $seconds
   )

  
   Set the number of seconds a script is allowed to run. If this is reached,
   the script returns a fatal error. The default limit is 30 seconds or, if
   it exists, the max_execution_time value defined in the
   php.ini.
  
  
   When called,) restarts the timeout
   counter from zero. In other words, if the timeout is the default 30
   seconds, and 25 seconds into script execution a call such as
  20) is made, the script will run for a
   total of 45 seconds before timing out.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
seconds

     

      
       The maximum execution time, in seconds. If set to zero, no time limit
       is imposed.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success, or FALSE on failure.
  
 " 
"setcookie", "Send a cookie
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $name
   [, string $value = &quot;&quot;
   [, int $expire = 0
   [, string $path = &quot;&quot;
   [, string $domain = &quot;&quot;
   [, bool $secure = false
   [, bool $httponly = false
  ]]]]]] )

  
  ) defines a cookie to be sent along with the
   rest of the HTTP headers. Like other headers, cookies must be sent
   before any output from your script (this is a
   protocol restriction). This requires that you place calls to this function
   prior to any output, including  and
    tags as well as any whitespace.
  
  
   Once the cookies have been set, they can be accessed on the next page load
   with the $_COOKIE array.
   Cookie
   values may also exist in $_REQUEST.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   » RFC 6265 provides the normative
   reference on how each) parameter is
   interpreted.
   
name

     

      
       The name of the cookie.
      
     

    
    
     
value

     

      
       The value of the cookie.  This value is stored on the clients computer;
       do not store sensitive information.  Assuming the
       name is 'cookiename', this
       value is retrieved through $_COOKIE['cookiename']
      
     

    
    
     
expire

     

      
       The time the cookie expires.  This is a Unix timestamp so is
       in number of seconds since the epoch.  In other words, you'll
       most likely set this with the time() function
       plus the number of seconds before you want it to expire.  Or
       you might use mktime().
       time()+60*60*24*30 will set the cookie to
       expire in 30 days. If set to 0, or omitted, the cookie will expire at
       the end of the session (when the browser closes).
      
      
       Note: 
        
         You may notice the expire parameter takes on a
         Unix timestamp, as opposed to the date format Wdy, DD-Mon-YYYY
         HH:MM:SS GMT, this is because PHP does this conversion
         internally.
        
       
      
     

    
    
     
path

     

      
       The path on the server in which the cookie will be available on.
       If set to '/', the cookie will be available
       within the entire domain.  If set to
       '/foo/', the cookie will only be available
       within the /foo/ directory and all
       sub-directories such as /foo/bar/ of
       domain.  The default value is the
       current directory that the cookie is being set in.
      
     

    
    
     
domain

     

      
       The (sub)domain that the cookie is available to. Setting this to a
       subdomain (such as 'www.example.com') will make the
       cookie available to that subdomain and all other sub-domains of it (i.e.
       w2.www.example.com). To make the cookie available to the whole domain
       (including all subdomains of it), simply set the value to the domain
       name ('example.com', in this case).
      
      
       Older browsers still implementing the deprecated
       » RFC 2109 may require a leading
       . to match all subdomains.
      
     

    
    
     
secure

     

      
       Indicates that the cookie should only be transmitted over a
       secure HTTPS connection from the client. When set to TRUE, the
       cookie will only be set if a secure connection exists.
       On the server-side, it's on the programmer to send this
       kind of cookie only on secure connection (e.g. with respect to
       $_SERVER[&quot;HTTPS&quot;]).
      
     

    
    
     
httponly

     

      
       When TRUE the cookie will be made accessible only through the HTTP
       protocol. This means that the cookie won't be accessible by
       scripting languages, such as JavaScript. It has been suggested that
       this setting can effectively help to reduce identity theft through
       XSS attacks (although it is not supported by all browsers), but that
       claim is often disputed. Added in PHP 5.2.0.
       TRUE or FALSE
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   If output exists prior to calling this function,
  ) will fail and return FALSE. If
  ) successfully runs, it will return TRUE.
   This does not indicate whether the user accepted the cookie.
  
 " 
"setlocale", "Set locale information
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( int $category
   , string $locale
   [, string $...
  ] )

  
   string    ( int $category
   , array $locale
   )

  
   Sets locale information.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
category

     

      
       category is a named constant specifying the
       category of the functions affected by the locale setting:
       
         
          LC_ALL for all of the below
         
        
        
         
          LC_COLLATE for string comparison, see
          strcoll()
         
        
        
         
          LC_CTYPE for character classification and conversion, for
          example strtoupper()
         
        
        
         
          LC_MONETARY for localeconv()
         
        
        
         
          LC_NUMERIC for decimal separator (See also
          localeconv())
         
        
        
         
          LC_TIME for date and time formatting with
          strftime()
         
        
        
         
          LC_MESSAGES for system responses (available if PHP was compiled with
          libintl)
         
        
       

    
    
     
locale

     

      
       If locale is NULL or the empty string
       &quot;&quot;, the locale names will be set from the
       values of environment variables with the same names as the above
       categories, or from &quot;LANG&quot;.
      
      
       If locale is &quot;0&quot;,
       the locale setting is not affected, only the current setting is returned.
      
      
       If locale is an array or followed by additional
       parameters then each array element or parameter is tried to be set as
       new locale until success. This is useful if a locale is known under
       different names on different systems or for providing a fallback
       for a possibly not available locale.
      
     

    
    
     
...

     

      
       (Optional string or array parameters to try as locale settings until
       success.)
      
     

    
   Note: 
    
     On Windows,LC_ALL, '') sets the locale names from the
     system's regional/language settings (accessible via Control Panel).
    
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the new current locale, or FALSE if the locale functionality is
   not implemented on your platform, the specified locale does not exist or
   the category name is invalid.
  
  
   An invalid category name also causes a warning message. Category/locale
   names can be found in » RFC 1766
   and » ISO 639.
   Different systems have different naming schemes for locales.
  
  Note: 
   
    The return value of) depends
    on the system that PHP is running.  It returns exactly
    what the systemfunction returns.
   
  
 " 
"setrawcookie", "Send a cookie without urlencoding the cookie value
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $name
   [, string $value
   [, int $expire = 0
   [, string $path
   [, string $domain
   [, bool $secure = false
   [, bool $httponly = false
  ]]]]]] )

  
  ) is exactly the same as
   setcookie() except that the cookie value will not be
   automatically urlencoded when sent to the browser.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   For parameter information, see the setcookie()
   documentation.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"settype", "Set the type of a variable
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( mixed &amp;$var
   , string $type
   )

  
   Set the type of variable var to
   type.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
var

     

      
       The variable being converted.
      
     

    
    
     
type

     

      
       Possibles values of type are:
       
         
          &quot;boolean&quot; (or, since PHP 4.2.0, &quot;bool&quot;)
         
        
        
         
          &quot;integer&quot; (or, since PHP 4.2.0, &quot;int&quot;)
         
        
        
         
          &quot;float&quot; (only possible since PHP 4.2.0, for older versions use the
          deprecated variant &quot;double&quot;)
         
        
        
         
          &quot;string&quot;
         
        
        
         
          &quot;array&quot;
         
        
        
         
          &quot;object&quot;
         
        
        
         
          &quot;null&quot; (since PHP 4.2.0)
         
        
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"sha1", "Calculate thehash of a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   [, bool $raw_output = false
  ] )

  
   Calculates thehash of str using the
   » US Secure Hash Algorithm 1.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The input string.
      
     

    
    
     
raw_output

     

      
       If the optional raw_output is set to TRUE,
       then thedigest is instead returned in raw binary format with a
       length of 20, otherwise the returned value is a 40-character
       hexadecimal number.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns thehash as a string.
  
 " 
"sha1_file", "Calculate the sha1 hash of a file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $filename
   [, bool $raw_output = false
  ] )

  
   Calculates the sha1 hash of the file specified by
   filename using the
   » US Secure Hash Algorithm 1,
   and returns that hash. The hash is a 40-character hexadecimal number.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       The filename of the file to hash.
      
     

    
    
     
raw_output

     

      
       When TRUE, returns the digest in raw binary format with a length of
       20.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string on success, FALSE otherwise.
  
 " 
"shell_exec", "Execute command via shell and return the complete output as a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $cmd
   )

  
   This function is identical to the backtick operator.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
cmd

     

      
       The command that will be executed.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The output from the executed command or NULL if an error occurred or the
   command produces no output.
  
  Note: 
   
    This function can return NULL both when an error occurs or the program
    produces no output. It is not possible to detect execution failures using
    this function. exec() should be used when access to the
    program exit code is required.
   
  
 " 
"shm_attach", "Creates or open a shared memory segment
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( int $key
   [, int $memsize
   [, int $perm = 0666
  ]] )

  
  ) returns an id that can be used to access
   the System V shared memory with the given key, the
   first call creates the shared memory segment with 
   memsize and the optional perm-bits 
   perm.
  
  
   A second call to) for the same
   key will return a different shared memory
   identifier, but both identifiers access the same underlying
   shared memory. memsize and
   perm will be ignored.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
key

     

      
       A numeric shared memory segment ID
      
     

    
    
     
memsize

     

      
       The memory size. If not provided, default to the
       sysvshm.init_mem in the php.ini, otherwise 10000
       bytes.
      
     

    
    
     
perm

     

      
       The optional permission bits. Default to 0666.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a shared memory segment identifier.
  
 " 
"shm_detach", "Disconnects from shared memory segment
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $shm_identifier
   )

  
  ) disconnects from the shared memory given
   by the shm_identifier created by
   shm_attach(). Remember, that shared memory still exist
   in the Unix system and the data is still present.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
shm_identifier

     

      
       A shared memory resource handle as returned by
       shm_attach()
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) always returns TRUE.
  
 " 
"shm_get_var", "Returns a variable from shared memory
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( resource $shm_identifier
   , int $variable_key
   )

  
  ) returns the variable with a given
   variable_key, in the given shared memory segment.
   The variable is still present in the shared memory.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
shm_identifier

     

      
       Shared memory segment, obtained from shm_attach().
      
     

    
    
     
variable_key

     

      
       The variable key.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the variable with the given key.
  
 " 
"shm_has_var", "Check whether a specific entry exists
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $shm_identifier
   , int $variable_key
   )

  
   Checks whether a specific key exists inside a shared memory segment.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
shm_identifier

     

      
       Shared memory segment, obtained from shm_attach().
      
     

    
    
     
variable_key

     

      
       The variable key.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the entry exists, otherwise FALSE
  
 " 
"shm_put_var", "Inserts or updates a variable in shared memory
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $shm_identifier
   , int $variable_key
   , mixed $variable
   )

  
  ) inserts or updates the
   variable with the given
   variable_key.
  
  
   Warnings (E_WARNING level) will be issued if
   shm_identifier is not a valid SysV shared memory
   index or if there was not enough shared memory remaining to complete your
   request.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
shm_identifier

     

      
       A shared memory resource handle as returned by
       shm_attach()
      
     

    
    
     
variable_key

     

      
       The variable key.
      
     

    
    
     
variable

     

      
       The variable. All variable types
       that serialize() supports may be used: generally
       this means all types except for resources and some internal objects
       that cannot be serialized.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"shm_remove", "Removes shared memory from Unix systems
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $shm_identifier
   )

  
  ) removes the shared memory
   shm_identifier. All data will be destroyed.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
shm_identifier

     

      
       The shared memory identifier as returned by
       shm_attach()
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"shm_remove_var", "Removes a variable from shared memory
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $shm_identifier
   , int $variable_key
   )

  
   Removes a variable with a given variable_key
   and frees the occupied memory.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
shm_identifier

     

      
       The shared memory identifier as returned by
       shm_attach()
      
     

    
    
     
variable_key

     

      
       The variable key.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"shmop_close", "Close shared memory block
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( int $shmid
   )

  
  ) is used to close a shared memory block.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
shmid

     

      
       The shared memory block identifier created by 
       shmop_open()
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"shmop_delete", "Delete shared memory block
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( int $shmid
   )

  
  ) is used to delete a shared memory block.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
shmid

     

      
       The shared memory block identifier created by 
       shmop_open()
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"shmop_open", "Create or open shared memory block
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( int $key
   , string $flags
   , int $mode
   , int $size
   )

  
  ) can create or open a shared memory block.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
key

     

      
       System's id for the shared memory block.
       Can be passed as a decimal or hex.
      
     

    
    
     
flags

     

      
       The flags that you can use:
       
         
          &quot;a&quot; for access (sets SHM_RDONLY for shmat)
          use this flag when you need to open an existing shared memory
          segment for read only
         
        
        
         
          &quot;c&quot; for create (sets IPC_CREATE)
          use this flag when you need to create a new shared memory segment
          or if a segment with the same key exists, try to open it for read
          and write
         
        
        
         
          &quot;w&quot; for read &amp; write access
          use this flag when you need to read and write to a shared memory
          segment, use this flag in most cases.
         
        
        
         
          &quot;n&quot; create a new memory segment (sets IPC_CREATE|IPC_EXCL)
          use this flag when you want to create a new shared memory segment
          but if one already exists with the same flag, fail. This is useful
          for security purposes, using this you can prevent race condition
          exploits.
         
        
       

    
    
     
mode

     

      
       The permissions that you wish to assign to your memory segment, those
       are the same as permission for a file. Permissions need to be passed
       in octal form, like for example 0644
      
     

    
    
     
size

     

      
       The size of the shared memory block you wish to create in bytes
      
     

    
   Note: 
    
     Note: the 3rd and 4th should be entered as 0 if you are opening an
     existing memory segment.
    
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   On success) will return an id that you can
   use to access the shared memory segment you've created. FALSE is 
   returned on failure.
  
 " 
"shmop_read", "Read data from shared memory block
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( int $shmid
   , int $start
   , int $count
   )

  
  ) will read a string from shared memory block.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
shmid

     

      
       The shared memory block identifier created by 
       shmop_open()
      
     

    
    
     
start

     

      
       Offset from which to start reading
      
     

    
    
     
count

     

      
       The number of bytes to read
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the data or FALSE on failure.
  
 " 
"shmop_size", "Get size of shared memory block
 </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
 
  int   ( int $shmid
  )

  
  ) is used to get the size, in bytes of the
   shared memory block.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
shmid

     

      
       The shared memory block identifier created by 
       shmop_open()
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an int, which represents the number of bytes the shared memory
   block occupies.
  
 " 
"shmop_write", "Write data into shared memory block
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( int $shmid
   , string $data
   , int $offset
   )

  
  ) will write a string into shared memory block.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
shmid

     

      
       The shared memory block identifier created by 
       shmop_open()
      
     

    
    
     
data

     

      
       A string to write into shared memory block 
      
     

    
    
     
offset

     

      
       Specifies where to start writing data inside the shared memory
       segment.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The size of the written data, or FALSE on 
   failure.
  
 " 
"show_source", "Alias of highlight_file()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   highlight_file().
  
 " 
"shuffle", "Shuffle an array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( array &amp;$array
   )

  
   This function NAMEs (randomizes the order of the elements in) an array.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The array.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"similar_text", "Calculate the similarity between two strings
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $first
   , string $second
   [, float &amp;$percent
  ] )

  
   This calculates the similarity between two strings as described in
   Programming Classics: Implementing the World's Best Algorithms by Oliver (ISBN 0-131-00413-1). Note that this implementation does not use a
   stack as in Oliver's pseudo code, but recursive calls which may or may not
   speed up the whole process. Note also that the complexity of this algorithm
   is O(N**3) where N is the length of the longest string.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
first

     

      
       The first string.
      
     

    
    
     
second

     

      
       The second string.
      
     

    
    
     
percent

     

      
       By passing a reference as third argument,
      ) will calculate the similarity in
       percent for you. 
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the number of matching chars in both strings.
  
 " 
"simplexml_import_dom", "Get a SimpleXMLElement object from a DOM node.
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   SimpleXMLElement    ( DOMNode $node
   [, string $class_name = &quot;SimpleXMLElement&quot;
  ] )

  
   This function takes a node of a DOM
   document and makes it into a SimpleXML node. This new object can
   then be used as a native SimpleXML element. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
node

     

      
       A DOM Element node
      
     

    
    
     
class_name

     

      
       You may use this optional parameter so that
      ) will return an object of 
       the specified class. That class should extend the 
       SimpleXMLElement class.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a SimpleXMLElement or FALSE on failure.
  
  WarningThis function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function.
 " 
"simplexml_load_file", "
   Interprets an XML file into an object
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   SimpleXMLElement    ( string $filename
   [, string $class_name = &quot;SimpleXMLElement&quot;
   [, int $options = 0
   [, string $ns = &quot;&quot;
   [, bool $is_prefix = false
  ]]]] )

  
   Convert the well-formed XML document in the given file to an object.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the XML file
      
      Note: 
       
        Libxml 2 unescapes the URI, so if you want to pass e.g.
        b&amp;c as the URI parameter a,
        you have to call
       rawurlencode('http://example.com/?a=' .
        urlencode('b&amp;c'))). Since PHP 5.1.0 you don't need to do
        this because PHP will do it for you.
       
      
     

    
    
     
class_name

     

      
       You may use this optional parameter so that
      ) will return an object of 
       the specified class. That class should extend the 
       SimpleXMLElement class.
      
     

    
    
     
options

     

      
       Since PHP 5.1.0 and Libxml 2.6.0, you may also use the
       options parameter to specify additional Libxml parameters.
      
     

    
    
     
ns

     

      
       Namespace prefix or URI.
      
     

    
    
     
is_prefix

     

      
       TRUE if ns is a prefix, FALSE if it's a URI;
       defaults to FALSE.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an object of class SimpleXMLElement with
   properties containing the data held within the XML document, or FALSE on failure.
  
  WarningThis function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function.
 " 
"simplexml_load_string", "
   Interprets a string of XML into an object
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   SimpleXMLElement    ( string $data
   [, string $class_name = &quot;SimpleXMLElement&quot;
   [, int $options = 0
   [, string $ns = &quot;&quot;
   [, bool $is_prefix = false
  ]]]] )

  
   Takes a well-formed XML string and returns it as an object.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
data

     

      
       A well-formed XML string
      
     

    
    
     
class_name

     

      
       You may use this optional parameter so that
      ) will return an object of 
       the specified class. That class should extend the 
       SimpleXMLElement class.
      
     

    
    
     
options

     

      
       Since PHP 5.1.0 and Libxml 2.6.0, you may also use the
       options parameter to specify additional Libxml parameters.
      
     

    
    
     
ns

     

      
       Namespace prefix or URI.
      
     

    
    
     
is_prefix

     

      
       TRUE if ns is a prefix, FALSE if it's a URI;
       defaults to FALSE.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an object of class SimpleXMLElement with
   properties containing the data held within the xml document, or FALSE on failure.
  
  WarningThis function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function.
 " 
"sin", "Sine
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    float     ( float $arg
    )

  
  ) returns the NAMEe of the arg
   parameter.  The arg parameter is in radians.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
arg

     

      
       A value in radians
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The NAMEe of arg
  
 " 
"sinh", "Hyperbolic sine
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    float     ( float $arg
    )

  
   Returns the hyperbolic sine of arg,
   defined as (exp(arg) - exp(-arg))/2.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
arg

     

      
       The argument to process
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The hyperbolic sine of arg
  
 " 
"sizeof", "Alias of count()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   count().
  
 " 
"sleep", "Delay execution
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( int $seconds
   )

  
   Delays the program execution for the given number of
   seconds.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
seconds

     

      
       Halt time in seconds.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns zero on success, or FALSE on error.
  
  
   If the call was interrupted by a signal,) returns
   a non-zero value. On Windows, this value will always be
   192 (the value of the
   WAIT_IO_COMPLETION constant within the Windows API).
   On other platforms, the return value will be the number of seconds left to
  
  
 " 
"socket_accept", "Accepts a connection on a socket
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( resource $socket
   )

  
   After the socket socket has been created
   using socket_create(), bound to a name with
   socket_bind(), and told to listen for connections
   with socket_listen(), this function will accept
   incoming connections on that socket. Once a successful connection
   is made, a new socket resource is returned, which may be used
   for communication. If there are multiple connections queued on
   the socket, the first will be used. If there are no pending
   connections,) will block until
   a connection becomes present. If socket
   has been made non-blocking using
   socket_set_blocking() or
   socket_set_nonblock(), FALSE will be returned.
  
  
   The socket resource returned by
  ) may not be used to accept new
   connections. The original listening socket
   socket, however, remains open and may be
   reused.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
socket

     

      
       A valid socket resource created with socket_create().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a new socket resource on success, or FALSE on error. The actual
   error code can be retrieved by calling
   socket_last_error(). This error code may be passed to
   socket_strerror() to get a textual explanation of the
   error.
  
 " 
"socket_bind", "Binds a name to a socket
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $socket
   , string $address
   [, int $port = 0
  ] )

  
   Binds the name given in address to the socket
   described by socket. This has to be done before
   a connection is be established using socket_connect()
   or socket_listen().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
socket

     

      
       A valid socket resource created with socket_create().
      
     

    
    
     
address

     

      
       If the socket is of the AF_INET family, the
       address is an IP in dotted-quad notation
       (e.g. 127.0.0.1).
      
      
       If the socket is of the AF_UNIX family, the
       address is the path of a
       Unix-domain socket (e.g. /tmp/my.sock).
      
     

    
    
     
port (Optional)

     

      
       The port parameter is only used when
       binding an AF_INET socket, and designates
       the port on which to listen for connections.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
  
   The error code can be retrieved with socket_last_error().
   This code may be passed to socket_strerror() to get a
   textual explanation of the error.
  
 " 
"socket_clear_error", "Clears the error on the socket or the last error code
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ([ resource $socket
  ] )

  
   This function clears the error code on the given socket or the global
   last socket error if no socket is specified.
  
  
   This function allows explicitly resetting the error code value either of
   a socket or of the extension global last error code. This may be useful
   to detect within a part of the application if an error occurred or not.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
socket

     

      
       A valid socket resource created with socket_create().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"socket_close", "Closes a socket resource
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( resource $socket
   )

  
  ) closes the socket resource
   given by socket. This function is specific to sockets
   and cannot be used on any other type of resources.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
socket

     

       
        A valid socket resource created with socket_create()
        or socket_accept().
       
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"socket_cmsg_space", "Calculate message buffer size
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( int $level
   , int $type
   )

  
   Calculates the size of the buffer that should be allocated for
   receiving the ancillary data.
  
  WarningThis function is
currently not documented; only its argument list is available.

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
level

     

      
      
     

    
    
     
type

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  
 " 
"socket_connect", "Initiates a connection on a socket
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $socket
   , string $address
   [, int $port = 0
  ] )

  
   Initiate a connection to address using the socket resource
   socket, which must be a valid socket
   resource created with socket_create().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
socket

     

      
      
     

    
    
     
address

     

      
       The address parameter is either an IPv4 address
       in dotted-quad notation (e.g. 127.0.0.1) if 
       socket is AF_INET, a valid 
       IPv6 address (e.g. ::1) if IPv6 support is enabled and 
       socket is AF_INET6
       or the pathname of a Unix domain socket, if the socket family is
       AF_UNIX.
      
     

    
    
     
port

     

      
       The port parameter is only used and is mandatory
       when connecting to an AF_INET or an 
       AF_INET6 socket, and designates
       the port on the remote host to which a connection should be made.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure. The error code can be retrieved with
   socket_last_error(). This code may be passed to
   socket_strerror() to get a textual explanation of the
   error.
  
  Note: 
   
    If the socket is non-blocking then this function returns FALSE with an
    error Operation now in progress.
   
  
 " 
"socket_create", "Create a socket (endpoint for communication)
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( int $domain
   , int $type
   , int $protocol
   )

  
   Creates and returns a socket resource, also referred to as an endpoint
   of communication. A typical network connection is made up of 2 sockets, one
   performing the role of the client, and another performing the role of the server.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
domain

     

      
       The domain parameter specifies the protocol
       family to be used by the socket.
      
      Available address<BR>rotocol families
       
        Domain
          </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
         AF_INET
          
           IPv4 Internet based protocols. TCP and UDP are common protocols of
           this protocol family.
          
         AF_INET6
          
           IPv6 Internet based protocols. TCP and UDP are common protocols of
           this protocol family.
          
         AF_UNIX
          
           Local communication protocol family. High efficiency and low
           overhead make it a great form of IPC (Interprocess Communication).
          
         

    
    
     
type

     

      
       The type parameter selects the type of communication
       to be used by the socket.
      
      Available socket types
       
        Type
          </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
         SOCK_STREAM
          
           Provides sequenced, reliable, full-duplex, connection-based byte streams.
           An out-of-band data transmission mechanism may be supported.
           The TCP protocol is based on this socket type.
          
         SOCK_DGRAM
          
           Supports datagrams (connectionless, unreliable messages of a fixed maximum length).
           The UDP protocol is based on this socket type.
          
         SOCK_SEQPACKET
          
           Provides a sequenced, reliable, two-way connection-based data transmission path for
           datagrams of fixed maximum length;  a consumer is required to read an
           entire packet with each read call.
          
         SOCK_RAW
          
           Provides raw network protocol access. This special type of socket
           can be used to manually construct any type of protocol. A common use
           for this socket type is to perform ICMP requests (like ping).
          
         SOCK_RDM
          
           Provides a reliable datagram layer that does not guarantee ordering.
           This is most likely not implemented on your operating system.
          
         

    
    
     
protocol

     

      
       The protocol parameter sets the specific
       protocol within the specified domain to be used
       when communicating on the returned socket. The proper value can be
       retrieved by name by using getprotobyname(). If
       the desired protocol is TCP, or UDP the corresponding constants
       SOL_TCP, and SOL_UDP
       can also be used.
      
      Common protocols
       
        Name
          </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
         icmp
          
           The Internet Control Message Protocol is used primarily by gateways
           and hosts to report errors in datagram communication. The &quot;ping&quot;
           command (present in most modern operating systems) is an example
           application of ICMP.
          
         udp
          
           The User Datagram Protocol is a connectionless, unreliable,
           protocol with fixed record lengths. Due to these aspects, UDP
           requires a minimum amount of protocol overhead.
          
         tcp
          
           The Transmission Control Protocol is a reliable, connection based,
           stream oriented, full duplex protocol. TCP guarantees that all data packets
           will be received in the order in which they were sent. If any packet is somehow
           lost during communication, TCP will automatically retransmit the packet until
           the destination host acknowledges that packet. For reliability and performance
           reasons, the TCP implementation itself decides the appropriate octet boundaries
           of the underlying datagram communication layer. Therefore, TCP applications must
           allow for the possibility of partial record transmission.
          
         

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns a socket resource on success,
   or FALSE on error. The actual error code can be retrieved by calling
   socket_last_error(). This error code may be passed to
   socket_strerror() to get a textual explanation of the
   error.
  
 " 
"socket_create_listen", "Opens a socket on port to accept connections 
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( int $port
   [, int $backlog = 128
  ] )

  
  ) creates a new socket resource of
   type AF_INET listening on all
   local interfaces on the given port waiting for new connections.
  
  
   This function is meant to ease the task of creating a new socket which
   only listens to accept new connections.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
port

     

      
       The port on which to listen on all interfaces.
      
     

    
    
     
backlog

     

      
       The backlog parameter defines the maximum length
       the queue of pending connections may grow to.
       SOMAXCONN may be passed as
       backlog parameter, see
       socket_listen() for more information.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns a new socket resource
   on success or FALSE on error. The error code can be retrieved with
   socket_last_error(). This code may be passed to
   socket_strerror() to get a textual explanation of the
   error.
  
 " 
"socket_create_pair", "Creates a pair of indistinguishable sockets and stores them in an array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( int $domain
   , int $type
   , int $protocol
   , array &amp;$fd
   )

  
  ) creates two connected and
   indistinguishable sockets, and stores them in fd.
   This function is commonly used in IPC (InterProcess Communication).
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
domain

     

      
       The domain parameter specifies the protocol
       family to be used by the socket. See socket_create()
       for the full list.
      
     

    
    
     
type

     

      
       The type parameter selects the type of communication
       to be used by the socket. See socket_create() for the 
       full list.
      
     

    
    
     
protocol

     

      
       The protocol parameter sets the specific
       protocol within the specified domain to be used
       when communicating on the returned socket. The proper value can be retrieved by
       name by using getprotobyname(). If
       the desired protocol is TCP, or UDP the corresponding constants
       SOL_TCP, and SOL_UDP
       can also be used.
      
      
       See socket_create() for the full list of supported 
       protocols.
      
     

    
    
     
fd

     

      
       Reference to an array in which the two socket resources will be inserted.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"socket_get_option", "Gets socket options for the socket 
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( resource $socket
   , int $level
   , int $optname
   )

  
   The) function retrieves the value for
   the option specified by the optname parameter for the
   specified socket.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
socket

     

      
       A valid socket resource created with socket_create()
       or socket_accept().
      
     

    
    
     
level

     

      
       The level parameter specifies the protocol
       level at which the option resides. For example, to retrieve options at
       the socket level, a level parameter of
       SOL_SOCKET would be used. Other levels, such as
       TCP, can be used by
       specifying the protocol number of that level. Protocol numbers can be
       found by using the getprotobyname() function.
      
     

    
    
     
optname

     

      Available Socket Options
       
        Option
          </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
          Type
         SO_DEBUG
          
           Reports whether debugging information is being recorded.
          
          
           int
          
         SO_BROADCAST
          
           Reports whether transmission of broadcast messages is supported.
          
          
           int
          
         SO_REUSEADDR
          
           Reports whether local addresses can be reused.
          
          
           int
          
         SO_KEEPALIVE
          
           Reports whether connections are kept active with periodic transmission
           of messages. If the connected socket fails to respond to these messages,
           the connection is broken and processes writing to that socket are notified
           with a SIGPIPE signal.
          
          
           int
          
         SO_LINGER
          
           
            Reports whether the socket lingers on 
            socket_close() if data is present. By default, 
            when the socket is closed, it attempts to send all unsent data.
            In the case of a connection-oriented socket, 
            socket_close() will wait for its peer to
            acknowledge the data. 
           
           
            If l_onoff is non-zero and 
            l_linger is zero, all the 
            unsent data will be discarded and RST (reset) is sent to the 
            peer in the case of a connection-oriented socket. 
           
           
            On the other hand, if l_onoff is 
            non-zero and l_linger is non-zero,
            socket_close() will block until all the data 
            is sent or the time specified in l_linger
            elapses. If the socket is non-blocking, 
            socket_close() will fail and return an error.
           
          
          
           array. The array will contain two keys:
           l_onoff and 
           l_linger. 
          
         SO_OOBINLINE
          
           Reports whether the socket leaves out-of-band data inline.
          
          
           int
          
         SO_SNDBUF
          
           Reports the size of the send buffer.
          
          
           int
                    
         SO_RCVBUF
          
           Reports the size of the receive buffer.
          
          
           int
                   
         SO_ERROR
          
           Reports information about error status and clears it.
          
          
           int (cannot be set by socket_set_option())
          
         SO_TYPE
          
           Reports the socket type (e.g. 
           SOCK_STREAM).
          
          
           int (cannot be set by socket_set_option())
          
         SO_DONTROUTE
          
           Reports whether outgoing messages bypass the standard routing facilities.
          
          
           int
          
         SO_RCVLOWAT
          
           Reports the minimum number of bytes to process for socket 
           input operations.
          
          
           int
          
         SO_RCVTIMEO
          
           Reports the timeout value for input operations.
          
          
           array. The array will contain two keys:
           sec which is the seconds part on the timeout
           value and usec which is the microsecond part 
           of the timeout value. 
          
         SO_SNDTIMEO
          
           Reports the timeout value specifying the amount of time that an output
           function blocks because flow control prevents data from being sent.
          
          
           array. The array will contain two keys:
           sec which is the seconds part on the timeout
           value and usec which is the microsecond part 
           of the timeout value. 
          
         SO_SNDLOWAT
          
           Reports the minimum number of bytes to process for socket output operations.
          
          
           int
          
         TCP_NODELAY
          
           Reports whether the Nagle TCP algorithm is disabled.
          
          
           int
          
         MCAST_JOIN_GROUP
          
           Joins a multicast group. (added in PHP 5.4)
          
          
           array with keys &quot;group&quot;, specifying
           a string with an IPv4 or IPv6 multicast address and
           &quot;interface&quot;, specifying either an interface
           number (type int) or a string with
           the interface name, like &quot;eth0&quot;.
           0 can be specified to indicate the interface
           should be selected using routing rules. (can only be used in
           socket_set_option())
          
         MCAST_LEAVE_GROUP
          
           Leaves a multicast group. (added in PHP 5.4)
          
          
           array. See MCAST_JOIN_GROUP for
           more information. (can only be used in
           socket_set_option())
          
         MCAST_BLOCK_SOURCE
          
           Blocks packets arriving from a specific source to a specific
           multicast group, which must have been previously joined.
           (added in PHP 5.4)
          
          
           array with the same keys as
           MCAST_JOIN_GROUP, plus one extra key,
           source, which maps to a string
           specifying an IPv4 or IPv6 address of the source to be blocked.
           (can only be used in socket_set_option())
          
         MCAST_UNBLOCK_SOURCE
          
           Unblocks (start receiving again) packets arriving from a specific
           source address to a specific multicast group, which must have been
           previously joined. (added in PHP 5.4)
          
          
           array with the same format as
           MCAST_BLOCK_SOURCE.
           (can only be used in socket_set_option())
          
         MCAST_JOIN_SOURCE_GROUP
          
           Receive packets destined to a specific multicast group whose source
           address matches a specific value. (added in PHP 5.4)
          
          
           array with the same format as
           MCAST_BLOCK_SOURCE.
           (can only be used in socket_set_option())
          
         MCAST_LEAVE_SOURCE_GROUP
          
           Stop receiving packets destined to a specific multicast group whose
           soure address matches a specific value. (added in PHP 5.4)
          
          
           array with the same format as
           MCAST_BLOCK_SOURCE.
           (can only be used in socket_set_option())
          
         IP_MULTICAST_IF
          
           The outgoing interface for IPv4 multicast packets.
           (added in PHP 5.4)
          
          
           Either int specifying the interface number or a
           string with an interface name, like
           eth0. The value 0 can be used to
           indicate the routing table is to used in the interface selection.
           The function) returns an
           interface index.
           Note that, unlike the C API, this option does NOT take an IP
           address. This eliminates the interface difference between
           IP_MULTICAST_IF and
           IPV6_MULTICAST_IF.
          
         IPV6_MULTICAST_IF
          
           The outgoing interface for IPv6 multicast packets.
           (added in PHP 5.4)
          
          
           The same as IP_MULTICAST_IF.
          
         IP_MULTICAST_LOOP
          
           The multicast loopback policy for IPv4 packets, which
           determines whether multicast packets sent by this socket also reach
           receivers in the same host that have joined the same multicast group
           on the outgoing interface used by this socket. This is the case by
           default.
           (added in PHP 5.4)
          
          
           int (either 0 or
           1). For socket_set_option()
           any value will be accepted and will be converted to a boolean
           following the usual PHP rules.
          
         IPV6_MULTICAST_LOOP
          
           Analogous to IP_MULTICAST_LOOP, but for IPv6.
           (added in PHP 5.4)
          
          
           int. See IP_MULTICAST_LOOP.
          
         IP_MULTICAST_TTL
          
           The time-to-live of outgoing IPv4 multicast packets. This should be
           a value between 0 (don't leave the interface) and 255. The default
           value is 1 (only the local network is reached).
           (added in PHP 5.4)
          
          
           int between 0 and 255.
          
         IPV6_MULTICAST_HOPS
          
           Analogous to IP_MULTICAST_TTL, but for IPv6
           packets. The value -1 is also accepted, meaning the route default
           should be used.
           (added in PHP 5.4)
          
          
           int between -1 and 255.
          
         

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the value of the given option, or FALSE on errors.
  
 " 
"socket_get_status", "Alias of stream_get_meta_data()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   stream_get_meta_data().
  
 " 
"socket_getopt", "Alias of socket_get_option()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   socket_get_option().
  
 " 
"socket_getpeername", "Queries the remote side of the given socket which may either result in host<BR>ort or in a Unix filesystem path, dependent on its type
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $socket
   , string &amp;$address
   [, int &amp;$port
  ] )

  
   Queries the remote side of the given socket which may either result in
   host<BR>ort or in a Unix filesystem path, dependent on its type.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
socket

     

      
       A valid socket resource created with socket_create()
       or socket_accept().
      
     

    
    
     
address

     

      
       If the given socket is of type AF_INET or
       AF_INET6,)
       will return the peers (remote) IP address in
       appropriate notation (e.g. 127.0.0.1 or
       fe80::1) in the address
       parameter and, if the optional port parameter is
       present, also the associated port.
      
      
       If the given socket is of type AF_UNIX,
      ) will return the Unix filesystem
       path (e.g. /var/run/daemon.sock) in the
       address parameter.
      
     

    
    
     
port

     

      
       If given, this will hold the port associated to
       address.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.) may also return
   FALSE if the socket type is not any of AF_INET,
   AF_INET6, or AF_UNIX, in which
   case the last socket error code is not updated.
  
 " 
"socket_getsockname", "Queries the local side of the given socket which may either result in host<BR>ort or in a Unix filesystem path, dependent on its type
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $socket
   , string &amp;$addr
   [, int &amp;$port
  ] )

  Note: 
   
   ) should not be used with
    AF_UNIX sockets created with socket_connect().
    Only sockets created with socket_accept() or a primary
    server socket following a call to socket_bind() will return
    meaningful values.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
socket

     

      
       A valid socket resource created with socket_create() 
       or socket_accept().
      
     

    
    
     
addr

     

      
       If the given socket is of type AF_INET
       or AF_INET6,)
       will return the local IP address in appropriate notation (e.g.
       127.0.0.1 or fe80::1) in the
       address parameter and, if the optional
       port parameter is present, also the associated port.
      
      
       If the given socket is of type AF_UNIX,
      ) will return the Unix filesystem
       path (e.g. /var/run/daemon.sock) in the
       address parameter.
      
     

    
    
     
port

     

      
       If provided, this will hold the associated port.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.) may also return
   FALSE if the socket type is not any of AF_INET,
   AF_INET6, or AF_UNIX, in which
   case the last socket error code is not updated.
  
 " 
"socket_import_stream", "Import a stream
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( resource $stream
   )

  
   Imports a stream that encapsulates a socket into a socket extension resource.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
stream

     

      
       The stream resource to import.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns FALSE or NULL on failure.
  
 " 
"socket_last_error", "Returns the last error on the socket 
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ([ resource $socket
  ] )

  
   If a socket resource is passed to this function, the last error which
   occurred on this particular socket is returned. If the socket resource is
   omitted, the error code of the last failed socket function is returned.
   The latter is particularly helpful for functions like
   socket_create() which don't return a socket on
   failure and socket_select() which can fail for reasons
   not directly tied to a particular socket.  The error code is suitable to
   be fed to socket_strerror() which returns a string
   describing the given error code.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
socket

     

      
       A valid socket resource created with socket_create().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function returns a socket error code.
  
 " 
"socket_listen", "Listens for a connection on a socket
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $socket
   [, int $backlog = 0
  ] )

  
   After the socket socket has been created
   using socket_create() and bound to a name with
   socket_bind(), it may be told to listen for incoming
   connections on socket.
  
  
  ) is applicable only to sockets of
   type SOCK_STREAM or
   SOCK_SEQPACKET.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
socket

     

      
       A valid socket resource created with socket_create().
      
     

    
    
     
backlog

     

      
       A maximum of backlog incoming connections will be
       queued for processing. If a connection request arrives with the queue
       full the client may receive an error with an indication of
       ECONNREFUSED, or, if the underlying protocol supports
       retransmission, the request may be ignored so that retries may succeed.
      
      Note: 
       
        The maximum number passed to the backlog
        parameter highly depends on the underlying platform. On Linux, it is
        silently truncated to SOMAXCONN. On win32, if
        passed SOMAXCONN, the underlying service provider
        responsible for the socket will set the backlog to a maximum
        reasonable value. There is no standard provision to
        find out the actual backlog value on this platform.
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure. The error code can be retrieved with
   socket_last_error(). This code may be passed to
   socket_strerror() to get a textual explanation of the
   error.
  
 " 
"socket_read", "Reads a maximum of length bytes from a socket
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $socket
   , int $length
   [, int $type = PHP_BINARY_READ
  ] )

  
   The function) reads from the socket
   resource socket created by the
   socket_create() or
   socket_accept() functions. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
socket

     

      
       A valid socket resource created with socket_create()
       or socket_accept().
      
     

    
    
     
length

     

      
       The maximum number of bytes read is specified by the
       length parameter. Otherwise you can use
       \r, \n,
       or \0 to end reading (depending on the type
       parameter, see below).
      
     

    
    
     
type

     

      
       Optional type parameter is a named constant:
       
         
          PHP_BINARY_READ (Default) - use the system
          recv() function. Safe for reading binary data.
         
        
        
         
          PHP_NORMAL_READ - reading stops at
          \n or \r.
         
        
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns the data as a string on success,
   or FALSE on error (including if the remote host has closed the
   connection). The error code can be retrieved with
   socket_last_error(). This code may be passed to
   socket_strerror() to get a textual representation of
   the error.
  
  Note: 
   
   ) returns a zero length string (&quot;&quot;)
    when there is no more data to read.
   
  
 " 
"socket_recv", "Receives data from a connected socket 
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $socket
   , string &amp;$buf
   , int $len
   , int $flags
   )

  
   The) function receives
   len bytes of data in buf from
   socket.) can
   be used to gather data from connected sockets. Additionally, one or
   more flags can be specified to modify the behaviour of the
   function.
  
  
   buf is passed by reference, so it must be
   specified as a variable in the argument list. Data read from
   socket by)
   will be returned in buf.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
socket

     

      
       The socket must be a socket resource previously
       created by socket_create().
      
     

    

    
     
buf

     

      
       The data received will be fetched to the variable specified with
       buf. If an error occurs, if the
       connection is reset, or if no data is
       available, buf will be set to NULL.
      
     

    

    
     
len

     

      
       Up to len bytes will be fetched from remote host.
      
     

    

    
     
flags

     

      
       The value of flags can be any combination of 
       the following flags, joined with the binary OR (|)
       operator.
      
      
      Possible values for flags
       
        Flag
          </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
         MSG_OOB
          
           Process out-of-band data.
          
         MSG_PEEK
          
           Receive data from the beginning of the receive queue without
           removing it from the queue.
          
         MSG_WAITALL
          
           Block until at least len are received.
           However, if a signal is caught or the remote host disconnects, the
           function may return less data.
          
         MSG_DONTWAIT
          
           With this flag set, the function returns even if it would normally
           have blocked.
          
         

        
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns the number of bytes received,
   or FALSE if there was an error. The actual error code can be retrieved by 
   calling socket_last_error(). This error code may be
   passed to socket_strerror() to get a textual explanation
   of the error.
  
 " 
"socket_recvfrom", "Receives data from a socket whether or not it is connection-oriented
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $socket
   , string &amp;$buf
   , int $len
   , int $flags
   , string &amp;$name
   [, int &amp;$port
  ] )

  
   The) function receives
   len bytes of data in buf from
   name on port port (if the
   socket is not of type AF_UNIX) using
   socket.) can be
   used to gather data from both connected and unconnected sockets.
   Additionally, one or more flags can be specified to modify the behaviour of
   the function.
  
  
   The name and port must be
   passed by reference. If the socket is not connection-oriented,
   name will be set to the internet protocol address of
   the remote host or the path to the UNIX socket. If the socket is
   connection-oriented, name is NULL. Additionally,
   the port will contain the port of the remote host in
   the case of an unconnected AF_INET or
   AF_INET6 socket. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
socket

     

      
       The socket must be a socket resource previously
       created by socket_create().
      
     

    

    
     
buf

     

      
       The data received will be fetched to the variable specified with
       buf.
      
     

    

    
     
len

     

      
       Up to len bytes will be fetched from remote host.
      
     

    

    
     
flags

     

      
       The value of flags can be any combination of 
       the following flags, joined with the binary OR (|)
       operator.
      
      
      Possible values for flags
       
        Flag
          </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
         MSG_OOB
          
           Process out-of-band data.
          
         MSG_PEEK
          
           Receive data from the beginning of the receive queue without
           removing it from the queue.
          
         MSG_WAITALL
          
           Block until at least len are received.
           However, if a signal is caught or the remote host disconnects, the
           function may return less data.
          
         MSG_DONTWAIT
          
           With this flag set, the function returns even if it would normally
           have blocked.
          
         

    

    
     
name

     

      
       If the socket is of the type AF_UNIX type,
       name is the path to the file. Else, for
       unconnected sockets, name is the IP address of,
       the remote host, or NULL if the socket is connection-oriented.
      
     

    

    
     
port

     

      
       This argument only applies to AF_INET and
       AF_INET6 sockets, and specifies the remote port
       from which the data is received. If the socket is connection-oriented,
       port will be NULL.
      
     

    
    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns the number of bytes received,
   or FALSE if there was an error. The actual error code can be retrieved by 
   calling socket_last_error(). This error code may be
   passed to socket_strerror() to get a textual explanation
   of the error.
  
 " 
"socket_recvmsg", "Read a message
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $socket
   , string $message
   [, int $flags
  ] )

  
  
  WarningThis function is
currently not documented; only its argument list is available.

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
socket

     

      
      
     

    
    
     
message

     

      
      
     

    
    
     
flags

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  
 " 
"socket_select", "Runs the select() system call on the given arrays of sockets with a specified timeout
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( array &amp;$read
   , array &amp;$write
   , array &amp;$except
   , int $tv_sec
   [, int $tv_usec = 0
  ] )

  
  ) accepts arrays of sockets and waits for
   them to change status. Those coming with BSD sockets background will
   recognize that those socket resource arrays are in fact the so-called file
   descriptor sets. Three independent arrays of socket resources are watched.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
read

     

      
       The sockets listed in the read array will be
       watched to see if characters become available for reading (more
       precisely, to see if a read will not block - in particular, a socket
       resource is also ready on end-of-file, in which case a
       socket_read() will return a zero length string).
      
     

    
    
     
write

     

      
       The sockets listed in the write array will be
       watched to see if a write will not block.
      
     

    
    
     
except

     

      
       The sockets listed in the except array will be
       watched for exceptions.
      
     

    
    
     
tv_sec

     

      
       The tv_sec and tv_usec
       together form the timeout parameter. The
       timeout is an upper bound on the amount of time
       elapsed before) return.
       tv_sec may be zero , causing
      ) to return immediately. This is useful
       for polling. If tv_sec is NULL (no timeout),
      ) can block indefinitely.
      
     

    
    
     
tv_usec

     

      
      
     

    
   Warning
   
    On exit, the arrays are modified to indicate which socket resource
    actually changed status.
   
  
  
   You do not need to pass every array to
  ). You can leave it out and use an
   empty array or NULL instead. Also do not forget that those arrays are
   passed by reference and will be modified after
  ) returns.
  
  Note: 
   
    Due a limitation in the current Zend Engine it is not possible to pass a
    constant modifier like NULL directly as a parameter to a function
    which expects this parameter to be passed by reference. Instead use a
    temporary variable or an expression with the leftmost member being a
    temporary variable:
    
     Example #1 Using NULL with)
     




     

    
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   On success) returns the number of
   socket resources contained in the modified arrays, which may be zero if
   the timeout expires before anything interesting happens. On error FALSE
   is returned. The error code can be retrieved with
   socket_last_error().
  
  Note: 
   
    Be sure to use the === operator when checking for an
    error. Since the) may return 0 the
    comparison with == would evaluate to TRUE:
    
     Example #2 Understanding)'s result
     




     

    
   
  
 " 
"socket_send", "Sends data to a connected socket
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $socket
   , string $buf
   , int $len
   , int $flags
   )

  
   The function) sends
   len bytes to the socket
   socket from buf.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
socket

     

      
       A valid socket resource created with socket_create()
       or socket_accept().
      
     

    
    
     
buf

     

      
       A buffer containing the data that will be sent to the remote host.
      
     

    
    
     
len

     

      
       The number of bytes that will be sent to the remote host from 
       buf.
      
     

    
    
     
flags

     

      
       The value of flags can be any combination of 
       the following flags, joined with the binary OR (|)
       operator.
       Possible values for flags
        
         MSG_OOB
           
            Send OOB (out-of-band) data.
           
          MSG_EOR
           
            Indicate a record mark. The sent data completes the record.
           
          MSG_EOF
           
            Close the sender side of the socket and include an appropriate
            notification of this at the end of the sent data. The sent data
            completes the transaction.
           
          MSG_DONTROUTE
           
            Bypass routing, use direct interface.
           
          

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns the number of bytes sent, or FALSE on error. 
  
 " 
"socket_sendmsg", "Send a message
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $socket
   , array $message
   , int $flags
   )

  
  
  WarningThis function is
currently not documented; only its argument list is available.

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
socket

     

      
      
     

    
    
     
message

     

      
      
     

    
    
     
flags

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  
 " 
"socket_sendto", "Sends a message to a socket, whether it is connected or not 
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $socket
   , string $buf
   , int $len
   , int $flags
   , string $addr
   [, int $port = 0
  ] )

  
   The function) sends
   len bytes from buf
   through the socket socket to the
   port at the address addr.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
socket

     

      
       A valid socket resource created using socket_create().
      
     

    
    
     
buf

     

      
       The sent data will be taken from buffer buf.
      
     

    
    
     
len

     

      
       len bytes from buf will be
       sent.
      
     

    
    
     
flags

     

      
       The value of flags can be any combination of 
       the following flags, joined with the binary OR (|)
       operator.
       Possible values for flags
        
         MSG_OOB
           
            Send OOB (out-of-band) data.
           
          MSG_EOR
           
            Indicate a record mark. The sent data completes the record.
           
          MSG_EOF
           
            Close the sender side of the socket and include an appropriate
            notification of this at the end of the sent data. The sent data
            completes the transaction.
           
          MSG_DONTROUTE
           
            Bypass routing, use direct interface.
           
          

    
    
     
addr

     

      
       IP address of the remote host.
      
     

    
    
     
port

     

      
       port is the remote port number at which the data
       will be sent.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns the number of bytes sent to the
   remote host, or FALSE if an error occurred.
  
 " 
"socket_set_block", "Sets blocking mode on a socket resource
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $socket
   )

  
   The) function removes the 
   O_NONBLOCK flag on the socket specified by the 
   socket parameter.
  
  
   When an operation (e.g. receive, send, connect, accept, ...) is performed on 
   a blocking socket, the script will pause its execution until it receives
   a signal or it can perform the operation.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
socket

     

      
       A valid socket resource created with socket_create()
       or socket_accept().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"socket_set_blocking", "Alias of stream_set_blocking()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  
   stream_set_blocking().
  
 " 
"socket_set_nonblock", "Sets nonblocking mode for file descriptor fd 
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $socket
   )

  
   The) function sets the 
   O_NONBLOCK flag on the socket specified by
   the socket parameter.
  
  
   When an operation (e.g. receive, send, connect, accept, ...) is performed on 
   a non-blocking socket, the script will not pause its execution until it receives a 
   signal or it can perform the operation. Rather, if the operation would result
   in a block, the called function will fail.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
socket

     

      
       A valid socket resource created with socket_create()
       or socket_accept().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"socket_set_option", "Sets socket options for the socket
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $socket
   , int $level
   , int $optname
   , mixed $optval
   )

  
   The) function sets the option
   specified by the optname parameter, at the
   specified protocol level, to the value pointed to
   by the optval parameter for the 
   socket.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
socket

     

      
       A valid socket resource created with socket_create()
       or socket_accept().
      
     

    
    
     
level

     

      
       The level parameter specifies the protocol
       level at which the option resides. For example, to retrieve options at
       the socket level, a level parameter of
       SOL_SOCKET would be used. Other levels, such as
       TCP, can be used by specifying the protocol number of that level. 
       Protocol numbers can be found by using the 
       getprotobyname() function.
      
     

    
    
     
optname

     

      
       The available socket options are the same as those for the
       socket_get_option() function.
      
     

    
    
     
optval

     

      
       The option value.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"socket_set_timeout", "Alias of stream_set_timeout()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   stream_set_timeout().
  
 " 
"socket_setopt", "Alias of socket_set_option()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   socket_set_option().
  
 " 
"socket_shutdown", "Shuts down a socket for receiving, sending, or both
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $socket
   [, int $how = 2
  ] )

  
   The) function allows you to stop
   incoming, outgoing or all data (the default) from being sent through the
   socket
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
socket

     

      
       A valid socket resource created with socket_create().
      
     

    
    
     
how

     

      
       The value of how can be one of the following:
       possible values for how
        
         0
           
            Shutdown socket reading
           
          1
           
            Shutdown socket writing
           
          2
           
            Shutdown socket reading and writing
           
          

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"socket_strerror", "Return a string describing a socket error
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( int $errno
   )

  
  ) takes as its
   errno parameter a socket error code as returned by
   socket_last_error() and returns the corresponding
   explanatory text.
  
  Note: 
   
    Although the error messages generated by the socket extension are in 
    English, the system messages retrieved with this function will appear
    depending on the current locale (LC_MESSAGES).
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
errno

     

      
       A valid socket error number, likely produced by 
       socket_last_error().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the error message associated with the errno
   parameter.
  
 " 
"socket_write", "Write to a socket
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $socket
   , string $buffer
   [, int $length
  ] )

  
   The function) writes to the
   socket from the given
   buffer.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
socket

     

      
      
     

    
    
     
buffer

     

      
       The buffer to be written.
      
     

    
    
     
length

     

      
       The optional parameter length can specify an
       alternate length of bytes written to the socket. If this length is
       greater than the buffer length, it is silently truncated to the length
       of the buffer.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the number of bytes successfully written to the socket or FALSE on failure.
   The error code can be retrieved with
   socket_last_error(). This code may be passed to
   socket_strerror() to get a textual explanation of the
   error.
  
  Note: 
   
    It is perfectly valid for) to
    return zero which means no bytes have been written. Be sure to use the
    === operator to check for FALSE in case of an
    error.
   
  
 " 
"sort", "Sort an array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( array &amp;$array
   [, int $NAME_flags = SORT_REGULAR
  ] )

  
   This function NAMEs an array.  Elements will be arranged from
   lowest to highest when this function has completed.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The input array.
      
     

    
    
     
NAME_flags

     

      
       The optional second parameter NAME_flags
       may be used to modify the NAMEing behavior using these values:
      
      
       Sorting type flags:
       
         SORT_REGULAR - compare items normally
         (don't change types)
        
        
         SORT_NUMERIC - compare items numerically
        
        
         SORT_STRING - compare items as strings
        
        
         
          SORT_LOCALE_STRING - compare items as
          strings, based on the current locale. It uses the locale,
          which can be changed using setlocale()
         
        
        
         
          SORT_NATURAL - compare items as strings
          using &quot;natural ordering&quot; like natNAME()
         
        
        
         
          SORT_FLAG_CASE - can be combined
          (bitwise OR) with
          SORT_STRING or
          SORT_NATURAL tostrings case-insensitively
         
        
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"soundex", "Calculate thekey of a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   )

  
   Calculates thekey of str.
  
  
   Soundex keys have the property that words pronounced similarly
   produce the samekey, and can thus be used to simplify
   searches in databases where you know the pronunciation but not
   the spelling. Thisfunction returns a string 4 characters
   long, starting with a letter.
  
  
   This particularfunction is one described by Donald Knuth
   in &quot;The Art Of Computer Programming, vol. 3: Sorting And
   Searching&quot;, Addison-Wesley (1973), pp. 391-392.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The input string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns thekey as a string.
  
 " 
"spl_autoload", "Default implementation for __autoload()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( string $class_name
   [, string $file_extensions = NAME_extensions()
  ] )

  
   This function is intended to be used as a default implementation for
   __autoload(). If nothing else is specified and
   NAME_register() is
   called without any parameters then this function will be used for any
   later call to __autoload(). 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
class_name

     

      
       The lowercased name of the class (and namespace) being instantiated.
      
     

    
    
     
file_extensions

     

      
       By default it checks all include paths to
       contain filenames built up by the lowercase class name appended by the
       filename extensions .inc and .php.       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"spl_autoload_call", "Try all registered __autoload() function to load the requested class
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( string $class_name
   )

  
   This function can be used to manually search for a class or interface
   using the registered __autoload functions.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
class_name

     

      
       The class name being searched.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"spl_autoload_extensions", "Register and return default file extensions for spl_autoload
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ([ string $file_extensions
  ] )

  
   This function can modify and check the file extensions that the built in
   __autoload() fallback function spl_autoload() 
   will be using.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
file_extensions

     

      
       When calling without an argument, it simply returns the current list
       of extensions each separated by comma. To modify the list of file
       extensions, simply invoke the functions with the new list of file
       extensions to use in a single string with each extensions separated
       by comma.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   A comma delimited list of default file extensions for
   spl_autoload().
  
 " 
"spl_autoload_functions", "Return all registered __autoload() functions
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
   Get all registered __autoload() functions.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  This function has no parameters.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   An array of all registered __autoload functions.
   If the autoload queue is not activated then the return value is FALSE.
   If no function is registered the return value will be an empty array.
  
 " 
"spl_autoload_register", "Register given function as __autoload() implementation
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ([ callable $autoload_function
   [, bool $throw = true
   [, bool $prepend = false
  ]]] )

  
   Register a function with the spl provided __autoload queue. If the queue
   is not yet activated it will be activated.  
  
  
   If your code has an existing __autoload() function then
   this function must be explicitly registered on the __autoload queue. This
   is because) will effectively
   replace the engine cache for the __autoload() function
   by either spl_autoload() or
   spl_autoload_call().
  
  
   If there must be multiple autoload functions,) 
   allows for this. It effectively creates a queue of autoload functions, and
   runs through each of them in the order they are defined. By contrast, 
   __autoload() may only be defined once.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
autoload_function

     

      
       The autoload function being registered.
       If no parameter is provided, then the default implementation of
       spl_autoload() will be registered.      
      
     

    
    
     
throw

     

      
       This parameter specifies whether
      ) should throw 
       exceptions when the autoload_function
       cannot be registered.
      
     

    
    
     
prepend

     

      
       If true,) will prepend
       the autoloader on the autoload queue instead of appending it.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"spl_autoload_unregister", "Unregister given function as __autoload() implementation
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( mixed $autoload_function
   )

  
   Removes a function from the autoload queue. If the queue
   is activated and empty after removing the given function then it will
   be deactivated.
  
  
   When this function results in the queue being deactivated, any
   __autoload function that previously existed will not be reactivated.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
autoload_function

     

      
       The autoload function being unregistered.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"spl_classes", "Return available SPL classes
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
   This function returns an array with the current available SPL classes.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  This function has no parameters.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array containing the currently available SPL classes.
  
 " 
"spl_object_hash", "
   Return hash id for given object
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( object $obj
   )

  
   This function returns a unique identifier for the object. This id can be
   used as a hash key for storing objects, or for identifying an object, as long
   as the object is not destroyed. Once the object is destroyed, its hash may 
   be reused for other objects.
  
 
   </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
   
    
object

      

       
        Any object. 
       
      

     
    
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   A string that is unique for each currently existing object and is always
   the same for each object.
  
 " 
"sprintf", "Return a formatted string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $format
   [, mixed $args
   [, mixed $...
  ]] )

  
   Returns a string produced according to the formatting string
   format.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
format

     

      
       The format string is composed of zero or more directives:
       ordinary characters (excluding %) that are
       copied directly to the result, and conversion
       specifications, each of which results in fetching its
       own parameter.  This applies to both)
       and printf().
      
      
       Each conversion specification consists of a percent sign
       (%), followed by one or more of these
       elements, in order:
       
         
          An optional sign specifier that forces a sign
          (- or +) to be used on a number. By default, only the - sign is used
          on a number if it's negative. This specifier forces positive numbers
          to have the + sign attached as well, and was added in PHP 4.3.0.
         
        
        
         
          An optional padding specifier that says
          what character will be used for padding the results to the
          right string size.  This may be a space character or a
          0 (zero character).  The default is to pad
          with spaces.  An alternate padding character can be specified
          by prefixing it with a single quote (').
          See the examples below.
         
        
        
         
          An optional alignment specifier that says
          if the result should be left-justified or right-justified.
          The default is right-justified; a -
          character here will make it left-justified.
         
        
        
         
          An optional number, a width specifier
          that says how many characters (minimum) this conversion should
          result in.
         
        
        
         
          An optional precision specifier in the form
          of a period (.) followed by an optional decimal digit string
          that says how many decimal digits should be displayed for
          floating-point numbers. When using this specifier on a string,
          it acts as a cutoff point, setting a maximum character limit to
          the string. Additionally, the character to use when padding a
          number may optionally be specified between the period and the
          digit.
         
        
        
         
          A type specifier that says what type the
          argument data should be treated as.  Possible types:
          
            % - a literal percent character. No
            argument is required.
           
           
            b - the argument is treated as an
            integer, and presented as a binary number.
           
           
            c - the argument is treated as an
            integer, and presented as the character with that ASCII
            value.
           
           
            d - the argument is treated as an
            integer, and presented as a (signed) decimal number.
           
           
            e - the argument is treated as scientific
            notation (e.g. 1.2e+2).
            The precision specifier stands for the number of digits after the
            decimal point since PHP 5.2.1. In earlier versions, it was taken as
            number of significant digits (one less).
           
           
            E - like %e but uses
            uppercase letter (e.g. 1.2E+2).
           
           
            f - the argument is treated as a
            float, and presented as a floating-point number (locale aware).
           
           
            F - the argument is treated as a
            float, and presented as a floating-point number (non-locale aware).
            Available since PHP 4.3.10 and PHP 5.0.3.
           
           
            g - shorter of %e and
            %f.
           
           
            G - shorter of %E and
            %f.
           
           
            o - the argument is treated as an
            integer, and presented as an octal number.
           
           
            s - the argument is treated as and
            presented as a string.
           
           
            u - the argument is treated as an
            integer, and presented as an unsigned decimal number.
           
           
            x - the argument is treated as an integer
            and presented as a hexadecimal number (with lowercase
            letters).
           
           
            X - the argument is treated as an integer
            and presented as a hexadecimal number (with uppercase
            letters).
           
          
       
       Variables will be co-erced to a suitable type for the specifier:
       Type Handling
        
         Type
           Specifiers
          string
           s
          integer
           
            d, 
            u, 
            c,
            o,
            x,
            X,
            b
           
          double
           
            g,
            G,
            e,
            E,
            f,
            F
           
          Warning
       
        Attempting to use a combination of the string and width specifiers with character sets that require more than one byte per character may result in unexpected results
       
      
      
       The format string supports argument numbering/swapping.  Here is an
       example:
       
        Example #1 Argument swapping
        




        

       
       This will output &quot;There are 5 monkeys in the tree&quot;.  But
       imagine we are creating a format string in a separate file,
       commonly because we would like to internationalize it and we
       rewrite it as:
       
        Example #2 Argument swapping
        




        

       
       We now have a problem.  The order of the placeholders in the
       format string does not match the order of the arguments in the
       code.  We would like to leave the code as is and simply indicate
       in the format string which arguments the placeholders refer to.
       We would write the format string like this instead:
       
        Example #3 Argument swapping
        




        

       
       An added benefit here is that you can repeat the placeholders without
       adding more arguments in the code.  For example:
       
        Example #4 Argument swapping
        




        

       
       When using argument swapping, the n$
       position specifier must come immediately
       after the percent sign (%), before any other
       specifiers, as shown in the example below.
       
        Example #5 Specifying padding character
        
         

  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string produced according to the formatting string
   format.
  
 " 
"sqrt", "Square root
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    float     ( float $arg
    )

  
   Returns the square root of arg.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
arg

     

      
       The argument to process
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The square root of arg
   or the special value NAN for negative numbers.
  
 " 
"srand", "Seed the random number generator
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    void     ([ int $seed
   ] )

  
   Seeds the random number generator with seed
   or with a random value if no seed is given.
  

  Note: There is no need
to seed the random number generator with) or
mt_NAME() as this is done automatically.


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
seed

     

      
       Optional seed value
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"sscanf", "Parses input from a string according to a format
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( string $str
   , string $format
   [, mixed &amp;$...
  ] )

  
   The function) is the input analog of
   printf().) reads
   from the string str and interprets it
   according to the specified format, which is
   described in the documentation for sprintf(). 
  
  
   Any whitespace in the format string matches any whitespace in the input
   string. This means that even a tab \t in the format string can match a
   single space character in the input string.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The input string being parsed.
      
     

    
    
     
format

     

      
       The interpreted format for str, which is
       described in the documentation for sprintf() with
       following differences:
       
         Function is not locale-aware.
        
        
         F, g, G and
         b are not supported.
        
        
         D stands for decimal number.
        
        
         i stands for integer with base detection.
        
        
         n stands for number of characters processed so far.
        
       

    
    
     
...

     

      
       Optionally pass in variables by reference that will contain the parsed values.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   If only two parameters were passed to this function, the values parsed will
   be returned as an array. Otherwise, if optional parameters are passed, the
   function will return the number of assigned values. The optional parameters
   must be passed by reference.
  
  
   If there are more substrings expected in the format
   than there are available within str,
   -1 will be returned.
  
 " 
"stat", "Gives information about a file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $filename
   )

  
   Gathers the NAMEistics of the file named by
   filename.  If filename is a
   symbolic link, NAMEistics are from the file itself, not the symlink.
  
  
   lNAME() is identical to)
   except it would instead be based off the symlinks NAMEus.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the file.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) and fNAME() result
     format
    
     Numeric
       Associative
       </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
      0
       dev
       device number
      1
       ino
       inode number *
      2
       mode
       inode protection mode
      3
       nlink
       number of links
      4
       uid
       userid of owner *
      5
       gid
       groupid of owner *
      6
       rdev
       device type, if inode device
      7
       size
       size in bytes
      8
       atime
       time of last access (Unix timestamp)
      9
       mtime
       time of last modification (Unix timestamp)
      10
       ctime
       time of last inode change (Unix timestamp)
      11
       blksize
       blocksize of filesystem IO **
      12
       blocks
       number of 512-byte blocks allocated **
      

   * On Windows this will always be 0.
  
  
   ** Only valid on systems supporting the st_blksize type - other
   systems (e.g. Windows) return -1.
  
  
   In case of error,) returns FALSE.
  
  Note: 
    Because PHP's integer type is signed and many platforms use 32bit integers,
    some filesystem functions may return unexpected results for files which
    are larger than 2GB.
   
 " 
"str_getcsv", "
   Parse a CSV string into an array
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $input
   [, string $delimiter = &quot;,&quot;
   [, string $enclosure = '&quot;'
   [, string $escape = &quot;\\&quot;
  ]]] )

  
   Parses a string input for fields in CSV format
   and returns an array containing the fields read.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
input

     

      
       The string to parse.
      
     

    
    
     
delimiter

     

      
       Set the field delimiter (one character only).
      
     

    
    
     
enclosure

     

      
       Set the field enclosure character (one character only).
      
     

    
    
     
escape

     

      
       Set the escape character (one character only). Defaults as a backslash
       (\)
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an indexed array containing the fields read.
  
 " 
"str_ireplace", "Case-insensitive version of str_replace().
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( mixed $search
   , mixed $replace
   , mixed $subject
   [, int &amp;$count
  ] )

  
   This function returns a string or an array with all occurrences of
   search in subject
   (ignoring case) replaced with the given replace
   value.  If you don't need fancy replacing rules, you should generally
   use this function instead of
   preg_replace() with the i modifier.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   If search and replace are
   arrays, then) takes a value from each
   array and uses them to search and replace on
   subject. If replace has fewer
   values than search, then an empty string is used for
   the rest of replacement values. If search is an
   array and replace is a string, then this replacement
   string is used for every value of search. The
   converse would not make sense, though.
  
  
   If search or replace
   are arrays, their elements are processed first to last.
  
  
   
search

     

      
       The value being searched for, otherwise known as the
       needle.  An array may be used to designate
       multiple needles.
      
     

    
    
     
replace

     

      
       The replacement value that replaces found search
       values. An array may be used to designate multiple replacements.
      
     

    
    
     
subject

     

      
       The string or array being searched and replaced on,
       otherwise known as the haystack.
      
      
       If subject is an array, then the search and
       replace is performed with every entry of 
       subject, and the return value is an array as
       well.
      
     

    
    
     
count

     

      
       If passed, this will be set to the number of replacements performed.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string or an array of replacements.
  
 " 
"str_pad", "Pad a string to a certain length with another string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $input
   , int $pad_length
   [, string $pad_string = &quot; &quot;
   [, int $pad_type = STR_PAD_RIGHT
  ]] )

  
   This functions returns the input string
   padded on the left, the right, or both sides to the specified
   padding length. If the optional argument
   pad_string is not supplied, the
   input is padded with spaces, otherwise it
   is padded with characters from pad_string
   up to the limit.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
input

     

      
       The input string.
      
     

    
    
     
pad_length

     

      
       If the value of pad_length is negative,
       less than, or equal to the length of the input string, no padding
       takes place, and input will be returned.
      
     

    
    
     
pad_string

     

      Note: 
       
        The pad_string may be truncated if the
        required number of padding characters can't be evenly divided by the
        pad_string's length.
       
      
     

    
    
     
pad_type

     

      
       Optional argument pad_type can be
       STR_PAD_RIGHT, STR_PAD_LEFT,
       or STR_PAD_BOTH. If
       pad_type is not specified it is assumed to be
       STR_PAD_RIGHT.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the padded string.
  
 " 
"str_repeat", "Repeat a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $input
   , int $multiplier
   )

  
   Returns input repeated
   multiplier times.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
input

     

      
       The string to be repeated.
      
     

    
    
     
multiplier

     

      
       Number of time the input string should be
       repeated.
      
      
       multiplier has to be greater than or equal to 0.
       If the multiplier is set to 0, the function
       will return an empty string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the repeated string.
  
 " 
"str_replace", "Replace all occurrences of the search string with the replacement string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( mixed $search
   , mixed $replace
   , mixed $subject
   [, int &amp;$count
  ] )

  
   This function returns a string or an array with all occurrences of
   search in subject
   replaced with the given replace value.
  
  
   If you don't need fancy replacing rules (like regular expressions), you
   should always use this function instead of preg_replace().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   If search and replace are
   arrays, then) takes a value from each array
   and uses them to search and replace on subject. If
   replace has fewer values than
   search, then an empty string is used for the rest of
   replacement values. If search is an array and
   replace is a string, then this replacement string is
   used for every value of search. The converse would
   not make sense, though.
  
  
   If search or replace
   are arrays, their elements are processed first to last.
  
  
   
search

     

      
       The value being searched for, otherwise known as the needle.
       An array may be used to designate multiple needles.
      
     

    
    
     
replace

     

      
       The replacement value that replaces found search
       values. An array may be used to designate multiple replacements.
      
     

    
    
     
subject

     

      
       The string or array being searched and replaced on,
       otherwise known as the haystack.
      
      
       If subject is an array, then the search and
       replace is performed with every entry of
       subject, and the return value is an array as
       well.
      
     

    
    
     
count

     

      
       If passed, this will be set to the number of replacements performed.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function returns a string or an array with the replaced values.
  
 " 
"str_rot13", "Perform the rot13 transform on a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   )

  
   Performs the ROT13 encoding on the str argument and
   returns the resulting string.
  
  
   The ROT13 encoding simply shifts every letter by 13 places in the alphabet
   while leaving non-alpha characters untouched. Encoding and decoding are
   done by the same function, passing an encoded string as argument will
   return the original version.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The input string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the ROT13 version of the given string.
  
 " 
"str_shuffle", "Randomly shuffles a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   )

  
  ) shuffles a string.  One permutation
   of all possible is created.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The input string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the shuffled string.
  
 " 
"str_split", "Convert a string to an array
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $string
   [, int $split_length = 1
  ] )

  
   Converts a string to an array. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
string

     

      
       The input string.
      
     

    
    
     
split_length

     

      
       Maximum length of the chunk.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   If the optional split_length parameter is
   specified, the returned array will be broken down into chunks with each
   being split_length in length, otherwise each chunk
   will be one character in length.
  
  
   FALSE is returned if split_length is less than 1.
   If the split_length length exceeds the length of
   string, the entire string is returned as the first
   (and only) array element.
  
 " 
"str_word_count", "
   Return information about words used in a string
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( string $string
   [, int $format = 0
   [, string $charlist
  ]] )

  
   Counts the number of words inside string. 
   If the optional format is not specified, then 
   the return value will be an integer representing the number of words 
   found. In the event the format is specified, the return
   value will be an array, content of which is dependent on the 
   format. The possible value for the 
   format and the resultant outputs are listed below.
  
  
   For the purpose of this function, 'word' is defined as a locale dependent
   string containing alphabetic characters, which also may contain, but not start
   with &quot;'&quot; and &quot;-&quot; characters.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
string

     

      
       The string
      
     

    
    
     
format

     

      
       Specify the return value of this function. The current supported values
       are:
       
         
          0 - returns the number of words found
         
        
        
         
          1 - returns an array containing all the words found inside the
          string
         
        
        
         
          2 - returns an associative array, where the key is the numeric
          position of the word inside the string and
          the value is the actual word itself
         
         
       

    
    
     
charlist

     

      
       A list of additional characters which will be considered as 'word'
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array or an integer, depending on the
   format chosen.
  
 " 
"strcasecmp", "Binary safe case-insensitive string comparison
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $str1
   , string $str2
   )

  
   Binary safe case-insensitive string comparison.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str1

     

      
       The first string
      
     

    
    
     
str2

     

      
       The second string
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns &lt; 0 if str1 is less than
   str2; &gt; 0 if str1
   is greater than str2, and 0 if they are
   equal.
  
 " 
"strchr", "Alias of strstr()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of: 
   strstr().
  
 " 
"strcmp", "Binary safe string comparison
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $str1
   , string $str2
   )

  
   Note that this comparison is case sensitive.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str1

     

      
       The first string.
      
     

    
    
     
str2

     

      
       The second string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns &lt; 0 if str1 is less than
   str2; &gt; 0 if str1
   is greater than str2, and 0 if they are
   equal.
  
 " 
"strcoll", "Locale based string comparison
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $str1
   , string $str2
   )

  
   Note that this comparison is case sensitive, and unlike
   strcmp() this function is not binary safe.
  
  
  ) uses the current locale for doing the
   comparisons.  If the current locale is C or POSIX, this function is
   equivalent to strcmp().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str1

     

      
       The first string.
      
     

    
    
     
str2

     

      
       The second string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns &lt; 0 if str1 is less than
   str2; &gt; 0 if
   str1 is greater than
   str2, and 0 if they are equal.
  
 " 
"strcspn", "Find length of initial segment not matching mask
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $subject
   , string $mask
   [, int $start
   [, int $length
  ]] )

  
   Returns the length of the initial segment of
   subject which does not
   contain any of the characters in mask.
  
  
   If start and length
   are omitted, then all of subject will be
   examined. If they are included, then the effect will be the same as
   callingsubstr($subject, $start, $length),
   $mask) (see substr
   for more information).
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
subject

     

      
       The string to examine.
      
     

    
    
     
mask

     

      
       The string containing every disallowed character.
      
     

    
    
     
start

     

      
       The position in subject to
       start searching.
      
      
       If start is given and is non-negative,
       then) will begin
       examining subject at
       the start'th position. For instance, in
       the string 'abcdef', the character at
       position 0 is 'a', the
       character at position 2 is
       'c', and so forth.
      
      
       If start is given and is negative,
       then) will begin
       examining subject at
       the start'th position from the end
       of subject.
      
     

    
    
     
length

     

      
       The length of the segment from subject
       to examine. 
      
      
       If length is given and is non-negative,
       then subject will be examined
       for length characters after the starting
       position.
      
      
       If length is given and is negative,
       then subject will be examined from the
       starting position up to length
       characters from the end of subject.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the length of the initial segment of subject
   which consists entirely of characters not in mask.
  
  Note: 
   
    When a start parameter is set, the returned length
    is counted starting from this position, not from the beginning of
    subject.
   
  
 " 
"stream_bucket_append", "
   Append bucket to brigade
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( resource $brigade
   , object $bucket
   )


  WarningThis function is
currently not documented; only its argument list is available.


 " 
"stream_bucket_make_writeable", "
   Return a bucket object from the brigade for operating on
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   object    ( resource $brigade
   )


  WarningThis function is
currently not documented; only its argument list is available.


 " 
"stream_bucket_new", "
   Create a new bucket for use on the current stream
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   object    ( resource $stream
   , string $buffer
   )


  WarningThis function is
currently not documented; only its argument list is available.


 " 
"stream_bucket_prepend", "
   Prepend bucket to brigade
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( resource $brigade
   , object $bucket
   )

  
    This function can be called to prepend a bucket to a bucket brigade. It
    is typically called from php_user_filter::filter().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
brigade

    

     
      brigade is a resource pointing to a bucket brigade
      which contains one or more bucket objects.
     
    

   
   
    
bucket

    

     
      A bucket object.
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"stream_context_create", "Creates a stream context
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ([ array $options
   [, array $params
  ]] )

  
   Creates and returns a stream context with any options supplied in
   options preset.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
options

     

      
       Must be an associative array of associative arrays in the format
       $arr['wrapper']['option'] = $value.
      
      
       Default to an empty array.
      
     

    
    
     
params

     

      
       Must be an associative array in the format
       $arr['parameter'] = $value.
       Refer to context parameters for
       a listing of standard stream parameters.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   A stream context resource.
  
 " 
"stream_context_get_default", "Retrieve the default stream context
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ([ array $options
  ] )

  
   Returns the default stream context which is used whenever file operations
   (fopen(), file_get_contents(), etc...)
   are called without a context parameter.  Options for the default context
   can optionally be specified with this function using the same syntax as
   stream_context_create().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
options

     

      
       options must be an associative
       array of associative arrays in the format
       $arr['wrapper']['option'] = $value.
      
      Note: 
       
        As of PHP 5.3.0, the stream_context_set_default() function
        can be used to set the default context.
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   A stream context resource.
  
 " 
"stream_context_get_options", "Retrieve options for a stream/wrapper/context
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $stream_or_context
   )

  
   Returns an array of options on the specified stream or context.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
stream_or_context

     

      
       The stream or context to get options from
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an associative array with the options.
  
 " 
"stream_context_get_params", "Retrieves parameters from a context
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $stream_or_context
   )

  
   Retrieves parameter and options information from the stream or context.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
stream_or_context

     

      
       A stream resource or a
       context resource
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an associate array containing all context options and parameters.
  
 " 
"stream_context_set_default", "Set the default stream context
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( array $options
   )

  
   Set the default stream context which will be used whenever file operations
   (fopen(), file_get_contents(), etc...)
   are called without a context parameter. Uses the same syntax as
   stream_context_create().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
options

     

      
       The options to set for the default context.
      
      Note: 
       
        options must be an associative
        array of associative arrays in the format
        $arr['wrapper']['option'] = $value.
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the default stream context. 
  
 " 
"stream_context_set_option", "Sets an option for a stream/wrapper/context
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $stream_or_context
   , string $wrapper
   , string $option
   , mixed $value
   )

   
    bool     ( resource $stream_or_context
    , array $options
    )

  
    Sets an option on the specified context.  value
    is set to option for wrapper
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
stream_or_context

     

      
       The stream or context resource to apply the options to.
      
     

    
    
     
options

     

      
       The options to set for the default context.
      
      Note: 
       
        options must be an associative
        array of associative arrays in the format
        $arr['wrapper']['option'] = $value.
       
       
       Refer to context options and parameters
       for a listing of stream options.
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"stream_context_set_params", "Set parameters for a stream/wrapper/context
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $stream_or_context
   , array $params
   )

  
   Sets parameters on the specified context.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
stream_or_context

     

      
       The stream or context to apply the parameters too.
      
     

    
    
     
params

     

      
       An array of parameters to set.
      
      Note: 
       
        params should be an associative array of the structure:
        $params['paramname'] = &quot;paramvalue&quot;;.
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"stream_copy_to_stream", "Copies data from one stream to another
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $source
   , resource $dest
   [, int $maxlength = -1
   [, int $offset = 0
  ]] )

  
   Makes a copy of up to maxlength bytes
   of data from the current position (or from the
   offset position, if specified) in
   source to dest. If
   maxlength is not specified, all remaining content in
   source will be copied.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
source

     

      
       The source stream
      
     

    
    
     
dest

     

      
       The destination stream
      
     

    
    
     
maxlength

     

      
       Maximum bytes to copy
      
     

    
    
     
offset

     

      
       The offset where to start to copy data
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the total count of bytes copied.
  
 " 
"stream_filter_append", "Attach a filter to a stream
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( resource $stream
   , string $filtername
   [, int $read_write
   [, mixed $params
  ]] )

  
   Adds filtername to the list of filters
   attached to stream.  
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
stream

     

      
       The target stream.
      
     

    
    
     
filtername

     

      
       The filter name.
      
     

    
    
     
read_write

     

      
       By default,) will
       attach the filter to the read filter chain
       if the file was opened for reading (i.e. File Mode:
       r, and/or +).  The filter
       will also be attached to the write filter chain
       if the file was opened for writing (i.e. File Mode:
       w, a, and/or +).
       STREAM_FILTER_READ,
       STREAM_FILTER_WRITE, and/or
       STREAM_FILTER_ALL can also be passed to the
       read_write parameter to override this behavior.
      
     

    
    
     
params

     

      
       This filter will be added with the specified 
       params to the end of
       the list and will therefore be called last during stream operations.
       To add a filter to the beginning of the list, use
       stream_filter_prepend().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a resource which can be used to refer to this filter
   instance during a call to stream_filter_remove().
  
 " 
"stream_filter_prepend", "Attach a filter to a stream
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( resource $stream
   , string $filtername
   [, int $read_write
   [, mixed $params
  ]] )

  
   Adds filtername to the list of filters
   attached to stream.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
stream

     

      
       The target stream.
      
     

    
    
     
filtername

     

      
       The filter name.
      
     

    
    
     
read_write

     

      
       By default,) will
       attach the filter to the read filter chain
       if the file was opened for reading (i.e. File Mode:
       r, and/or +).  The filter
       will also be attached to the write filter chain
       if the file was opened for writing (i.e. File Mode:
       w, a, and/or +).
       STREAM_FILTER_READ,
       STREAM_FILTER_WRITE, and/or
       STREAM_FILTER_ALL can also be passed to the
       read_write parameter to override this behavior.
       See stream_filter_append() for an example of
       using this parameter.
      
     

    
    
     
params

     

      
       This filter will be added with the specified params
       to the beginning of the list and will therefore be
       called first during stream operations.  To add a filter to the end of the
       list, use stream_filter_append().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a resource which can be used to refer to this filter
   instance during a call to stream_filter_remove().
  
 " 
"stream_filter_register", "Register a user defined stream filter
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $filtername
   , string $classname
   )

  
  ) allows you to implement
   your own filter on any registered stream used with all the other
   filesystem functions (such as fopen(),
   fread() etc.).
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filtername

     

      
       The filter name to be registered.
      
     

    
    
     
classname

     

      
       To implement a filter, you need to define a class as an extension of
       php_user_filter with a number of member
       functions. When performing read/write operations on the stream
       to which your filter is attached, PHP will pass the data through your
       filter (and any other filters attached to that stream) so that the
       data may be modified as desired. You must implement the methods
       exactly as described in php_user_filter - doing
       otherwise will lead to undefined behaviour.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
  
  ) will return FALSE if the
   filtername is already defined.
  
 " 
"stream_filter_remove", "Remove a filter from a stream
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $stream_filter
   )

  
   Removes a stream filter previously added to a stream with
   stream_filter_prepend() or
   stream_filter_append().  Any data remaining in the
   filter's internal buffer will be flushed through to the next filter before
   removing it.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
stream_filter

     

      
       The stream filter to be removed.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"stream_get_contents", "Reads remainder of a stream into a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $handle
   [, int $maxlength = -1
   [, int $offset = -1
  ]] )

   
   Identical to file_get_contents(), except that
  ) operates on an already open
   stream resource and returns the remaining contents in a string, up to
   maxlength bytes and starting at the specified
   offset.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handle (resource)

     

      
       A stream resource (e.g. returned from fopen())
      
     

    
    
     
maxlength (integer)

     

      
       The maximum bytes to read. Defaults to -1 (read all the remaining
       buffer).
      
     

    
    
     
offset (integer)

     

      
       Seek to the specified offset before reading. If this number is negative,
       no seeking will occur and reading will start from the current position.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string or FALSE on failure.
  
 " 
"stream_get_filters", "Retrieve list of registered filters
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
   Retrieve the list of registered filters on the running system.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an indexed array containing the name of all stream filters
   available.
  
 " 
"stream_get_line", "Gets line from stream resource up to a given delimiter
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $handle
   , int $length
   [, string $ending
  ] )

  
   Gets a line from the given handle.
  
  
   Reading ends when length bytes have been read, when
   the string specified by ending is found (which is
   not included in the return value), or on EOF
   (whichever comes first).
  
  
   This function is nearly identical to fgets() except in
   that it allows end of line delimiters other than the standard \n, \r, and
   \r\n, and does not return the delimiter itself.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handle

     

      
       A valid file handle.
      
     

    
    
     
length

     

      
       The number of bytes to read from the handle.
      
     

    
    
     
ending

     

      
       An optional string delimiter.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string of up to length bytes read from the file
   pointed to by handle.
  
  
   If an error occurs, returns FALSE.
  
 " 
"stream_get_meta_data", "Retrieves header/meta data from streams/file pointers
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( resource $stream
   )

  
   Returns information about an existing stream.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
stream

     

      
       The stream can be any stream created by fopen(),
       fsockopen() and pfsockopen().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The result array contains the following items:
  
  
    
     timed_out (bool) - TRUE if the stream
     timed out while waiting for data on the last call to
     fread() or fgets().
    
   
   
    
     blocked (bool) - TRUE if the stream is
     in blocking IO mode. See stream_set_blocking().
    
   
   
    
     eof (bool) - TRUE if the stream has reached
     end-of-file.  Note that for socket streams this member can be TRUE
     even when unread_bytes is non-zero.  To
     determine if there is more data to be read, use
     feof() instead of reading this item.
    
   
   
    
     unread_bytes (int) - the number of bytes
     currently contained in the PHP's own internal buffer.
    
    Note: 
     
      You shouldn't use this value in a script.
     
    
   
   
    
     stream_type (string) - a label describing
     the underlying implementation of the stream.
    
   
   
    
     wrapper_type (string) - a label describing
     the protocol wrapper implementation layered over the stream.
     See Supported Protocols and Wrappers for more information about wrappers.
    
   
   
    
     wrapper_data (mixed) - wrapper specific
     data attached to this stream.  See Supported Protocols and Wrappers for
     more information about wrappers and their wrapper data.
    
   
   
   
    
     mode (string) - the type of access required for
     this stream (see Table 1 of the fopen() reference)
    
   
   
    
     seekable (bool) - whether the current stream can
     be seeked.
    
   
   
    
     uri (string) - the URI/filename associated with this
     stream.
    
   
  " 
"stream_get_transports", "Retrieve list of registered socket transports
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
   Returns an indexed array containing the name of all socket transports
   available on the running system.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an indexed array of socket transports names.
  
 " 
"stream_get_wrappers", "Retrieve list of registered streams
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
   Retrieve list of registered streams available on the running system.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an indexed array containing the name of all stream wrappers
   available on the running system.
  
 " 
"stream_is_local", "Checks if a stream is a local stream
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( mixed $stream_or_url
   )

  
   Checks if a stream, or a URL, is a local one or not.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
stream_or_url

     

      
       The stream resource or URL to check.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"stream_register_wrapper", "Alias of stream_wrapper_register()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  stream_wrapper_register().
  
 " 
"stream_resolve_include_path", "
   Resolve filename against the include path
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $filename
   
   )

  
   Resolve filename against the include path according to the same rules as fopen()/include.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       The filename to resolve.
      
     

    
    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string containing the resolved absolute filename,  or FALSE on failure.
  
 " 
"stream_select", "Runs the equivalent of the select() system call on the given
   arrays of streams with a timeout specified by tv_sec and tv_usec 
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( array &amp;$read
   , array &amp;$write
   , array &amp;$except
   , int $tv_sec
   [, int $tv_usec = 0
  ] )

  
   The) function accepts arrays of streams and
   waits for them to change status. Its operation is equivalent to that of
   the socket_select() function except in that it acts on streams.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
read

     

      
       The streams listed in the read array will be watched to
       see if characters become available for reading (more precisely, to see if
       a read will not block - in particular, a stream resource is also ready on
       end-of-file, in which case an fread() will return
       a zero length string).
      
     

    
    
     
write

     

      
       The streams listed in the write array will be
       watched to see if a write will not block.
      
     

    
    
     
except

     

      
       The streams listed in the except array will be
       watched for high priority exceptional (&quot;out-of-band&quot;) data arriving.
      
      Note: 
       
        When) returns, the arrays
        read, write and
        except are modified to indicate which stream
        resource(s) actually changed status.
       
      
      
       You do not need to pass every array to
      ). You can leave it out and use an
       empty array or NULL instead. Also do not forget that those arrays are
       passed by reference and will be modified after
      ) returns.
      
     

    
    
     
tv_sec

     

      
       The tv_sec and tv_usec
       together form the timeout parameter,
       tv_sec specifies the number of seconds while
       tv_usec the number of microseconds.
       The timeout is an upper bound on the amount of time
       that) will wait before it returns.
       If tv_sec and tv_usec are
       both set to 0,) will
       not wait for data - instead it will return immediately, indicating the
       current status of the streams.
      
      
       If tv_sec is NULL)
       can block indefinitely, returning only when an event on one of the
       watched streams occurs (or if a signal interrupts the system call).
      
      Warning
       
        Using a timeout value of 0 allows you to
        instantaneously poll the status of the streams, however, it is NOT a
        good idea to use a 0 timeout value in a loop as it
        will cause your script to consume too much CPU time.
       
       
        It is much better to specify a timeout value of a few seconds, although
        if you need to be checking and running other code concurrently, using a
        timeout value of at least 200000 microseconds will
        help reduce the CPU usage of your script.
       
       
        Remember that the timeout value is the maximum time that will elapse;
       ) will return as soon as the
        requested streams are ready for use.
       
      
     

    
    
     
tv_usec

     

      
       See tv_sec description.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   On success) returns the number of
   stream resources contained in the modified arrays, which may be zero if
   the timeout expires before anything interesting happens. On error FALSE
   is returned and a warning raised (this can happen if the system call is
   interrupted by an incoming signal).
  
 " 
"stream_set_blocking", "Set blocking/non-blocking mode on a stream
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $stream
   , bool $mode
   )

  
   Sets blocking or non-blocking mode on a stream.
  
  
   This function works for any stream that supports non-blocking mode
   (currently, regular files and socket streams).
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
stream

     

      
       The stream.
      
     

    
    
     
mode

     

      
       If mode is FALSE, the given stream
       will be switched to non-blocking mode, and if TRUE, it
       will be switched to blocking mode.  This affects calls like
       fgets() and fread()
       that read from the stream.  In non-blocking mode an
       fgets() call will always return right away
       while in blocking mode it will wait for data to become available
       on the stream.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"stream_set_chunk_size", "Set the stream chunk size
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $fp
   , int $chunk_size
   )

  
   Set the stream chunk size.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
fp

    

     
      The target stream.
     
    

   
   
    
chunk_size

    

     
      The desired new chunk size.
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the previous chunk size on success.
  
  
   Will return FALSE if chunk_size is less than 1 or
   greater than PHP_INT_MAX.
  
 " 
"stream_set_read_buffer", "Set read file buffering on the given stream
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $stream
   , int $buffer
   )

  
   Sets the read buffer. It's the equivalent of stream_set_write_buffer(),
   but for read operations.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
stream

    

     
      The file pointer.
     
    

   
   
    
buffer

    

     
      The number of bytes to buffer. If buffer
      is 0 then read operations are unbuffered.  This ensures that all reads
      with fread() are completed before other processes are
      allowed to read from that input stream.
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns 0 on success, or another value if the request
   cannot be honored.
  
 " 
"stream_set_timeout", "Set timeout period on a stream
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $stream
   , int $seconds
   [, int $microseconds = 0
  ] )

  
   Sets the timeout value on stream,
   expressed in the sum of seconds and
   microseconds. 
  
  
   When the stream times out, the 'timed_out' key of the array returned by
   stream_get_meta_data() is set to TRUE, although no
   error/warning is generated.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
stream

     

      
       The target stream.
      
     

    
    
     
seconds

     

      
       The seconds part of the timeout to be set.
      
     

    
    
     
microseconds

     

      
       The microseconds part of the timeout to be set.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"stream_set_write_buffer", "Sets write file buffering on the given stream
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $stream
   , int $buffer
   )

  
   Sets the buffering for write operations on the given stream
   to buffer bytes.
  
  
   Output using fwrite() is normally buffered at
   8K.  This means that if there are two processes wanting to write
   to the same output stream (a file), each is paused after 8K of
   data to allow the other to write.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
stream

     

      
       The file pointer.
      
     

    
    
     
buffer

     

      
       The number of bytes to buffer. If buffer
       is 0 then write operations are unbuffered.  This ensures that all writes
       with fwrite() are completed before other processes are
       allowed to write to that output stream.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns 0 on success, or another value if the request cannot be honored.
  
 " 
"stream_socket_accept", "Accept a connection on a socket created by stream_socket_server()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( resource $server_socket
   [, float $timeout = ini_get(&quot;default_socket_timeout&quot;)
   [, string &amp;$peername
  ]] )

  
   Accept a connection on a socket previously created by
   stream_socket_server().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
server_socket

     

      
       The server socket to accept a connection from.
      
     

    
    
     
timeout

     

      
       Override the default socket accept timeout. Time should be given in
       seconds.
      
     

    
    
     
peername

     

      
       Will be set to the name (address) of the client which connected, if
       included and available from the selected transport.
      
      Note: 
       
        Can also be determined later using
        stream_socket_get_name().
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a stream to the accepted socket connection or FALSE on failure.
  
 " 
"stream_socket_client", "Open Internet or Unix domain socket connection
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( string $remote_socket
   [, int &amp;$errno
   [, string &amp;$errstr
   [, float $timeout = ini_get(&quot;default_socket_timeout&quot;)
   [, int $flags = STREAM_CLIENT_CONNECT
   [, resource $context
  ]]]]] )

  
   Initiates a stream or datagram connection to the destination specified
   by remote_socket.  The type of socket created
   is determined by the transport specified using standard URL formatting:
   transport://target.  For Internet Domain sockets
   (AF_INET) such as TCP and UDP, the target portion
   of the remote_socket parameter should consist of
   a hostname or IP address followed by a colon and a port number.  For Unix
   domain sockets, the target portion should point
   to the socket file on the filesystem.
  
  Note: 
   
    The stream will by default be opened in blocking mode.  You can
    switch it to non-blocking mode by using
    stream_set_blocking().
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
remote_socket

     

      
       Address to the socket to connect to.
      
     

    
    
     
errno

     

      
       Will be set to the system level error number if connection fails.
      
     

    
    
     
errstr

     

      
       Will be set to the system level error message if the connection fails.
      
     

    
    
     
timeout

     

      
       Number of seconds until the connect() system call
       should timeout.
       Note: 
        
         This parameter only applies when not making asynchronous
         connection attempts.
        
       
       Note: 
        
         To set a timeout for reading/writing data over the socket, use the
         stream_set_timeout(), as the
         timeout only applies while making connecting
         the socket.
        
       
      
     

    
    
     
flags

     

      
       Bitmask field which may be set to any combination of connection flags.
       Currently the select of connection flags is limited to
       STREAM_CLIENT_CONNECT (default),
       STREAM_CLIENT_ASYNC_CONNECT and
       STREAM_CLIENT_PERSISTENT.
      
     

    
    
     
context

     

      
       A valid context resource created with stream_context_create().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   On success a stream resource is returned which may
   be used together with the other file functions (such as
   fgets(), fgetss(),
   fwrite(), fclose(), and
   feof()), FALSE on failure.
  
 " 
"stream_socket_enable_crypto", "Turns encryption on/off on an already connected socket
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( resource $stream
   , bool $enable
   [, int $crypto_type
   [, resource $session_stream
  ]] )


  
   Enable or disable encryption on the stream.
  

  
   Once the crypto settings are established, cryptography can be turned
   on and off dynamically by passing TRUE or FALSE in the
   enable parameter.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
stream

     

      
       The stream resource.
      
     

    
    
     
enable

     

      
       Enable/disable cryptography on the stream.
      
     

    
    
     
crypto_type

     

      
       Setup encryption on the stream.
       Valid methods are
       STREAM_CRYPTO_METHOD_SSLv2_CLIENT
        STREAM_CRYPTO_METHOD_SSLv3_CLIENT
        STREAM_CRYPTO_METHOD_SSLv23_CLIENT
        STREAM_CRYPTO_METHOD_TLS_CLIENT
        STREAM_CRYPTO_METHOD_SSLv2_SERVER
        STREAM_CRYPTO_METHOD_SSLv3_SERVER
        STREAM_CRYPTO_METHOD_SSLv23_SERVER
        STREAM_CRYPTO_METHOD_TLS_SERVER
       
       If omitted, the crypto_type context option on
       the stream's SSL context will be used instead.
      
     

    
    
     
session_stream

     

      
       Seed the stream with settings from session_stream.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success, FALSE if negotiation has failed or
   0 if there isn't enough data and you should try again
   (only for non-blocking sockets).
  
 " 
"stream_socket_get_name", "Retrieve the name of the local or remote sockets
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $handle
   , bool $want_peer
   )

  
   Returns the local or remote name of a given socket connection.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handle

     

      
       The socket to get the name of.
      
     

    
    
     
want_peer

     

      
       If set to TRUE the remote socket name will be returned, if set
       to FALSE the local socket name will be returned.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The name of the socket.
  
 " 
"stream_socket_pair", "
   Creates a pair of connected, indistinguishable socket streams
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( int $domain
   , int $type
   , int $protocol
   )

  
  ) creates a pair of connected,
   indistinguishable socket streams. This function is commonly used in IPC
   (Inter-Process Communication).     
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
domain

     

      
       The protocol family to be used: STREAM_PF_INET,
       STREAM_PF_INET6 or
       STREAM_PF_UNIX
      
     

    
    
     
type

     

      
       The type of communication to be used:
       STREAM_SOCK_DGRAM,
       STREAM_SOCK_RAW,
       STREAM_SOCK_RDM,
       STREAM_SOCK_SEQPACKET or
       STREAM_SOCK_STREAM
      
     

    
    
     
protocol

     

      
       The protocol to be used: STREAM_IPPROTO_ICMP,
       STREAM_IPPROTO_IP,
       STREAM_IPPROTO_RAW,
       STREAM_IPPROTO_TCP or
       STREAM_IPPROTO_UDP       
      
     

    
   Note: 
   
    Please consult the Streams constant
     list for further details on each constant.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array with the two socket resources on success, or
   FALSE on failure.
  
 " 
"stream_socket_recvfrom", "Receives data from a socket, connected or not 
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $socket
   , int $length
   [, int $flags = 0
   [, string &amp;$address
  ]] )

  
  ) accepts
   data from a remote socket up to length bytes.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
socket

     

      
       The remote socket.
      
     

    
    
     
length

     

      
       The number of bytes to receive from the socket.
      
     

    
    
     
flags

     

      
       The value of flags can be any combination
       of the following:
       Possible values for flags
        
         STREAM_OOB
           
            Process OOB (out-of-band) data.
           
          STREAM_PEEK
           
            Retrieve data from the socket, but do not consume the buffer.
            Subsequent calls to fread() or
           ) will see
            the same data.
           
          

    
    
     
address

     

      
       If address is provided it will be populated with
       the address of the remote socket.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the read data, as a string
  
 " 
"stream_socket_sendto", "Sends a message to a socket, whether it is connected or not 
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $socket
   , string $data
   [, int $flags = 0
   [, string $address
  ]] )

  
   Sends the specified data through the
   socket.  
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
socket

     

      
       The socket to send data to.
      
     

    
    
     
data

     

      
       The data to be sent.
      
     

    
    
     
flags

     

      
       The value of flags can be any combination
       of the following:
       possible values for flags
        
         STREAM_OOB
           
            Process OOB (out-of-band) data.
           
          

    
    
     
address

     

      
       The address specified when the socket stream was created will be used
       unless an alternate address is specified in address.
      
      
       If specified, it must be in dotted quad (or [ipv6]) format.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a result code, as an integer.
  
 " 
"stream_socket_server", "Create an Internet or Unix domain server socket
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( string $local_socket
   [, int &amp;$errno
   [, string &amp;$errstr
   [, int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN
   [, resource $context
  ]]]] )

  
   Creates a stream or datagram socket on the specified
   local_socket.    
  
  
   This function only creates a socket, to begin accepting connections
   use stream_socket_accept().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
local_socket

     

      
       The type of socket created is determined by the transport specified
       using standard URL formatting: transport://target.
      
      
       For Internet Domain sockets (AF_INET) such as TCP and UDP, the
       target portion of the 
       remote_socket parameter should consist of a
       hostname or IP address followed by a colon and a port number.  For
       Unix domain sockets, the target portion should
       point to the socket file on the filesystem.
      
      
       Depending on the environment, Unix domain sockets may not be available.
       A list of available transports can be retrieved using
       stream_get_transports(). See
       List of Supported Socket Transports for a list of bulitin transports.
      
     

    
    
     
errno

     

      
       If the optional errno and errstr
       arguments are present they will be set to indicate the actual system
       level error that occurred in the system-level socket(),
       bind(), and listen() calls. If
       the value returned in errno is 
       0 and the function returned FALSE, it is an
       indication that the error occurred before the bind()
       call. This is most likely due to a problem initializing the socket. 
       Note that the errno and
       errstr arguments will always be passed by reference.
      
     

    
    
     
errstr

     

      
       See errno description.
      
     

    
    
     
flags

     

      
       A bitmask field which may be set to any combination of socket creation
       flags.
      
      Note: 
       
        For UDP sockets, you must use STREAM_SERVER_BIND as
        the flags parameter.
       
      
     

    
    
     
context

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the created stream, or FALSE on error.
  
 " 
"stream_socket_shutdown", "Shutdown a full-duplex connection
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $stream
   , int $how
   )

  
   Shutdowns (partially or not) a full-duplex connection.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
stream

     

      
       An open stream (opened with stream_socket_client(),
       for example)
      
     

    
    
     
how

     

      
       One of the following constants: STREAM_SHUT_RD
       (disable further receptions), STREAM_SHUT_WR
       (disable further transmissions) or
       STREAM_SHUT_RDWR (disable further receptions and
       transmissions).
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"stream_supports_lock", "Tells whether the stream supports locking.
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $stream
   )

  
   Tells whether the stream supports locking through 
   flock().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
stream

     

      
       The stream to check.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"stream_wrapper_register", "Register a URL wrapper implemented as a PHP class
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $protocol
   , string $classname
   [, int $flags  = 0
  ] )

  
   Allows you to implement your own protocol handlers and streams for use
   with all the other filesystem functions (such as fopen(),
   fread() etc.).
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
protocol

     

      
       The wrapper name to be registered.
      
     

    
    
     
classname

     

      
       The classname which implements the protocol.
      
     

    
    
     
flags

     

      
       Should be set to STREAM_IS_URL if
       protocol is a URL protocol. Default is 0, local
       stream.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
  
  ) will return FALSE if the
   protocol already has a handler.
  
 " 
"stream_wrapper_restore", "Restores a previously unregistered built-in wrapper
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $protocol
   )

  
   Restores a built-in wrapper previously unregistered with
   stream_wrapper_unregister().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
protocol

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"stream_wrapper_unregister", "Unregister a URL wrapper
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $protocol
   )

  
   Allows you to disable an already defined stream wrapper. Once the wrapper
   has been disabled you may override it with a user-defined wrapper using
   stream_wrapper_register() or reenable it later on with
   stream_wrapper_restore().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
protocol

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"strftime", "Format a local time/date according to locale settings
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $format
   [, int $timestamp = time()
  ] )

  
   Format the time and/or date according to locale settings. Month and weekday
   names and other language-dependent strings respect the current locale set
   with setlocale().
  
  
   Not all conversion specifiers may be supported by your C library, in which
   case they will not be supported by PHP's).
   Additionally, not all platforms support negative timestamps, so your
   date range may be limited to no earlier than the Unix epoch. This means that
   %e, %T, %R and, %D (and possibly others) - as well as dates prior to
   Jan 1, 1970 - will not work on Windows, some Linux
   distributions, and a few other operating systems. For Windows systems, a
   complete overview of supported conversion specifiers can be found at
   » MSDN.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
format

     

      
       The following characters are recognized in the
        format parameter string
        
         format
           </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
           Example returned values
          Day
           ---
           ---
          %a
           An abbreviated textual representation of the day
           Sun through Sat
          %A
           A full textual representation of the day
           Sunday through Saturday
          %d
           Two-digit day of the month (with leading zeros)
           01 to 31
          %e
           
            Day of the month, with a space preceding single digits. Not 
            implemented as described on Windows. See below for more information.
           
            1 to 31
          %j
           Day of the year, 3 digits with leading zeros
           001 to 366
          %u
           ISO-8601 numeric representation of the day of the week
           1 (for Monday) though 7 (for Sunday)
          %w
           Numeric representation of the day of the week
           0 (for Sunday) through 6 (for Saturday)
          Week
           ---
           ---
          %U
           Week number of the given year, starting with the first
           Sunday as the first week
           13 (for the 13th full week of the year)
          %V
           ISO-8601:1988 week number of the given year, starting with
           the first week of the year with at least 4 weekdays, with Monday
           being the start of the week
           01 through 53 (where 53
           accounts for an overlapping week)
          %W
           A numeric representation of the week of the year, starting
           with the first Monday as the first week
           46 (for the 46th week of the year beginning
           with a Monday)
          Month
           ---
           ---
          %b
           Abbreviated month name, based on the locale
           Jan through Dec
          %B
           Full month name, based on the locale
           January through December
          %h
           Abbreviated month name, based on the locale (an alias of %b)
           Jan through Dec
          %m
           Two digit representation of the month
           01 (for January) through 12 (for December)
          Year
           ---
           ---
          %C
           Two digit representation of the century (year divided by 100, truncated to an integer)
           19 for the 20th Century
          %g
           Two digit representation of the year going by ISO-8601:1988 standards (see %V)
           Example: 09 for the week of January 6, 2009
          %G
           The full four-digit version of %g
           Example: 2008 for the week of January 3, 2009
          %y
           Two digit representation of the year
           Example: 09 for 2009, 79 for 1979
          %Y
           Four digit representation for the year
           Example: 2038
          Time
           ---
           ---
          %H
           Two digit representation of the hour in 24-hour format
           00 through 23
          %k
           Two digit representation of the hour in 24-hour format, with
           a space preceding single digits
            0 through 23
          %I
           Two digit representation of the hour in 12-hour format
           01 through 12
          %l (lower-case 'L')
           Hour in 12-hour format, with a space preceding single digits
            1 through 12
          %M
           Two digit representation of the minute
           00 through 59
          %p
           UPPER-CASE 'AM' or 'PM' based on the given time
           Example: AM for 00:31, PM for 22:23
          %P
           lower-case 'am' or 'pm' based on the given time
           Example: am for 00:31, pm for 22:23
          %r
           Same as &quot;%I:%M:%S %p&quot;
           Example: 09:34:17 PM for 21:34:17
          %R
           Same as &quot;%H:%M&quot;
           Example: 00:35 for 12:35 AM, 16:44 for 4:44 PM
          %S
           Two digit representation of the second
           00 through 59
          %T
           Same as &quot;%H:%M:%S&quot;
           Example: 21:34:17 for 09:34:17 PM
          %X
           Preferred time representation based on locale, without the date
           Example: 03:59:16 or 15:59:16
          %z
           The time zone offset. Not implemented as described on
           Windows. See below for more information.
           Example: -0500 for US Eastern Time
          %Z
           The time zone abbreviation. Not implemented as described on
           Windows. See below for more information.
           Example: EST for Eastern Time
          Time and Date Stamps
           ---
           ---
          %c
           Preferred date and time stamp based on locale
           Example: Tue Feb  5 00:45:10 2009 for
           February 5, 2009 at 12:45:10 AM
          %D
           Same as &quot;%m/%d/%y&quot;
           Example: 02/05/09 for February 5, 2009
          %F
           Same as &quot;%Y-%m-%d&quot; (commonly used in database datestamps)
           Example: 2009-02-05 for February 5, 2009
          %s
           Unix Epoch Time timestamp (same as the time()
           function)
           Example: 305815200 for September 10, 1979 08:40:00 AM
          %x
           Preferred date representation based on locale, without the time
           Example: 02/05/09 for February 5, 2009
          Miscellaneous
           ---
           ---
          %n
           A newline character (&quot;\n&quot;)
           ---
          %t
           A Tab character (&quot;\t&quot;)
           ---
          %%
           A literal percentage character (&quot;%&quot;)
           ---
          
       Maximum length of this parameter is 1023 characters.
      
      Warning
       
        Contrary to ISO-9899:1999, Sun Solaris starts with Sunday as 1.  As a
        result, %u may not function as described in this
        manual.
       
      
      Warning
       
        Windows only:
       
       
        The %e modifier is not supported in the Windows
        implementation of this function. To achieve this value, the
        %#d modifier can be used instead. The example below
        illustrates how to write a cross platform compatible function.
       
       
        The %z and %Z modifiers both
        return the time zone name instead of the offset or abbreviation.
       
      
      Warning
       
        Mac OS X only: The %P modifier 
        is not supported in the Mac OS X implementation of this function.
       
      
     

    

    

timestamp


The optional timestamp parameter is an
integer Unix timestamp that defaults to the current
local time if a timestamp is not given. In other
words, it defaults to the value of time().



   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string formatted according format
   using the given timestamp or the current
   local time if no timestamp is given.  Month and weekday names and
   other language-dependent strings respect the current locale set
   with setlocale().
  
 " 
"strip_tags", "Strip HTML and PHP tags from a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   [, string $allowable_tags
  ] )

  
   This function tries to return a string with all NULL bytes, HTML and PHP tags stripped
   from a given str.  It uses the same tag stripping
   state machine as the fgetss() function.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The input string.
      
     

    
    
     
allowable_tags

     

      
       You can use the optional second parameter to specify tags which should
       not be stripped.
      
      Note: 
       
        HTML comments and PHP tags are also stripped. This is hardcoded and
        can not be changed with allowable_tags.
       
      
      Note: 
       
        In PHP 5.3.4 and later, self-closing
        XHTML tags are ignored and only non-self-closing tags should be used in
        str. For example,
        to allow both  and
        , you should use:
       
       
        




        

       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the stripped string.
  
 " 
"stripcslashes", "Un-quote string quoted with addcslashes()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   )

  
   Returns a string with backslashes stripped off. Recognizes
   C-like \n, \r ..., octal
   and hexadecimal representation.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The string to be unescaped.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the unescaped string.
  
 " 
"stripos", "Find the position of the first occurrence of a case-insensitive substring in a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( string $haystack
   , string $needle
   [, int $offset = 0
  ] )

  
   Find the numeric position of the first occurrence of
   needle in the haystack string.
  
  
   Unlike the strpos(),) is
   case-insensitive.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
haystack

     

      
       The string to search in.
      
     

    
    
     
needle

     

      
       Note that the needle may be a string of one or
       more characters.
      
      
       If needle is not a string, it is converted to
       an integer and applied as the ordinal value of a character.
      
     

    
    
     
offset

     

      
       If specified, search will start this number of characters counted from
       the beginning of the string. Unlike strrpos() and
       strripos(), the offset cannot be negative.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the position of where the needle exists relative to the beginnning of
   the haystack string (independent of offset).
   Also note that string positions start at 0, and not 1.
  
  
   Returns FALSE if the needle was not found.
  
  WarningThis function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function.
 " 
"stripslashes", "Un-quotes a quoted string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   )

  
   Un-quotes a quoted string.
  
  Note: 
   
    If magic_quotes_sybase is
    on, no backslashes are stripped off but two apostrophes are replaced by
    one instead.
   
  
  
   An example use of) is when the PHP
   directive magic_quotes_gpc
   is on (it was on by default before PHP 5.4), and you aren't inserting
   this data into a place (such as a database) that requires escaping.
   For example, if you're simply outputting data straight from an HTML form.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The input string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string with backslashes stripped off.
   (\' becomes ' and so on.)
   Double backslashes (\\) are made into a single
   backslash (\).
  
 " 
"stristr", "Case-insensitive strstr()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $haystack
   , mixed $needle
   [, bool $before_needle = false
  ] )

  
   Returns all of haystack starting from and including the first
   occurrence of needle to the end.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
haystack

     

      
       The string to search in
      
     

    
    
     
needle

     

      
       If needle is not a string, it is converted to
       an integer and applied as the ordinal value of a character.
      
     

    
    
     
before_needle

     

      
       If TRUE,)
       returns the part of the haystack before the
       first occurrence of the needle (excluding needle).
      
     

    
   
   needle and haystack
   are examined in a case-insensitive manner.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the matched substring. If needle is not
   found, returns FALSE.
  
 " 
"strlen", "Get string length
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $string
   )

  
   Returns the length of the given string. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
string

     

      
       The string being measured for length.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The length of the string on success, 
   and 0 if the string is empty.
  
 " 
"strnatcasecmp", "Case insensitive string comparisons using a &quot;natural order&quot; algorithm
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $str1
   , string $str2
   )

  
   This function implements a comparison algorithm that orders alphanumeric
   strings in the way a human being would.  The behaviour of this function is
   similar to strnatcmp(), except that the comparison is
   not case sensitive.  For more information see: Martin Pool's » Natural Order String Comparison page.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str1

     

      
       The first string.
      
     

    
    
     
str2

     

      
       The second string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Similar to other string comparison functions, this one returns &lt; 0 if
   str1 is less than str2 &gt;
   0 if str1 is greater than
   str2, and 0 if they are equal.
  
 " 
"strnatcmp", "String comparisons using a &quot;natural order&quot; algorithm
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $str1
   , string $str2
   )

  
   This function implements a comparison algorithm that orders
   alphanumeric strings in the way a human being would, this is
   described as a &quot;natural ordering&quot;.  
   Note that this comparison is case sensitive.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str1

     

      
       The first string.
      
     

    
    
     
str2

     

      
       The second string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Similar to other string comparison functions, this one returns &lt; 0 if
   str1 is less than str2; &gt;
   0 if str1 is greater than
   str2, and 0 if they are equal.
  
 " 
"strncasecmp", "Binary safe case-insensitive string comparison of the first n characters
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $str1
   , string $str2
   , int $len
   )

  
   This function is similar to strcasecmp(), with the
   difference that you can specify the (upper limit of the) number of
   characters from each string to be used in the comparison.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str1

     

      
       The first string.
      
     

    
    
     
str2

     

      
       The second string.
      
     

    
    
     
len

     

      
       The length of strings to be used in the comparison.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns &lt; 0 if str1 is less than
   str2; &gt; 0 if str1 is
   greater than str2, and 0 if they are equal.
  
 " 
"strncmp", "Binary safe string comparison of the first n characters
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $str1
   , string $str2
   , int $len
   )

  
   This function is similar to strcmp(), with the
   difference that you can specify the (upper limit of the) number of
   characters from each string to be used in the comparison.
  
  
   Note that this comparison is case sensitive.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str1

     

      
       The first string.
      
     

    
    
     
str2

     

      
       The second string.
      
     

    
    
     
len

     

      
       Number of characters to use in the comparison.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns &lt; 0 if str1 is less than
   str2; &gt; 0 if str1
   is greater than str2, and 0 if they are
   equal.
  
 " 
"strpbrk", "Search a string for any of a set of characters
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $haystack
   , string $char_list
   )

  
  ) searches the haystack
   string for a char_list.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
haystack

     

      
       The string where char_list is looked for.
      
     

    
    
     
char_list

     

      
       This parameter is case sensitive.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string starting from the character found, or FALSE if it is
   not found.
  
 " 
"strpos", "Find the position of the first occurrence of a substring in a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( string $haystack
   , mixed $needle
   [, int $offset = 0
  ] )

  
   Find the numeric position of the first occurrence of
   needle in the haystack string.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
haystack

     

      
       The string to search in.
      
     

    
    
     
needle

     

      
       If needle is not a string, it is converted
       to an integer and applied as the ordinal value of a character.
      
     

    
    
     
offset

     

      
       If specified, search will start this number of characters counted from
       the beginning of the string. Unlike strrpos() and
       strripos(), the offset cannot be negative.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the position of where the needle exists relative to the beginning of
   the haystack string (independent of offset).
   Also note that string positions start at 0, and not 1.
  
  
   Returns FALSE if the needle was not found.
  
  WarningThis function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function.
 " 
"strptime", "
     Parse a time/date generated with strftime()
    
    </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
    
     array      ( string $date
     , string $format
     )

    
    ) returns an array with the
     date parsed, or FALSE on error.
    
    
     Month and weekday names and other language dependent strings respect the
     current locale set with setlocale() (LC_TIME).
    
   
   </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
   
    
date (string)

      

       
        The string to parse (e.g. returned from strftime()).
       
      

     
     
      
format (string)

      

       
        The format used in date (e.g. the same as
        used in strftime()). Note that some of the format
        options available to strftime() may not have any
        effect within); the exact subset that are
        supported will vary based on the operating system and C library in
        use.
       
       
        For more information about the format options, read the
        strftime() page.
       
      

     
    
   </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
   
    Returns an array or FALSE on failure.
   

    
     The following parameters are returned in the array
      
       parameters
         </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
        &quot;tm_sec&quot;
         Seconds after the minute (0-61)
        &quot;tm_min&quot;
         Minutes after the hour (0-59)
        &quot;tm_hour&quot;
         Hour since midnight (0-23)
        &quot;tm_mday&quot;
         Day of the month (1-31)
        &quot;tm_mon&quot;
         Months since January (0-11)
        &quot;tm_year&quot;
         Years since 1900
        &quot;tm_wday&quot;
         Days since Sunday (0-6)
        &quot;tm_yday&quot;
         Days since January 1 (0-365)
        &quot;unparsed&quot;
         the date part which was not
          recognized using the specified format
        " 
"strrchr", "Find the last occurrence of a character in a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $haystack
   , mixed $needle
   )

  
   This function returns the portion of haystack which
   starts at the last occurrence of needle and goes
   until the end of haystack.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
haystack

     

      
       The string to search in
      
     

    
    
     
needle

     

      
       If needle contains more than one character,
       only the first is used. This behavior is different from that of
       strstr().
      
      
       If needle is not a string, it is converted to
       an integer and applied as the ordinal value of a character.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function returns the portion of string, or FALSE if
   needle is not found.
  
 " 
"strrev", "Reverse a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $string
   )

  
   Returns string, reversed.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
string

     

      
       The string to be reversed.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the reversed string.
  
 " 
"strripos", "Find the position of the last occurrence of a case-insensitive substring in a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $haystack
   , string $needle
   [, int $offset = 0
  ] )

  
   Find the numeric position of the last occurrence of
   needle in the haystack string.
  
   
   Unlike the strrpos(),) is
   case-insensitive.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
haystack

     

      
       The string to search in.
      
     

    
    
     
needle

     

      
       If needle is not a string, it is converted
       to an integer and applied as the ordinal value of a character.
      
     

    
    
     
offset

     

      
       If specified, search will start this number of characters counted from the
       beginning of the string. If the value is negative, search will instead start
       from that many characters from the end of the string, searching backwards.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the position where the needle exists relative to the beginnning of
   the haystack string (independent of search direction
   or offset).
   Also note that string positions start at 0, and not 1.
  
  
   Returns FALSE if the needle was not found.
  
  WarningThis function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function.
 " 
"strrpos", "Find the position of the last occurrence of a substring in a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $haystack
   , string $needle
   [, int $offset = 0
  ] )

  
   Find the numeric position of the last occurrence of
   needle in the haystack string.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
haystack

     

      
       The string to search in.
      
     

    
    
     
needle

     

      
       If needle is not a string, it is converted
       to an integer and applied as the ordinal value of a character.
      
     

    
    
     
offset

     

      
       If specified, search will start this number of characters counted from the
       beginning of the string. If the value is negative, search will instead start
       from that many characters from the end of the string, searching backwards.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the position where the needle exists relative to the beginnning of
   the haystack string (independent of search direction
   or offset).
   Also note that string positions start at 0, and not 1.
  
  
   Returns FALSE if the needle was not found.
  
  WarningThis function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function.
 " 
"strspn", "
   Finds the length of the initial segment of a string consisting
   entirely of characters contained within a given mask.
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $subject
   , string $mask
   [, int $start
   [, int $length
  ]] )

  
   Finds the length of the initial segment of subject
   that contains only characters from mask.
  
  
   If start and length
   are omitted, then all of subject will be
   examined. If they are included, then the effect will be the same as
   callingsubstr($subject, $start, $length),
   $mask) (see substr
   for more information).
  
  
   The line of code:
   
    




    

   
   will assign 2 to $var,
   because the string &quot;42&quot; is the initial segment
   of subject that consists only of characters
   contained within &quot;1234567890&quot;.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
subject

     

      
       The string to examine.
      
     

    
    
     
mask

     

      
       The list of allowable characters.
      
     

    
    
     
start

     

      
       The position in subject to
       start searching.
      
      
       If start is given and is non-negative,
       then) will begin
       examining subject at
       the start'th position. For instance, in
       the string 'abcdef', the character at
       position 0 is 'a', the
       character at position 2 is
       'c', and so forth.
      
      
       If start is given and is negative,
       then) will begin
       examining subject at
       the start'th position from the end
       of subject.
      
     

    
    
     
length

     

      
       The length of the segment from subject
       to examine. 
      
      
       If length is given and is non-negative,
       then subject will be examined
       for length characters after the starting
       position.
      
      
        If length is given and is negative,
        then subject will be examined from the
        starting position up to length
        characters from the end of subject.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the length of the initial segment of subject
   which consists entirely of characters in mask.
  
  Note: 
   
    When a start parameter is set, the returned length
    is counted starting from this position, not from the beginning of
    subject.
   
  
 " 
"strstr", "Find the first occurrence of a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $haystack
   , mixed $needle
   [, bool $before_needle = false
  ] )

  
   Returns part of haystack string starting from and including the first
   occurrence of needle to the end of
   haystack.
  
  Note: 
   
    This function is case-sensitive. For case-insensitive searches, use
    stristr().
   
  
  Note: 
   
    If you only want to determine if a particular needle
    occurs within haystack, use the faster and less memory
    intensive function strpos() instead.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
haystack

     

      
       The input string.
      
     

    
    
     
needle

     

      
       If needle is not a string, it is converted to
       an integer and applied as the ordinal value of a character.
      
     

    
    
     
before_needle

     

      
       If TRUE,) returns
       the part of the haystack before the first
       occurrence of the needle (excluding the needle).
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the portion of string, or FALSE if needle
   is not found.
  
 " 
"strtok", "Tokenize string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   , string $token
   )

  
   string    ( string $token
   )

  
  ) splits a string (str)
   into smaller strings (tokens), with each token being delimited by any
   character from token.
   That is, if you have a string like &quot;This is an example string&quot; you
   could tokenize this string into its individual words by using the
   space character as the token.
  
  
   Note that only the first call touses the string argument.
   Every subsequent call toonly needs the token to use, as
   it keeps track of where it is in the current string.  To start
   over, or to tokenize a new string you simply callwith the
   string argument again to initialize it.  Note that you may put
   multiple tokens in the token parameter.  The string will be
   tokenized when any one of the characters in the argument are
   found.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The string being split up into smaller strings (tokens).
      
     

    
    
     
token

     

      
       The delimiter used when splitting up str.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   A string token.
  
 " 
"strtolower", "Make a string lowercase
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $string
   )

  
   Returns string with all alphabetic characters
   converted to lowercase.
  
  
   Note that 'alphabetic' is determined by the current locale. This means
   that e.g. in the default &quot;C&quot; locale, characters such as umlaut-A
   (Ä) will not be converted.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
string

     

      
       The input string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the lowercased string.
  
 " 
"strtotime", "Parse about any English textual datetime description into a Unix timestamp
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $time
   [, int $now = time()
  ] )

  
   The function expects to be given a string containing an English date format
   and will try to parse that format into a Unix timestamp (the number of
   seconds since January 1 1970 00:00:00 UTC), relative to the timestamp given
   in now, or the current time if
   now is not supplied.
  
  
   Each parameter of this function uses the default time zone unless a
   time zone is specified in that parameter.  Be careful not to use
   different time zones in each parameter unless that is intended.
   See date_default_timezone_get() on the various
   ways to define the default time zone.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
time

     

      A date/time string. Valid formats are explained in Date and Time Formats.
     

    
    
     
now

     

      
       The timestamp which is used as a base for the calculation of relative
       dates.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a timestamp on success, FALSE otherwise. Previous to PHP 5.1.0,
   this function would return -1 on failure.
  
 " 
"strtoupper", "Make a string uppercase
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $string
   )

  
   Returns string with all alphabetic characters
   converted to uppercase.
  
  
   Note that 'alphabetic' is determined by the current locale. For instance,
   in the default &quot;C&quot; locale characters such as umlaut-a (ä) will not be
   converted.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
string

     

      
       The input string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the uppercased string.
  
 " 
"strtr", "Translate characters or replace substrings
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   , string $from
   , string $to
   )

  
   string    ( string $str
   , array $replace_pairs
   )

  
   If given three arguments, this function returns a copy of
   str where all occurrences of each (single-byte)
   character in from have been translated to the
   corresponding character in to, i.e., every
   occurrence of $from[$n] has been replaced with
   $to[$n], where $n is a valid
   offset in both arguments.
  
  
   If from and to have
   different lengths, the extra characters in the longer of the two
   are ignored. The length of str will be the same as
   the return value's.
  
  
   If given two arguments, the second should be an array in the
   form array('from' =&gt; 'to', ...). The return value is
   a string where all the occurrences of the array keys have been
   replaced by the corresponding values. The longest keys will be tried first.
   Once a substring has been replaced, its new value will not be searched
   again.
  
  
   In this case, the keys and the values may have any length, provided that
   there is no empty key; additionally, the length of the return value may
   differ from that of str.
   However, this function will be the most efficient when all the keys have the
   same size.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The string being translated.
      
     

    
    
     
from

     

      
       The string being translated to to.
      
     

    
    
     
to

     

      
       The string replacing from.
      
     

    
    
     
replace_pairs

     

      
       The replace_pairs parameter may be used instead of 
       to and from, in which case it's an
       array in the form array('from' =&gt; 'to', ...). 
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the translated string.
  
  
   If replace_pairs contains a key which
   is an empty string (&quot;&quot;),
   FALSE will be returned. If the str is not a scalar
   then it is not typecasted into a string, instead a warning is raised and 
   NULL is returned. 
  
 " 
"strval", "Get string value of a variable
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( mixed $var
   )

  
   Get the string value of a variable.
   See the documentation on string for more information
   on converting to string.
  
  
   This function performs no formatting on the returned value. If you
   are looking for a way to format a numeric value as a string, please
   see sprintf() or number_format().
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
var

     

      
       The variable that is being converted to a string.
      
      
       var may be any scalar type or an object that
       implements the __toString()
       method. You cannot use) on arrays or on
       objects that do not implement the
       __toString() method.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The string value of var.
  
 " 
"substr", "Return part of a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $string
   , int $start
   [, int $length
  ] )

  
   Returns the portion of string specified by the
   start and length parameters.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
string

     

      
       The input string. Must be one character or longer.
      
     

    
    
     
start

     

      
       If start is non-negative, the returned string
       will start at the start'th position in
       string, counting from zero. For instance,
       in the string 'abcdef', the character at
       position 0 is 'a', the
       character at position 2 is
       'c', and so forth.
      
      
       If start is negative, the returned string
       will start at the start'th character
       from the end of string.
      
      
       If string is less than
       start characters long, FALSE will be returned.
      
      
       
        Example #1 Using a negative start
        




        

       
      
     

    
    
     
length

     

      
       If length is given and is positive, the string
       returned will contain at most length characters
       beginning from start (depending on the length of
       string).
      
      
       If length is given and is negative, then that many
       characters will be omitted from the end of string
       (after the start position has been calculated when a
       start is negative).  If
       start denotes the position of this truncation or
       beyond, FALSE will be returned.
      
      
       If length is given and is 0,
       FALSE or NULL, an empty string will be returned.
      
      
       If length is omitted, the NAMEing starting from
       start until the end of the string will be
       returned.
      
      
       Example #2 Using a negative length
       




       

      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the extracted part of string;  or FALSE on failure, or
   an empty string.
  
 " 
"substr_compare", "Binary safe comparison of two strings from an offset, up to length characters
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $main_str
   , string $str
   , int $offset
   [, int $length
   [, bool $case_insensitivity = false
  ]] )

  
  ) compares main_str
   from position offset with str
   up to length characters.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
main_str

     

      
       The main string being compared.
      
     

    
    
     
str

     

      
       The secondary string being compared.
      
     

    
    
     
offset

     

      
       The start position for the comparison. If negative, it starts counting
       from the end of the string.
      
     

    
    
     
length

     

      
       The length of the comparison. The default value is the largest of the
       length of the str compared to the length of
       main_str less the
       offset.
      
     

    
    
     
case_insensitivity

     

      
       If case_insensitivity is TRUE, comparison is
       case insensitive.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns &lt; 0 if main_str from position
   offset is less than str, &gt;
   0 if it is greater than str, and 0 if they are equal.
   If offset is equal to or greater than the length of
   main_str, or the length is
   set and is less than 1 (prior to PHP 5.6),
  ) prints a warning and returns
   FALSE.
  
 " 
"substr_count", "Count the number of substring occurrences
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $haystack
   , string $needle
   [, int $offset = 0
   [, int $length
  ]] )

  
  ) returns the number of times the
   needle substring occurs in the
   haystack string. Please note that
   needle is case sensitive.
  
  Note: 
   
    This function doesn't count overlapped substrings. See the example below!
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
haystack

     

      
       The string to search in
      
     

    
    
     
needle

     

      
       The substring to search for
      
     

    
    
     
offset

     

      
       The offset where to start counting
      
     

    
    
     
length

     

      
       The maximum length after the specified offset to search for the
       substring. It outputs a warning if the offset plus the length is
       greater than the haystack length.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function returns an integer.
  
 " 
"substr_replace", "Replace text within a portion of a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( mixed $string
   , mixed $replacement
   , mixed $start
   [, mixed $length
  ] )

  
  ) replaces a copy of
   string delimited by the
   start and (optionally)
   length parameters with the string given in
   replacement. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
string

     

      
       The input string.
      
      
       An array of strings can be provided, in which
       case the replacements will occur on each string in turn. In this case,
       the replacement, start
       and length parameters may be provided either as
       scalar values to be applied to each input string in turn, or as
       arrays, in which case the corresponding array element will
       be used for each input string.
      
     

    
    
     
replacement

     

      
       The replacement string.
      
     

    
    
     
start

     

      
       If start is positive, the replacing will
       begin at the start'th offset into
       string.
      
      
       If start is negative, the replacing will
       begin at the start'th character from the
       end of string.
      
     

    
    
     
length

     

      
       If given and is positive, it represents the length of the portion of
       string which is to be replaced. If it is
       negative, it represents the number of characters from the end of
       string at which to stop replacing. If it
       is not given, then it will default to strlen(
       string ); i.e. end the replacing at the
       end of string. Of course, if
       length is zero then this function will have the
       effect of inserting replacement into
       string at the given
       start offset.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The result string is returned. If string is an
   array then array is returned.
  
 " 
"symlink", "Creates a symbolic link
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $target
   , string $link
   )

  
  ) creates a symbolic link to the existing
   target with the specified name
   link.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
target

     

      
       Target of the link.
      
     

    
    
     
link

     

      
       The link name.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"sys_get_temp_dir", "Returns directory path used for temporary files
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( void
   )

  
   Returns the path of the directory PHP stores temporary files in by
   default.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the path of the temporary directory.
  
 " 
"sys_getloadavg", "Gets system load average
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( void
   )

  
   Returns three samples representing the average system load
   (the number of processes in the system run queue) over the last 1, 5 and 15
   minutes, respectively.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an array with three samples (last 1, 5 and 15
   minutes).
  
 " 
"syslog", "Generate a system log message
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( int $priority
   , string $message
   )

  
  ) generates a log message that will be
   distributed by the system logger.
  
  
   For information on setting up a user defined log handler, see the
  conf
   (5) Unix manual page.  More
   information on thefacilities and option can be found in the man
   pages for   (3) on Unix machines.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
priority

     

      
       priority is a combination of the facility and
       the level. Possible values are:
      ) Priorities (in descending order)
        
         Constant
           </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
          LOG_EMERG
           system is unusable
          LOG_ALERT
           action must be taken immediately
          LOG_CRIT
           critical conditions
          LOG_ERR
           error conditions
          LOG_WARNING
           warning conditions
          LOG_NOTICE
           normal, but significant, condition
          LOG_INFO
           informational message
          LOG_DEBUG
           debug-level message
          

    
    
     
message

     

      
       The message to send, except that the two characters
       %m will be replaced by the error message string
       (strerror) corresponding to the present value of
       errno.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"system", "Execute an external program and display the output
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $command
   [, int &amp;$return_var
  ] )

  
  ) is just like the C version of the
   function in that it executes the given
   command and outputs the result.
  
  
   The) call also tries to automatically
   flush the web server's output buffer after each line of output if
   PHP is running as a server module.
  
  
   If you need to execute a command and have all the data from the
   command passed directly back without any interference, use the
   passthru() function.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
command

     

      
       The command that will be executed.
      
     

    
    
     
return_var

     

      
       If the return_var argument is present, then the
       return status of the executed command will be written to this
       variable.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the last line of the command output on success, and FALSE
   on failure.
  
 " 
"tan", "Tangent
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    float     ( float $arg
    )

  
  ) returns the NAMEgent of the arg
   parameter.  The arg parameter is in radians.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
arg

     

      
       The argument to process in radians 
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The NAMEgent of arg
  
 " 
"tanh", "Hyperbolic tangent
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
   
    float     ( float $arg
    )

  
   Returns the hyperbolic tangent of arg,
   defined as sinh(arg)/cosh(arg).
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
arg

     

      
       The argument to process
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The hyperbolic tangent of arg
  
 " 
"tempnam", "Create file with unique file name
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $dir
   , string $prefix
   )

  
   Creates a file with a unique filename, with access permission set to 0600, in the specified directory.
   If the directory does not exist or is not writable,) may
   generate a file in the system's temporary directory, and return
   the full path to that file, including its name.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
dir

     

      
       The directory where the temporary filename will be created.
      
     

    
    
     
prefix

     

      
       The prefix of the generated temporary filename.
      
      Note: 
       
        Windows uses only the first three characters of prefix.
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the new temporary filename (with path), or FALSE on
   failure.
  
 " 
"textdomain", "Sets the default domain
    </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
     
      string       ( string $text_domain
      )

    
     This function sets the domain to search within when calls are
     made to gettext(), usually the named after an
     application.
    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
text_domain

     

      
       The new message domain, or NULL to get the current setting without
       changing it
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   If successful, this function returns the current message
   domain, after possibly changing it.
  
 " 
"time", "Return current Unix NAMEstamp
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( void
   )

  
   Returns the currentmeasured in the number of seconds since
   the Unix Epoch (January 1 1970 00:00:00 GMT).
  
 " 
"time_nanosleep", "Delay for a number of seconds and nanoseconds
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( int $seconds
   , int $nanoseconds
   )

  
   Delays program execution for the given number of
   seconds and nanoseconds.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
seconds

     

      
       Must be a non-negative integer.
      
     

    
    
     
nanoseconds

     

      
       Must be a non-negative integer less than 1 billion.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
  
   If the delay was interrupted by a signal, an associative array will be
   returned with the components:
   
     
      seconds - number of seconds remaining in
      the delay
     
    
    
     
      nanoseconds - number of nanoseconds
      remaining in the delay
     
    
   " 
"time_sleep_until", "
   Make the script sleep until the specified time
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( float $timestamp
   )

  
   Makes the script sleep until the specified
   timestamp. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
timestamp

     

      
       The timestamp when the script should wake.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"timezone_abbreviations_list", "Alias of DateTimeZone::listAbbreviations()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  DateTimeZone::listAbbreviations()
  
 " 
"timezone_identifiers_list", "Alias of DateTimeZone::listIdentifiers()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  DateTimeZone::listIdentifiers()
  
 " 
"timezone_location_get", "Alias of DateTimeZone::getLocation()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  DateTimeZone::getLocation()
  
 " 
"timezone_name_from_abbr", "Returns the timezone name from abbreviation
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $abbr
   [, int $gmtOffset = -1
   [, int $isdst = -1
  ]] )

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
abbr

     

      
       Time zone abbreviation.
      
     

    
    
     
gmtOffset

     

      
       Offset from GMT in seconds. Defaults to -1 which means that first found
       time zone corresponding to abbr is returned.
       Otherwise exact offset is searched and only if not found then the first
       time zone with any offset is returned.
      
     

    
    
     
isdst

     

      
       Daylight saving time indicator. Defaults to -1, which means that
       whether the time zone has daylight saving or not is not taken into
       consideration when searching. If this is set to 1, then the
       gmtOffset is assumed to be an offset with
       daylight saving in effect; if 0, then gmtOffset
       is assumed to be an offset without daylight saving in effect. If
       abbr doesn't exist then the time zone is
       searched solely by the gmtOffset and
       isdst.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns time zone name on success or FALSE on failure.
  
 " 
"timezone_name_get", "Alias of DateTimeZone::getName()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  DateTimeZone::getName()
  
 " 
"timezone_offset_get", "Alias of DateTimeZone::getOffset()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  DateTimeZone::getOffset()
  
 " 
"timezone_open", "Alias of DateTimeZone::__construct()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  DateTimeZone::__construct()
  
 " 
"timezone_transitions_get", "Alias of DateTimeZone::getTransitions()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  DateTimeZone::getTransitions()
  
 " 
"timezone_version_get", "
   Gets the version of the timezonedb
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( void
   )

  
   Returns the current version of the timezonedb.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string.
  
 " 
"tmpfile", "Creates a temporary file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( void
   )

  
   Creates a temporary file with a unique name in read-write (w+) mode and
   returns a file handle .
  
  
   The file is automatically removed when closed (for example, by calling
   fclose(), or when there are no remaining references to
   the file handle returned by)), or when the
   script ends.
  
  
   For details, consult your system documentation on the
  3) function, as well as the
   stdio.h header file.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a file handle, similar to the one returned by
   fopen(), for the new file or FALSE on failure.
  
 " 
"token_get_all", "Split given source into PHP tokens
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $source
   [, int $flags = 0
  ] )

  
  ) parses the given source 
   string into PHP language tokens using the Zend engine's lexical scanner.
  
  
   For a list of parser tokens, see List of Parser Tokens, or use 
   token_name() to translate a token value into its string
   representation.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
source

     

      
       The PHP source to parse.
      
     

    
    
     
flags

     

      
       Valid flags:
       
         
          TOKEN_PARSE - Recognises the ability to use
          reserved words in specific contexts.
         
        
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   An array of token identifiers. Each individual token identifier is either
   a single character (i.e.: ;, ., 
   &gt;, !, etc...),
   or a three element array containing the token index in element 0, the string
   content of the original token in element 1 and the line number in element 2.
  
 " 
"token_name", "Get the symbolic name of a given PHP token
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( int $token
   )

  
  ) gets the symbolic name for a PHP 
   token value. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
token

     

      
       The token value.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The symbolic name of the given token.
  
 " 
"touch", "Sets access and modification time of file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $filename
   [, int $time = time()
   [, int $atime
  ]] )

  
   Attempts to set the access and modification times of the file named in the
   filename parameter to the value given in
   time. 
   Note that the access time is always modified, regardless of the number
   of parameters.
  
  
   If the file does not exist, it will be created. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       The name of the file being NAMEed.
      
     

    
    
     
time

     

      
       Thetime. If time is not supplied, 
       the current system time is used.
      
     

    
    
     
atime

     

      
       If present, the access time of the given filename is set to 
       the value of atime. Otherwise, it is set to
       the value passed to the time parameter.
       If neither are present, the current system time is used.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"trait_exists", "Checks if the trait exists
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $traitname
   [, bool $autoload
  ] )

  

  

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
traitname

    

     
      Name of the trait to check
     
    

   
   
    
autoload

    

     
      Whether to autoload if not already loaded.
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if trait exists, FALSE if not, NULL in case of an error.
  
 " 
"transliterator_create", "Create a transliterator
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   public static Transliterator Transliterator::create
    ( string $id
   [, int $direction
  ] )

  Procedural style
  
   Transliterator    ( string $id
   [, int $direction
  ] )

  
   Opens a Transliterator by id.
  

  WarningThis function is
currently not documented; only its argument list is available.


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
id

    

     
      The id.
     
    

   
   
    
direction

    

     
      The direction, defaults to 
      &gt;Transliterator::FORWARD.
      May also be set to
      Transliterator::REVERSE.
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a Transliterator object on success,
   or NULL on failure.
  
 " 
"transliterator_transliterate", "Transliterate a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   public string Transliterator::transliterate
    ( string $subject
   [, int $start
   [, int $end
  ]] )

  Procedural style
  
      ( mixed $transliterator
   , string $subject
   [, int $start
   [, int $end
  ]] )

  
   Transforms a string or part thereof using an ICU transliterator.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
transliterator

    

     
      In the procedural version, either a Transliterator
      or a string from which a
      Transliterator can be built.
     
    

   
   
    
subject

    

     
      The string to be transformed.
     
    

   
   
    
start

    

     
      The start index (in UTF-16 code units) from which the string will start
      to be transformed, inclusive. Indexing starts at 0. The text before will
      be left as is.
     
    

   
   
    
end

    

     
      The end index (in UTF-16 code units) until which the string will be
      transformed, exclusive. Indexing starts at 0. The text after will be
      left as is.
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The transfomed string on success,  or FALSE on failure.
  
 " 
"trigger_error", "Generates a user-level error/warning/notice message
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $error_msg
   [, int $error_type = E_USER_NOTICE
  ] )

  
   Used to trigger a user error condition, it can be used in conjunction
   with the built-in error handler, or with a user defined function that has
   been set as the new error handler
   (set_error_handler()). 
  
  
   This function is useful when you need to generate a particular response to
   an exception at runtime.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
error_msg

     

      
       The designated error message for this error. It's limited to 1024 
       bytes in length. Any additional characters beyond 1024 bytes will be 
       truncated.
      
     

    
    
     
error_type

     

      
       The designated error type for this error. It only works with the E_USER
       family of constants, and will default to E_USER_NOTICE.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function returns FALSE if wrong error_type is
   specified, TRUE otherwise.
  
 " 
"trim", "Strip whitespace (or other characters) from the beginning and end of a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   [, string $character_mask = &quot; \t\n\r\0\x0B&quot;
  ] )

  
   This function returns a string with whitespace stripped from the
   beginning and end of str.
   Without the second parameter,
  ) will strip these characters:
   
   
     
      &quot; &quot; (ASCII 32 
      (0x20)), an ordinary space.
     
    
    
     
      &quot;\t&quot; (ASCII 9 
      (0x09)), a tab.
     
    
    
     
      &quot;\n&quot; (ASCII 10 
      (0x0A)), a new line (line feed).
     
    
    
     
      &quot;\r&quot; (ASCII 13 
      (0x0D)), a carriage return.
     
    
    
     
      &quot;\0&quot; (ASCII 0 
      (0x00)), the NUL-byte.
     
    
    
      
      &quot;\x0B&quot; (ASCII 11 
      (0x0B)), a vertical tab.
     
    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The string that will be NAMEmed.
      
     

    
    
     
character_mask

     

      
       Optionally, the stripped characters can also be specified using
       the character_mask parameter.
       Simply list all characters that you want to be stripped. With
       .. you can specify a range of characters.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The NAMEmed string.
  
 " 
"uasort", "Sort an array with a user-defined comparison function and maintain index association
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( array &amp;$array
   , callable $value_compare_func
   )

  
   This function sorts an array such that array indices maintain their
   correlation with the array elements they are associated with, using a
   user-defined comparison function.
  
  
   This is used mainly when sorting associative arrays where the actual
   element order is significant.
  
  Note: 
   
    If two members compare as equal, their relative order in the sorted array is undefined.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The input array.
      
     

    
    
     
value_compare_func

     

      
       See usort() and uksort() for
       examples of user-defined comparison functions.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"ucfirst", "Make a string's first character uppercase
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   )

  
   Returns a string with the first character of
   str capitalized, if that character is
   alphabetic.
  
  
   Note that 'alphabetic' is determined by the current locale. For
   instance, in the default &quot;C&quot; locale characters such as umlaut-a
   (ä) will not be converted.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The input string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the resulting string.
  
 " 
"ucwords", "Uppercase the first character of each word in a string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   [, 
    string $delimiters = &quot; \t\r\n\f\v&quot;
   
  ] )

  
   Returns a string with the first character of each word in
   str capitalized, if that character is alphabetic.
  
  
   The definition of a word is any string of characters that is immediately
   after any character listed in the delimiters parameter
   (By default these are: space, form-feed, newline, carriage return, horizontal tab, and vertical tab).
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The input string.
      
     

    
    
     
delimiters

     

      
       The optional delimiters contains the word separator characters.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the modified string.
  
 " 
"uksort", "Sort an array by keys using a user-defined comparison function
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( array &amp;$array
   , callable $key_compare_func
   )

  
  ) will sort the keys of an array using a
   user-supplied comparison function.  If the array you wish to sort
   needs to be sorted by some non-trivial criteria, you should use
   this function.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The input array.
      
     

    
    
     
key_compare_func

     

      
       The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.
      
      int callback ( mixed $a, mixed $b )

     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"umask", "Changes the current NAME
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ([ int $mask
  ] )

  
  ) sets PHP'sto
   mask &amp; 0777 and returns the old
   When PHP is being used as a server module, the   is restored when each request is finished.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
mask

     

      
       The new
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) without arguments simply returns the
   currentotherwise the oldis returned.
  
 " 
"uniqid", "Generate a unique ID
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ([ string $prefix = &quot;&quot;
   [, bool $more_entropy = false
  ]] )

  
   Gets a prefixed unique identifier based on the current time in
   microseconds.
  
  Warning
   
    This function does not create random nor unpredictable strings.
    This function must not be used for security purposes.
    Use a cryptographically secure random function/generator and
    cryptographically secure hash functions to create unpredictable
    secure IDs.
   
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
prefix

     

      
       Can be useful, for instance, if you generate identifiers
       simultaneously on several hosts that might happen to generate the
       identifier at the same microsecond.
      
      
       With an empty prefix, the returned string will
       be 13 characters long.  If more_entropy is
       TRUE, it will be 23 characters.
      
     

    
    
     
more_entropy

     

      
       If set to TRUE,) will add additional
       entropy (using the combined linear congruential generator) at the end
       of the return value, which increases the likelihood that the result
       will be unique.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the unique identifier, as a string.
  
 " 
"unixtojd", "Convert Unix timestamp to Julian Day
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ([ int $timestamp = time()
  ] )

  
   Return the Julian Day for a Unix timestamp
   (seconds since 1.1.1970), or for the current day if no
   timestamp is given.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
timestamp

     

      
       A unix timestamp to convert.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   A julian day number as integer.
  
 " 
"unlink", "Deletes a file
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string $filename
   [, resource $context
  ] )

  
   Deletes filename.  Similar to the Unix C)
   function. An E_WARNING level error will be generated on
   failure.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       Path to the file.
      
     

    
    
     
context

     

      Note: Context support was added
with PHP 5.0.0. For a description of contexts, refer to
Streams.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"unpack", "Unpack data from binary string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $format
   , string $data
   )

  
   Unpacks from a binary string into an array according to the given
   format. 
  
  
   The NAMEed data is stored in an associative array. To
   accomplish this you have to name the different format codes and
   separate them by a slash /. If a repeater argument is present,
   then each of the array keys will have a sequence number behind
   the given name.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
format

     

      
       See pack() for an explanation of the format codes.
      
     

    
    
     
data

     

      
       The packed data.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns an associative array containing NAMEed elements of binary
   string.
  
 " 
"unregister_tick_function", "De-register a function for execution on each tick
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( string $function_name
   )

  
   De-registers the function named by function_name so it is
   no longer executed when a tick is
   called.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
function_name

     

      
       The function name, as a string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"unserialize", "
   Creates a PHP value from a stored representation
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( string $str
   [, array $options
  ] )

  
  ) takes a single serialized variable and
   converts it back into a PHP value.  
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The serialized string.
      
      
       If the variable being NAMEd is an object, after successfully 
       reconstructing the object PHP will automatically attempt to call the
       __wakeup() member
       function (if it exists).
      
      
       Note: 
        NAME_callback_func directive
         It's possible to set a callback-function which will be called,
         if an undefined class should be instantiated during unserializing.
         (to prevent getting an incomplete object &quot;__PHP_Incomplete_Class&quot;.)
         Use your php.ini, ini_set() or .htaccess 
         to define 'NAME_callback_func'.  Everytime an undefined class
         should be instantiated, it'll be called.  To disable this feature just
         empty this setting.
        
       
      
     

    
    
     
options

     

      
       Any options to be provided to), as an
       associative array.
      
      Valid options
       
        Name
          Type
          </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
         allowed_classes
          mixed
          
           
            Either an array of class names which should be
            accepted, FALSE to accept no classes, or TRUE to accept all
            classes. If this option is defined and
           ) encounters an object of a class
            that isn't to be accepted, then the object will be instantiated as
            __PHP_Incomplete_Class instead.
           
           
            Omitting this option is the same as defining it as TRUE: PHP
            will attempt to instantiate objects of any class.
           
          
         

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The converted value is returned, and can be a boolean,
   integer, float, string,
   array or object.
  
  
   In case the passed string is not NAMEable, FALSE is returned and
   E_NOTICE is issued.
  
 " 
"urldecode", "Decodes URL-encoded string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   )

  
   Decodes any %##
   encoding in the given string. Plus symbols ('+') are
   decoded to a space character.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The string to be decoded.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the decoded string.
  
 " 
"urlencode", "URL-encodes string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   )

  
   This function is convenient when encoding a string to be used in a query
   part of a URL, as a convenient way to pass variables to the next page.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The string to be encoded.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string in which all non-alphanumeric characters except
   -_. have been replaced with a percent
   (%) sign followed by two hex digits and spaces encoded
   as plus (+) signs.  It is encoded the same way that the
   posted data from a WWW form is encoded, that is the same way as in
   application/x-www-form-NAMEd media type. This
   differs from the » RFC 3986 encoding (see
   rawNAME()) in that for historical reasons, spaces
   are encoded as plus (+) signs.
  
 " 
"use_soap_error_handler", "Set whether to use the SOAP error handler
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ([ bool $handler = true
  ] )

  
   This function sets whether or not to use the SOAP error handler in the SOAP server. 
   It will return the previous value. If set to TRUE, details of errors
   in a SoapServer application will be sent to the client
   as a SOAP fault message.
   If FALSE, the standard PHP error handler is used.
   The default is to send error to the client as SOAP fault message.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handler

     

      
       Set to TRUE to send error details to clients.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the original value.
  
 " 
"user_error", "Alias of trigger_error()
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   This function is an alias of:  trigger_error().
  
 " 
"usleep", "Delay execution in microseconds
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( int $micro_seconds
   )

  
   Delays program execution for the given number of microseconds.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
micro_seconds

     

      
       Halt time in microseconds. A microsecond is one millionth of a
       second.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"usort", "Sort an array by values using a user-defined comparison function
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( array &amp;$array
   , callable $value_compare_func
   )

  
   This function will sort an array by its values using a user-supplied
   comparison function.  If the array you wish to sort needs to be sorted by
   some non-trivial criteria, you should use this function.
  
  Note: 
   
    If two members compare as equal, their relative order in the sorted array is undefined.
   
  
  Note: This function
assigns new keys to the elements in array.
It will remove any existing keys that may have been assigned, rather
than just reordering the keys.
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
array

     

      
       The input array.
      
     

    
    
     
value_compare_func

     

      
       The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.
      
      int callback ( mixed $a, mixed $b )

      Caution
       
        Returning non-integer values from the comparison
        function, such as float, will result in an internal cast to
        integer of the callback's return value. So values such as
        0.99 and 0.1 will both be cast to an integer value of 0, which will
        compare such values as equal.
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"utf8_decode", "
   Converts a string with ISO-8859-1 characters encoded with UTF-8
   to single-byte ISO-8859-1
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $data
   )

  
   This function decodes data, assumed to be
   UTF-8 encoded, to ISO-8859-1.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
data

     

      
       An UTF-8 encoded string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the ISO-8859-1 translation of data.
  
 " 
"utf8_encode", "Encodes an ISO-8859-1 string to UTF-8
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $data
   )

  
   This function encodes the string data to
   UTF-8, and returns the encoded version.
   UTF-8 is a standard mechanism used by
   Unicode for encoding wide
   character values into a byte stream.
   UTF-8 is transparent to plain ASCII
   characters, is self-synchronized (meaning it is possible for a program to
   figure out where in the bytestream characters start) and can be used with
   normal string comparison functions for sorting and such. PHP encodes
   UTF-8 characters in up to four bytes, like this:
   UTF-8 encoding
    
     bytes
       bits
       representation
      1
       7
       0bbbbbbb
      2
       11
       110bbbbb 10bbbbbb
      3
       16
       1110bbbb 10bbbbbb 10bbbbbb
      4
       21
       11110bbb 10bbbbbb 10bbbbbb 10bbbbbb
      

   Each b represents a bit that can be
   used to store character data.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
data

     

      
       An ISO-8859-1 string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the UTF-8 translation of data.
  
 " 
"var_dump", "Dumps information about a variable
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( mixed $expression
   [, mixed $...
  ] )

  
   This function displays structured information about one or more
   expressions that includes its type and value. Arrays and objects are
   explored recursively with values indented to show structure.
  
  
   All public, private and protected properties of objects will be returned in
   the output unless the object implements a
   __debugInfo() method
   (implemented in PHP 5.6.0).
  
  TipAs with anything that outputs
its result directly to the browser, the output-control functions can be used to capture
the output of this function, and save it in a
string (for example).
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
expression

     

      
       The variable you want to dump.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"var_export", "Outputs or returns a parsable string representation of a variable
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( mixed $expression
   [, bool $return = false
  ] )

  
  ) gets structured information about the 
   given variable. It is similar to var_dump()
   with one exception: the returned representation is valid PHP code.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
expression

     

      
       The variable you want to export.
      
     

    
    
     
return

     

      
       If used and set to TRUE,) will return
       the variable representation instead of outputting it.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the variable representation when the return 
   parameter is used and evaluates to TRUE. Otherwise, this function will
   return NULL.
  
 " 
"version_compare", "Compares two &quot;PHP-standardized&quot; version number strings
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( string $version1
   , string $version2
   [, string $operator
  ] )

  
  ) compares two &quot;PHP-standardized&quot;
   version number strings.
  
  
   The function first replaces _, - and
   + with a dot . in the version
   strings and also inserts dots . before and after any
   non number so that for example '4.3.2RC1' becomes '4.3.2.RC.1'. Then it
   compares the parts starting from left to right. If a part contains
   special version strings these are handled in the following order:
   any string not found in this list &lt; 
   dev &lt; alpha =
   a &lt; beta =
   b &lt; RC =  
   rc &lt; # &lt;
   pl = p. This way not only versions
   with different levels like '4.1' and '4.1.2' can be compared but also any
   PHP specific version containing development state.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
version1

     

      
       First version number.
      
     

    
    
     
version2

     

      
       Second version number.
      
     

    
    
     
operator

     

      
       If the third optional operator argument is
       specified, test for a particular relationship. The possible operators
       are: =, ge,
       ==, =, eq,
       !=, , ne
       respectively. 
      
      
       This parameter is case-sensitive, values should be lowercase.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   By default,) returns
   -1 if the first version is lower than the second, 
   0 if they are equal, and
   1 if the second is lower. 
  
  
   When using the optional operator argument, the
   function will return TRUE if the relationship is the one specified
   by the operator, FALSE otherwise.   
  
 " 
"vfprintf", "Write a formatted string to a stream
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $handle
   , string $format
   , array $args
   )

  
   Write a string produced according to format to the
   stream resource specified by handle.
  
  
   Operates as fprintf() but accepts an array of
   arguments, rather than a variable number of arguments.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
handle

     

      
      
     

    
    
     
format

     

      
       See sprintf() for a description of
       format.
      
     

    
    
     
args

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the length of the outputted string.
  
 " 
"vprintf", "Output a formatted string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( string $format
   , array $args
   )

  
   Display array values as a formatted string according to
   format (which is described in the documentation
   for sprintf()).
  
  
   Operates as printf() but accepts an array of
   arguments, rather than a variable number of arguments.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
format

     

      
       See sprintf() for a description of
       format.
      
     

    
    
     
args

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the length of the outputted string.
  
 " 
"vsprintf", "Return a formatted string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $format
   , array $args
   )

  
   Operates as sprintf() but accepts an array of
   arguments, rather than a variable number of arguments.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
format

     

      
       See sprintf() for a description of
       format.
      
     

    
    
     
args

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Return array values as a formatted string according to
   format (which is described in the documentation
   for sprintf()).
  
 " 
"wddx_add_vars", "Add variables to a WDDX packet with the specified ID
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $packet_id
   , mixed $var_name
   [, mixed $...
  ] )

  
   Serializes the passed variables and add the result to the given packet.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   This function takes a variable number of parameters.
   
packet_id

     

      
       A WDDX packet, returned by wddx_packet_start().
      
     

    
    
     
var_name

     

      
       Can be either a string naming a variable or an array containing
       strings naming the variables or another array, etc.
      
     

    
    
     
...

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"wddx_deserialize", "Unserializes a WDDX packet
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( string $packet
   )

  
   Unserializes a WDDX packet.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
packet

     

      
       A WDDX packet, as a string or stream.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the deserialized value which can be a string, a number or an
   array. Note that structures are deserialized into associative arrays.
  
 " 
"wddx_packet_end", "Ends a WDDX packet with the specified ID
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $packet_id
   )

  
   Ends and returns the given WDDX packet.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
packet_id

     

      
       A WDDX packet, returned by wddx_packet_start().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the string containing the WDDX packet.
  
 " 
"wddx_packet_start", "Starts a new WDDX packet with structure inside it
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ([ string $comment
  ] )

  
   Start a new WDDX packet for incremental addition of variables.
   It automatically creates a structure definition inside the packet to
   contain the variables.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
comment

     

      
       An optional comment string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a packet ID for use in later functions, or FALSE on error.
  
 " 
"wddx_serialize_value", "Serialize a single value into a WDDX packet
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( mixed $var
   [, string $comment
  ] )

  
   Creates a WDDX packet from a single given value.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
var

     

      
       The value to be serialized
      
     

    
    
     
comment

     

      
       An optional comment string that appears in the packet header.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the WDDX packet, or FALSE on error.
  
 " 
"wddx_serialize_vars", "Serialize variables into a WDDX packet
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( mixed $var_name
   [, mixed $...
  ] )

  
   Creates a WDDX packet with a structure that contains the serialized
   representation of the passed variables.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   This function takes a variable number of parameters.
   
var_name

     

      
       Can be either a string naming a variable or an array containing
       strings naming the variables or another array, etc.
      
     

    
    
     
...

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the WDDX packet, or FALSE on error.
  
 " 
"wordwrap", "Wraps a string to a given number of characters
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $str
   [, int $width = 75
   [, string $break = &quot;\n&quot;
   [, bool $cut = false
  ]]] )

  
   Wraps a string to a given number of characters using a string break
   character.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
str

     

      
       The input string.
      
     

    
    
     
width

     

      
       The number of characters at which the string will be wrapped.
      
     

    
    
     
break

     

      
       The line is broken using the optional
       break parameter.
      
     

    
    
     
cut

     

      
       If the cut is set to TRUE, the string is
       always wrapped at or before the specified width.  So if you have
       a word that is larger than the given width, it is broken apart.
       (See second example). When FALSE the function does not split the word
       even if the width is smaller than the word width.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the given string wrapped at the specified length.
  
 " 
"xml_error_string", "Get XML parser error string
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( int $code
   )

  
   Gets the XML parser error string associated with the given 
   code.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
code

     

      
       An error code from xml_get_error_code().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string with a textual description of the error
   code, or FALSE if no description was found.
  
 " 
"xml_get_current_byte_index", "Get current byte index for an XML parser
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $parser
   )

  
   Gets the current byte index of the given XML parser.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
parser

     

      
       A reference to the XML parser to get byte index from.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function returns FALSE if parser does
   not refer to a valid parser, or else it returns which byte index
   the parser is currently at in its data buffer (starting at 0).
  
 " 
"xml_get_current_column_number", "
   Get current column number for an XML parser
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $parser
   )

  
   Gets the current column number of the given XML parser.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
parser

     

      
       A reference to the XML parser to get column number from.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function returns FALSE if parser does
   not refer to a valid parser, or else it returns which column on
   the current line (as given by
   xml_get_current_line_number()) the parser is
   currently at.
  
 " 
"xml_get_current_line_number", "Get current line number for an XML parser
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $parser
   )

  
   Gets the current line number for the given XML parser.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
parser

     

      
       A reference to the XML parser to get line number from.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function returns FALSE if parser does
   not refer to a valid parser, or else it returns which line the
   parser is currently at in its data buffer.
  
 " 
"xml_get_error_code", "Get XML parser error code
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $parser
   )

  
   Gets the XML parser error code.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
parser

     

      
       A reference to the XML parser to get error code from.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function returns FALSE if parser does
   not refer to a valid parser, or else it returns one of the error
   codes listed in the error codes
   section.
  
 " 
"xml_parse", "Start parsing an XML document
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $parser
   , string $data
   [, bool $is_final = false
  ] )

  
  ) parses an XML document. The handlers for
   the configured events are called as many times as necessary.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
parser

     

      
       A reference to the XML parser to use.
      
     

    
    
     
data

     

      
       Chunk of data to parse.  A document may be parsed piece-wise by
       calling) several times with new data,
       as long as the is_final parameter is set and
       TRUE when the last data is parsed.
      
     

    
    
     
is_final

     

      
       If set and TRUE, data is the last piece of
       data sent in this parse.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns 1 on success or 0 on failure.
  
  
   For unsuccessful parses, error information can be retrieved with
   xml_get_error_code(),
   xml_error_string(),
   xml_get_current_line_number(),
   xml_get_current_column_number() and
   xml_get_current_byte_index().
  
  Note: 
   
    Entity errors are reported at the end of the data thus only if
    is_final is set and TRUE.
   
  
 " 
"xml_parse_into_struct", "Parse XML data into an array structure
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $parser
   , string $data
   , array &amp;$values
   [, array &amp;$index
  ] )

  
   This function parses an XML string into 2 parallel array structures, one
   (index) containing pointers to the location of the
   appropriate values in the values array. These last
   two parameters must be passed by reference.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
parser

     

      
       A reference to the XML parser.
      
     

    
    
     
data

     

      
       A string containing the XML data.
      
     

    
    
     
values

     

      
       An array containing the values of the XML data
      
     

    
    
     
index

     

      
       An array containing pointers to the location of the appropriate values in the $values.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
  ) returns 0 for failure and 1 for
   success. This is not the same as FALSE and TRUE, be careful with
   operators such as ===.
  
 " 
"xml_parser_create", "Create an XML parser
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ([ string $encoding
  ] )

  
  ) creates a new XML parser
   and returns a resource handle referencing it to be used by the
   other XML functions.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
encoding

     

      
       The optional encoding specifies the character
       encoding for the input/output in PHP 4. Starting from PHP 5, the input
       encoding is automatically detected, so that the
       encoding parameter specifies only the output
       encoding. In PHP 4, the default output encoding is the same as the
       input charset. If empty string is passed, the parser attempts to identify
       which encoding the document is encoded in by looking at the heading 3 or
       4 bytes. In PHP 5.0.0 and 5.0.1, the default output charset is
       ISO-8859-1, while in PHP 5.0.2 and upper is UTF-8. The supported
       encodings are ISO-8859-1, UTF-8 and
       US-ASCII.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a resource handle for the new XML parser.
  
 " 
"xml_parser_create_ns", "Create an XML parser with namespace support
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ([ string $encoding
   [, string $separator = &quot;:&quot;
  ]] )

  
  ) creates a new XML parser
   with XML namespace support and returns a resource handle referencing 
   it to be used by the other XML functions.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
encoding

     

      
       The optional encoding specifies the character
       encoding for the input/output in PHP 4. Starting from PHP 5, the input
       encoding is automatically detected, so that the
       encoding parameter specifies only the output
       encoding. In PHP 4, the default output encoding is the same as the
       input charset. In PHP 5.0.0 and 5.0.1, the default output charset is
       ISO-8859-1, while in PHP 5.0.2 and upper is UTF-8. The supported
       encodings are ISO-8859-1, UTF-8 and
       US-ASCII.
      
     

    
    
     
separator

     

      
       With a namespace aware parser tag parameters passed to the various
       handler functions will consist of namespace and tag name separated by
       the string specified in separator.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a resource handle for the new XML parser.
  
 " 
"xml_parser_free", "Free an XML parser
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $parser
   )

  
   Frees the given XML parser.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
parser

     

      
       A reference to the XML parser to free.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function returns FALSE if parser does not
   refer to a valid parser, or else it frees the parser and returns TRUE.
  
 " 
"xml_parser_get_option", "Get options from an XML parser
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( resource $parser
   , int $option
   )

  
   Gets an option value from an XML parser.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
parser

     

      
       A reference to the XML parser to get an option from.
      
     

    
    
     
option

     

      
       Which option to fetch. XML_OPTION_CASE_FOLDING
       and XML_OPTION_TARGET_ENCODING are available.
       See xml_parser_set_option() for their description.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function returns FALSE if parser does
   not refer to a valid parser or if option isn't
   valid (generates also a E_WARNING).
   Else the option's value is returned.
  
 " 
"xml_parser_set_option", "Set options in an XML parser
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $parser
   , int $option
   , mixed $value
   )

  
   Sets an option in an XML parser.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
parser

     

      
       A reference to the XML parser to set an option in.
      
     

    
    
     
option

     

      
       Which option to set.  See below.
      
      
       The following options are available:
       XML parser options
        
         Option constant
           Data type
           </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
          XML_OPTION_CASE_FOLDING
           integer
           
            Controls whether case-folding is enabled for this
            XML parser.  Enabled by default.
           
          XML_OPTION_SKIP_TAGSTART
           integer 
           
            Specify how many characters should be skipped in the beginning of a
            tag name.
           
          XML_OPTION_SKIP_WHITE
           integer 
           
            Whether to skip values consisting of whitespace characters.
           
          XML_OPTION_TARGET_ENCODING
           string 
           
            Sets which target encoding to
            use in this XML parser.By default, it is set to the same as the
            source encoding used by xml_parser_create().
            Supported target encodings are ISO-8859-1,
            US-ASCII and UTF-8.
           
          

    
    
     
value

     

      
       The option's new value.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   This function returns FALSE if parser does not
   refer to a valid parser, or if the option could not be set.  Else the
   option is set and TRUE is returned.
  
 " 
"xml_set_character_data_handler", "Set up character data handler
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $parser
   , callable $handler
   )

  
   Sets the character data handler function for the XML parser
   parser.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
parser

     

      
       A reference to the XML parser to set up character data handler function.
      
     

    
    
     
handler

     

      
       handler is a string containing the name of a
       function that must exist when xml_parse() is called
       for parser.
      
      
       The function named by handler must accept
       two parameters:
       
        handler
         ( resource $parser
        , string $data
        )

       
parser

         

          
           The first parameter, parser, is a
           reference to the XML parser calling the handler.
          
         

        
        
         
data

         

          
           The second parameter, data, contains
           the character data as a string.
          
         

        
       
       Character data handler is called for every piece of a text in the XML
       document. It can be called multiple times inside each fragment (e.g.
       for non-ASCII strings).
      
      
       If a handler function is set to an empty string, or FALSE, the handler
       in question is disabled.
      
      Note: Instead of a function name, an
array containing an object reference and a method name can also be
supplied.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xml_set_default_handler", "Set up default handler
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $parser
   , callable $handler
   )

  
   Sets the default handler function for the XML parser
   parser.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
parser

     

      
       A reference to the XML parser to set up default handler function.
      
     

    
    
     
handler

     

      
       handler is a string containing the name of a
       function that must exist when xml_parse() is called
       for parser.
      
      
       The function named by handler must accept
       two parameters:
       
        handler
         ( resource $parser
        , string $data
        )

       

          parser
         
 
         

          
           The first parameter, parser, is a
           reference to the XML parser calling the handler.
          
         

        
        
         

          data
         

         

          
           The second parameter, data, contains
           the character data.This may be the XML declaration,
           document type declaration, entities or other data for which
           no other handler exists.
          
         

        
       
       If a handler function is set to an empty string, or FALSE, the handler
       in question is disabled.
      
      Note: Instead of a function name, an
array containing an object reference and a method name can also be
supplied.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xml_set_element_handler", "Set up start and end element handlers
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $parser
   , callable $start_element_handler
   , callable $end_element_handler
   )

  
   Sets the element handler functions for the XML parser.
   start_element_handler and
   end_element_handler are strings containing
   the names of functions that must exist when xml_parse()
   is called for parser.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
parser

     

      
       A reference to the XML parser to set up start and end element handler functions.
      
     

    
    
     
start_element_handler

     

      
       The function named by start_element_handler
       must accept three parameters:
       
        start_element_handler
         ( resource $parser
        , string $name
        , array $attribs
        )

       
parser
 
         

          
           The first parameter, parser, is a
           reference to the XML parser calling the handler.
          
         

        
        
         
name

         

          
           The second parameter, name, contains the name
           of the element for which this handler is called.If case-folding is in effect for this
           parser, the element name will be in uppercase letters.
          
         

        
        
         
attribs

         

          
           The third parameter, attribs, contains an
           associative array with the element's attributes (if any).The keys
           of this array are the attribute names, the values are the attribute
           values.Attribute names are case-folded on the same criteria as
           element names.Attribute values are not
           case-folded.
          
          
           The original order of the attributes can be retrieved by walking
           through attribs the normal way, using
           each().The first key in the array was the first
           attribute, and so on.
          
         

        
       Note: Instead of a function name, an
array containing an object reference and a method name can also be
supplied.
     

    
    
     
end_element_handler

     

      
       The function named by end_element_handler
       must accept two parameters:
       
        end_element_handler
         ( resource $parser
        , string $name
        )

       
parser
 
         

          
           The first parameter, parser, is a
           reference to the XML parser calling the handler.
          
         

        
        
         
name

         

          
           The second parameter, name, contains the name
           of the element for which this handler is called.If case-folding is in effect for this
           parser, the element name will be in uppercase letters.
          
         

        
       
       If a handler function is set to an empty string, or FALSE, the handler
       in question is disabled.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xml_set_end_namespace_decl_handler", "Set up end namespace declaration handler
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $parser
   , callable $handler
   )

  
   Set a handler to be called when leaving the scope of a namespace
   declaration. This will be called, for each namespace declaration, after
   the handler for the end tag of the element in which the namespace was
   declared.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
parser

     

      
       A reference to the XML parser.
      
     

    
    
     
handler

     

      
       handler is a string containing the name of a
       function that must exist when xml_parse() is called
       for parser.
      
      
       The function named by handler must accept
       two parameters, and should return an integer value. If the
       value returned from the handler is FALSE (which it will be if no
       value is returned), the XML parser will stop parsing and
       xml_get_error_code() will return
       XML_ERROR_EXTERNAL_ENTITY_HANDLING.
       
        handler
         ( resource $parser
        , string $prefix
        )

       
parser

         

          
           The first parameter, parser, is a
           reference to the XML parser calling the handler.
          
         

        
        
         
prefix

         

          
           The prefix is a string used to reference the namespace within an XML object.
          
         

        
       
       If a handler function is set to an empty string, or FALSE, the handler
       in question is disabled.
      
      Note: Instead of a function name, an
array containing an object reference and a method name can also be
supplied.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xml_set_external_entity_ref_handler", "Set up external entity reference handler
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $parser
   , callable $handler
   )

  
   Sets the external entity reference handler function for the XML parser
   parser.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
parser

     

      
       A reference to the XML parser to set up external entity reference handler function.
      
     

    
    
     
handler

     

      
       handler is a string containing the name of a
       function that must exist when xml_parse() is called
       for parser.
      
      
       The function named by handler must accept
       five parameters, and should return an integer value.If the
       value returned from the handler is FALSE (which it will be if no
       value is returned), the XML parser will stop parsing and
       xml_get_error_code() will return
       XML_ERROR_EXTERNAL_ENTITY_HANDLING.
       
        handler
         ( resource $parser
        , string $open_entity_names
        , string $base
        , string $system_id
        , string $public_id
        )

       
parser

         

          
           The first parameter, parser, is a
           reference to the XML parser calling the handler.
          
         

        
        
         
open_entity_names

         

          
           The second parameter, open_entity_names, is a
           space-separated list of the names of the entities that are open for
           the parse of this entity (including the name of the referenced
           entity).
          
         

        
        
         
base

         

          
           This is the base for resolving the system identifier
           (system_id) of the external entity.Currently
           this parameter will always be set to an empty string.
          
         

        
        
         
system_id

         

          
           The fourth parameter, system_id, is the
           system identifier as specified in the entity declaration.
          
         

        
        
         
public_id

         

          
           The fifth parameter, public_id, is the
           public identifier as specified in the entity declaration, or
           an empty string if none was specified; the whitespace in the
           public identifier will have been normalized as required by
           the XML spec.
          
         

        
       
       If a handler function is set to an empty string, or FALSE, the handler
       in question is disabled.
      
      Note: Instead of a function name, an
array containing an object reference and a method name can also be
supplied.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xml_set_notation_decl_handler", "Set up notation declaration handler
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $parser
   , callable $handler
   )

  
   Sets the notation declaration handler function for the XML parser
   parser.
  
  
   A notation declaration is part of the document's DTD and has the
   following format:    
   
name
{ systemId | publicId?&gt;

   

   See » section 4.7 of the XML 1.0
   spec for the definition of notation declarations.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
parser

     

      
       A reference to the XML parser to set up notation declaration handler function.
      
     

    
    
     
handler

     

      
       handler is a string containing the name of a
       function that must exist when xml_parse() is called
       for parser.
      
      
       The function named by handler must accept
       five parameters:
       
        handler
         ( resource $parser
        , string $notation_name
        , string $base
        , string $system_id
        , string $public_id
        )

       

          parser
         
 
         

          
           The first parameter, parser, is a
           reference to the XML parser calling the handler.
          
         

        
        
         
notation_name

         

          
           This is the notation's name, as per
           the notation format described above.
          
         

        
        
         

          base
         

         

          
           This is the base for resolving the system identifier
           (system_id) of the notation declaration.
           Currently this parameter will always be set to an empty string.
          
         

        
        
         
system_id

         

          
           System identifier of the external notation declaration.
          
         

        
        
         

          public_id
         

         

          
           Public identifier of the external notation declaration.
          
         

        
       
       If a handler function is set to an empty string, or FALSE, the handler
       in question is disabled.
      
      Note: Instead of a function name, an
array containing an object reference and a method name can also be
supplied.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xml_set_object", "Use XML Parser within an object
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $parser
   , object &amp;$object
   )

  
   This function allows to use parser inside
   object. All callback functions could be set with
   xml_set_element_handler() etc and assumed to be
   methods of object.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
parser

     

      
       A reference to the XML parser to use inside the object.
      
     

    
    
     
object

     

      
       The object where to use the XML parser.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xml_set_processing_instruction_handler", "
   Set up processing instruction (PI) handler
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $parser
   , callable $handler
   )

  
   Sets the processing instruction (PI) handler function for the XML parser
   parser.
  
  
   A processing instruction has the following format:
   
    
    

   
   You can put PHP code into such a tag, but be aware of one limitation: in
   an XML PI, the PI end tag (?&gt;) can not be quoted,
   so this character sequence should not appear in the PHP code you embed
   with PIs in XML documents.If it does, the rest of the PHP code, as well
   as the &quot;real&quot; PI end tag, will be treated as character data.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
parser

     

      
       A reference to the XML parser to set up processing instruction (PI) handler function.
      
     

    
    
     
handler

     

      
       handler is a string containing the name of a
       function that must exist when xml_parse() is called
       for parser.
      
      
       The function named by handler must accept
       three parameters:
       
        handler
         ( resource $parser
        , string $target
        , string $data
        )

       
parser

         

          
           The first parameter, parser, is a
           reference to the XML parser calling the handler.
          
         

        
        
         
target

         

          
           The second parameter, target, contains the PI
           target.
          
         

        
        
         
data

         

          
           The third parameter, data, contains the PI
           data.
          
         

        
       
       If a handler function is set to an empty string, or FALSE, the handler
       in question is disabled.
      
      Note: Instead of a function name, an
array containing an object reference and a method name can also be
supplied.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xml_set_start_namespace_decl_handler", "
   Set up start namespace declaration handler
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $parser
   , callable $handler
   )

  
   Set a handler to be called when a namespace is declared. Namespace
   declarations occur inside start tags. But the namespace declaration start
   handler is called before the start tag handler for each namespace declared
   in that start tag.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
parser

     

      
       A reference to the XML parser.
      
     

    
    
     
handler

     

      
       handler is a string containing the name of a
       function that must exist when xml_parse() is called
       for parser.
      
      
       The function named by handler must accept
       three parameters, and should return an integer value. If the
       value returned from the handler is FALSE (which it will be if no
       value is returned), the XML parser will stop parsing and
       xml_get_error_code() will return
       XML_ERROR_EXTERNAL_ENTITY_HANDLING.
       
        handler
         ( resource $parser
        , string $prefix
        , string $uri
        )

       
parser

         

          
           The first parameter, parser, is a
           reference to the XML parser calling the handler.
          
         

        
        
         
prefix

         

          
           The prefix is a string used to reference the namespace within an XML object.
          
         

        
        
         
uri

         

          
           Uniform Resource Identifier (URI) of namespace.
          
         

        
       
       If a handler function is set to an empty string, or FALSE, the handler
       in question is disabled.
      
      Note: Instead of a function name, an
array containing an object reference and a method name can also be
supplied.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xml_set_unparsed_entity_decl_handler", "
   Set up unparsed entity declaration handler
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $parser
   , callable $handler
   )

  
   Sets the unparsed entity declaration handler function for the XML parser
   parser.
  
  
   The handler will be called if the XML parser
   encounters an external entity declaration with an NDATA declaration, like
   the following:
   
name {publicId | systemId}
        NDATA notationName

   

  
  
   See » section 4.2.2 of
   the XML 1.0 spec for the definition of notation declared
   external entities.
   
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
parser

     

      
       A reference to the XML parser to set up unparsed entity declaration handler function.
      
     

    
    
     
handler

     

      
       handler is a string containing the name of a
       function that must exist when xml_parse() is called
       for parser.
      
      
       The function named by handler must accept six
       parameters:
       
        handler
         ( resource $parser
        , string $entity_name
        , string $base
        , string $system_id
        , string $public_id
        , string $notation_name
        )

       
parser

         

          
           The first parameter, parser, is a
           reference to the XML parser calling the
           handler.
          
         

        
        
         
entity_name

         

          
           The name of the entity that is about to be defined.
          
         

        
        
         
base

         

          
           This is the base for resolving the system identifier
           (systemId) of the external entity.Currently
           this parameter will always be set to an empty string.
          
         

        
        
         
system_id

         

          
           System identifier for the external entity.
          
         

        
        
         
public_id

         

           
           Public identifier for the external entity.
          
         

        
        
         
notation_name

         

           
           Name of the notation of this entity (see
           xml_set_notation_decl_handler()).
          
         

        
       
       If a handler function is set to an empty string, or FALSE, the handler
       in question is disabled.
      
      Note: Instead of a function name, an
array containing an object reference and a method name can also be
supplied.
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlrpc_decode", "Decodes XML into native PHP types
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( string $xml
   [, string $encoding = &quot;iso-8859-1&quot;
  ] )

  WarningThis function is
EXPERIMENTAL. The behaviour of this function, its name, and
surrounding documentation may change without notice in a future release of PHP.
This function should be used at your own risk.

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
xml

     

      
       XML response returned by XMLRPC method.
      
     

    
    
     
encoding

     

      
       Input encoding supported by iconv.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns either an array, or an integer, or a string, or a boolean according
   to the response returned by the XMLRPC method.
  
 " 
"xmlrpc_decode_request", "Decodes XML into native PHP types
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   mixed    ( string $xml
   , string &amp;$method
   [, string $encoding
  ] )

  WarningThis function is
EXPERIMENTAL. The behaviour of this function, its name, and
surrounding documentation may change without notice in a future release of PHP.
This function should be used at your own risk.

  WarningThis function is
currently not documented; only its argument list is available.

 " 
"xmlrpc_encode", "Generates XML for a PHP value
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( mixed $value
   )

  WarningThis function is
EXPERIMENTAL. The behaviour of this function, its name, and
surrounding documentation may change without notice in a future release of PHP.
This function should be used at your own risk.

  WarningThis function is
currently not documented; only its argument list is available.

 " 
"xmlrpc_encode_request", "Generates XML for a method request
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $method
   , mixed $params
   [, array $output_options
  ] )

  WarningThis function is
EXPERIMENTAL. The behaviour of this function, its name, and
surrounding documentation may change without notice in a future release of PHP.
This function should be used at your own risk.

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
method

     

      
       Name of the method to call.
      
     

    
    
     
params

     

      
       Method parameters compatible with method signature.
      
     

    
    
     
output_options

     

      
       Array specifying output options may contain (default values are
       emphasised):
       output_type: php, xml
        verbosity: no_white_space, newlines_only, pretty
        escaping: cdata, non-ascii, non-print, markup
          (may be a string with one value or an array with multiple values)
        version: simple, xmlrpc, soap 1.1, auto
        encoding: iso-8859-1, other character set supported by iconv
       

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a string containing the XML representation of the request.
  
 " 
"xmlrpc_get_type", "Gets xmlrpc type for a PHP value
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( mixed $value
   )

  WarningThis function is
EXPERIMENTAL. The behaviour of this function, its name, and
surrounding documentation may change without notice in a future release of PHP.
This function should be used at your own risk.

  
   This function is especially useful for base64 and datetime strings.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
value

     

      
       PHP value
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the XML-RPC type.
  
 " 
"xmlrpc_is_fault", "Determines if an array value represents an XMLRPC fault
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( array $arg
   )

  WarningThis function is
EXPERIMENTAL. The behaviour of this function, its name, and
surrounding documentation may change without notice in a future release of PHP.
This function should be used at your own risk.

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
arg

     

      
       Array returned by xmlrpc_decode().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE if the argument means fault, FALSE otherwise. Fault
   description is available in $arg[&quot;faultString&quot;], fault
   code is in $arg[&quot;faultCode&quot;].
  
 " 
"xmlrpc_parse_method_descriptions", "Decodes XML into a list of method descriptions
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   array    ( string $xml
   )

  WarningThis function is
EXPERIMENTAL. The behaviour of this function, its name, and
surrounding documentation may change without notice in a future release of PHP.
This function should be used at your own risk.

  WarningThis function is
currently not documented; only its argument list is available.

 " 
"xmlrpc_server_add_introspection_data", "Adds introspection documentation
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $server
   , array $desc
   )

  WarningThis function is
EXPERIMENTAL. The behaviour of this function, its name, and
surrounding documentation may change without notice in a future release of PHP.
This function should be used at your own risk.

  WarningThis function is
currently not documented; only its argument list is available.

 " 
"xmlrpc_server_call_method", "Parses XML requests and call methods
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $server
   , string $xml
   , mixed $user_data
   [, array $output_options
  ] )

  WarningThis function is
EXPERIMENTAL. The behaviour of this function, its name, and
surrounding documentation may change without notice in a future release of PHP.
This function should be used at your own risk.

  WarningThis function is
currently not documented; only its argument list is available.

 " 
"xmlrpc_server_create", "Creates an xmlrpc server
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( void
   )

  WarningThis function is
EXPERIMENTAL. The behaviour of this function, its name, and
surrounding documentation may change without notice in a future release of PHP.
This function should be used at your own risk.

  WarningThis function is
currently not documented; only its argument list is available.

 " 
"xmlrpc_server_destroy", "Destroys server resources
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $server
   )

  WarningThis function is
EXPERIMENTAL. The behaviour of this function, its name, and
surrounding documentation may change without notice in a future release of PHP.
This function should be used at your own risk.

  WarningThis function is
currently not documented; only its argument list is available.

 " 
"xmlrpc_server_register_introspection_callback", "Register a PHP function to generate documentation
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $server
   , string $function
   )

  WarningThis function is
EXPERIMENTAL. The behaviour of this function, its name, and
surrounding documentation may change without notice in a future release of PHP.
This function should be used at your own risk.

  WarningThis function is
currently not documented; only its argument list is available.

 " 
"xmlrpc_server_register_method", "Register a PHP function to resource method matching method_name
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $server
   , string $method_name
   , string $function
   )

  WarningThis function is
EXPERIMENTAL. The behaviour of this function, its name, and
surrounding documentation may change without notice in a future release of PHP.
This function should be used at your own risk.

  WarningThis function is
currently not documented; only its argument list is available.

 " 
"xmlrpc_set_type", "Sets xmlrpc type, base64 or datetime, for a PHP string value
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( string &amp;$value
   , string $type
   )

  
   Sets xmlrpc type, base64 or datetime, for a PHP string value.
  
  WarningThis function is
EXPERIMENTAL. The behaviour of this function, its name, and
surrounding documentation may change without notice in a future release of PHP.
This function should be used at your own risk.

 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
value

     

      
       Value to set the type
      
     

    
    
     
type

     

      
       'base64' or 'datetime'
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
   If successful, value is converted to an object.
  
 " 
"xmlwriter_end_attribute", "End attribute
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::endAttribute
    ( void
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   )

  
   Ends the current attribute.  
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_end_cdata", "End current CDATA
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::endCData
    ( void
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   )

  
   Ends the current CDATA section.  
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_end_comment", "Create end comment
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::endComment
    ( void
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   )

  
   Ends the current comment.  
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_end_document", "End current document
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::endDocument
    ( void
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   )

  
   Ends the current document.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_end_dtd", "End current DTD
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::endDTD
    ( void
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   )

  
   Ends the DTD of the document.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_end_dtd_attlist", "End current DTD AttList
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::endDTDAttlist
    ( void
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   )

  
   Ends the current DTD attribute list.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_end_dtd_element", "End current DTD element
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::endDTDElement
    ( void
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   )

  
   Ends the current DTD element.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_end_dtd_entity", "End current DTD Entity
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::endDTDEntity
    ( void
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   )

  
   Ends the current DTD entity.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_end_element", "End current element
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::endElement
    ( void
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   )

  
   Ends the current element.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_end_pi", "End current PI
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::endPI
    ( void
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   )

  
   Ends the current processing instruction.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_flush", "Flush current buffer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   mixed XMLWriter::flush
    ([ bool $empty = true
  ] )

  Procedural style
  
   mixed    ( resource $xmlwriter
   [, bool $empty = true
  ] )

  
   Flushes the current buffer.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

    
     
empty

     

      
       Whether to empty the buffer or not. Default is TRUE.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   If you opened the writer in memory, this function returns the generated XML buffer,
   Else, if using URI, this function will write the buffer and return the number of 
   written bytes.
  
 " 
"xmlwriter_full_end_element", "End current element
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::fullEndElement
    ( void
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   )

  
   End the current xml element. Writes an end tag even if the element is empty.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_open_memory", "Create new xmlwriter using memory for string output
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::openMemory
    ( void
   )

  Procedural style
  
   resource    ( void
   )

  
   Creates a new XMLWriter using memory for string output.  
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Object oriented style: Returns TRUE on success or FALSE on failure.
  
  
   Procedural style: Returns a new xmlwriter resource for later use with the
   xmlwriter functions on success, FALSE on error.
  
 " 
"xmlwriter_open_uri", "Create new xmlwriter using source uri for output
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::openURI
    ( string $uri
   )

  Procedural style
  
   resource    ( string $uri
   )

  
   Creates a new XMLWriter using 
   uri for the output.  
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
uri

     

      
       The URI of the resource for the output.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Object oriented style: Returns TRUE on success or FALSE on failure.
  
  
   Procedural style: Returns a new xmlwriter resource for later use with the
   xmlwriter functions on success, FALSE on error.
  
 " 
"xmlwriter_output_memory", "Returns current buffer
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   string XMLWriter::outputMemory
    ([ bool $flush = true
  ] )

  Procedural style
  
   string    ( resource $xmlwriter
   [, bool $flush = true
  ] )

  
   Returns the current buffer.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

    
     
flush

     

      
       Whether to flush the output buffer or not. Default is TRUE.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the current buffer as a string.
  
 " 
"xmlwriter_set_indent", "Toggle indentation on/off
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::setIndent
    ( bool $indent
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   , bool $indent
   )

  
   Toggles indentation on or off.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

    
     
indent

     

      
       Whether indentation is enabled.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_set_indent_string", "Set string used for indenting
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::setIndentString
    ( string $indentString
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   , string $indentString
   )

  
   Sets the string which will be used to indent each element/attribute of the
   resulting xml.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

    
     
indentString

     

      
       The indentation string.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_start_attribute", "Create start attribute
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::startAttribute
    ( string $name
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   , string $name
   )

  
   Starts an attribute.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

    
     
name

     

      
       The attribute name.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_start_attribute_ns", "Create start namespaced attribute
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::startAttributeNS
    ( string $prefix
   , string $name
   , string $uri
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   , string $prefix
   , string $name
   , string $uri
   )

  
   Starts a namespaced attribute.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

    
     
prefix

     

      
       The namespace prefix.
      
     

    
    
     
name

     

      
       The attribute name.
      
     

    
    
     
uri

     

      
       The namespace URI.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_start_cdata", "Create start CDATA tag
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::startCData
    ( void
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   )

  
   Starts a CDATA.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_start_comment", "Create start comment
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::startComment
    ( void
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   )

  
   Starts a comment.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_start_document", "Create document tag
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::startDocument
    ([ string $version = 1.0
   [, string $encoding = NULL
   [, string $standalone
  ]]] )

  Procedural style
  
   bool    ( resource $xmlwriter
   [, string $version = 1.0
   [, string $encoding = NULL
   [, string $standalone
  ]]] )

  
   Starts a document.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

    
     
version

     

      
       The version number of the document as part of the XML declaration. 
      
     

    
    
     
encoding

     

      
       The encoding of the document as part of the XML declaration.
      
     

    
    
     
standalone

     

      
       yes or no.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_start_dtd", "Create start DTD tag
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::startDTD
    ( string $qualifiedName
   [, string $publicId
   [, string $systemId
  ]] )

  Procedural style
  
   bool    ( resource $xmlwriter
   , string $qualifiedName
   [, string $publicId
   [, string $systemId
  ]] )

  
   Starts a DTD.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

    
     
qualifiedName

     

      
       The qualified name of the document type to create.
      
     

    
    
     
publicId

     

      
       The external subset public identifier.
      
     

    
    
     
systemId

     

      
       The external subset system identifier.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_start_dtd_attlist", "Create start DTD AttList
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::startDTDAttlist
    ( string $name
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   , string $name
   )

  
   Starts a DTD attribute list.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

    
     
name

     

      
       The attribute list name.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_start_dtd_element", "Create start DTD element
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::startDTDElement
    ( string $qualifiedName
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   , string $qualifiedName
   )

  
   Starts a DTD element.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

    
     
qualifiedName

     

      
       The qualified name of the document type to create.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_start_dtd_entity", "Create start DTD Entity
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::startDTDEntity
    ( string $name
   , bool $isparam
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   , string $name
   , bool $isparam
   )

  
   Starts a DTD entity.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

    
     
name

     

      
       The name of the entity.
      
     

    
    
     
isparam

     

      
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_start_element", "Create start element tag
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::startElement
    ( string $name
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   , string $name
   )

  
   Starts an element.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

    
     
name

     

      
       The element name.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_start_element_ns", "Create start namespaced element tag
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::startElementNS
    ( string $prefix
   , string $name
   , string $uri
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   , string $prefix
   , string $name
   , string $uri
   )

  
   Starts a namespaced element.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

    
     
prefix

     

      
       The namespace prefix.
      
     

    
    
     
name

     

      
       The element name.
      
     

    
    
     
uri

     

      
       The namespace URI.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_start_pi", "Create start PI tag
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::startPI
    ( string $target
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   , string $target
   )

  
   Starts a processing instruction tag.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

    
     
target

     

      
       The target of the processing instruction.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_text", "Write text
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::text
    ( string $content
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   , string $content
   )

  
   Writes a text.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

    
     
content

     

      
       The contents of the text.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_write_attribute", "Write full attribute
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::writeAttribute
    ( string $name
   , string $value
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   , string $name
   , string $value
   )

  
   Writes a full attribute.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

    
     
name

     

      
       The name of the attribute.
      
     

    
    
     
value

     

      
       The value of the attribute.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_write_attribute_ns", "Write full namespaced attribute
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::writeAttributeNS
    ( string $prefix
   , string $name
   , string $uri
   , string $content
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   , string $prefix
   , string $name
   , string $uri
   , string $content
   )

  
   Writes a full namespaced attribute.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

    
     
prefix

     

      
       The namespace prefix.
      
     

    
    
     
name

     

      
       The attribute name.
      
     

    
    
     
uri

     

      
       The namespace URI.
      
     

    
    
     
content

     

      
       The attribute value.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_write_cdata", "Write full CDATA tag
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::writeCData
    ( string $content
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   , string $content
   )

  
   Writes a full CDATA.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

    
     
content

     

      
       The contents of the CDATA.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_write_comment", "Write full comment tag
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::writeComment
    ( string $content
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   , string $content
   )

  
   Writes a full comment.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

    
     
content

     

      
       The contents of the comment.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_write_dtd", "Write full DTD tag
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::writeDTD
    ( string $name
   [, string $publicId
   [, string $systemId
   [, string $subset
  ]]] )

  Procedural style
  
   bool    ( resource $xmlwriter
   , string $name
   [, string $publicId
   [, string $systemId
   [, string $subset
  ]]] )

  
   Writes a full DTD.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

    
     
name

     

      
       The DTD name.
      
     

    
    
     
publicId

     

      
       The external subset public identifier.
      
     

    
    
     
systemId

     

      
       The external subset system identifier.
      
     

    
    
     
subset

     

      
       The content of the DTD.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_write_dtd_attlist", "Write full DTD AttList tag
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::writeDTDAttlist
    ( string $name
   , string $content
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   , string $name
   , string $content
   )

  
   Writes a DTD attribute list.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

    
     
name

     

      
       The name of the DTD attribute list.
      
     

    
    
     
content

     

      
       The content of the DTD attribute list.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_write_dtd_element", "Write full DTD element tag
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::writeDTDElement
    ( string $name
   , string $content
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   , string $name
   , string $content
   )

  
   Writes a full DTD element.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

    
     
name

     

      
       The name of the DTD element.
      
     

    
    
     
content

     

      
       The content of the element.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_write_dtd_entity", "Write full DTD Entity tag
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::writeDTDEntity
    ( string $name
   , string $content
   , bool $pe
   , string $pubid
   , string $sysid
   , string $ndataid
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   , string $name
   , string $content
   , bool $pe
   , string $pubid
   , string $sysid
   , string $ndataid
   )

  
   Writes a full DTD entity.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

    
     
name

     

      
       The name of the entity.
      
     

    
    
     
content

     

      
       The content of the entity.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_write_element", "Write full element tag
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::writeElement
    ( string $name
   [, string $content
  ] )

  Procedural style
  
   bool    ( resource $xmlwriter
   , string $name
   [, string $content
  ] )

  
   Writes a full element tag.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

    
     
name

     

      
       The element name.
      
     

    
    
     
content

     

      
       The element contents.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_write_element_ns", "Write full namespaced element tag
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::writeElementNS
    ( string $prefix
   , string $name
   , string $uri
   [, string $content
  ] )

  Procedural style
  
   bool    ( resource $xmlwriter
   , string $prefix
   , string $name
   , string $uri
   [, string $content
  ] )

  
   Writes a full namespaced element tag.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

    
     
prefix

     

      
       The namespace prefix.
      
     

    
    
     
name

     

      
       The element name.
      
     

    
    
     
uri

     

      
       The namespace URI.
      
     

    
    
     
content

     

      
       The element contents.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_write_pi", "Writes a PI
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::writePI
    ( string $target
   , string $content
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   , string $target
   , string $content
   )

  
   Writes a processing instruction.  
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

    
     
target

     

      
       The target of the processing instruction.
      
     

    
    
     
content

     

      
       The content of the processing instruction.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"xmlwriter_write_raw", "Write a raw XML text
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  Object oriented style
  
   bool XMLWriter::writeRaw
    ( string $content
   )

  Procedural style
  
   bool    ( resource $xmlwriter
   , string $content
   )

  
   Writes a raw xml text.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   

xmlwriter

Only for procedural calls.
The XMLWriter resource that is being modified. This resource comes from a call to xmlwriter_open_uri() or xmlwriter_open_memory().

    
     
content

     

      
       The text string to write.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"zend_version", "Gets the version of the current Zend engine
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( void
   )

  
   Returns a string containing the version of the currently running
   Zend Engine.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the Zend Engine version number, as a string.
  
 " 
"zip_close", "Close a ZIP file archive
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   void    ( resource $zip
   )

  
   Closes the given ZIP file archive.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
zip

     

      
       A ZIP file previously opened with zip_open().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   No value is returned.
  
 " 
"zip_entry_close", "Close a directory entry
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool    ( resource $zip_entry
   )

  
   Closes the specified directory entry.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
zip_entry

     

      
       A directory entry previously opened zip_entry_open().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
 " 
"zip_entry_compressedsize", "Retrieve the compressed size of a directory entry
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $zip_entry
   )

  
   Returns the compressed size of the specified directory entry.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
zip_entry

     

      
       A directory entry returned by zip_read().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The compressed size.
  
 " 
"zip_entry_compressionmethod", "Retrieve the compression method of a directory entry
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $zip_entry
   )

  
   Returns the compression method of the directory entry specified
   by zip_entry.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
zip_entry

     

      
       A directory entry returned by zip_read().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The compression method.
  
 " 
"zip_entry_filesize", "Retrieve the actual file size of a directory entry
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   int    ( resource $zip_entry
   )

  
   Returns the actual size of the specified directory entry.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
zip_entry

     

      
       A directory entry returned by zip_read().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The size of the directory entry.
  
 " 
"zip_entry_name", "Retrieve the name of a directory entry
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $zip_entry
   )

  
   Returns the name of the specified directory entry.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
zip_entry

     

      
       A directory entry returned by zip_read().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   The name of the directory entry.
  
 " 
"zip_entry_open", "Open a directory entry for reading
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   bool     
    ( resource $zip
   , resource $zip_entry
   [, string $mode
  ] )

  
   Opens a directory entry in a zip file for reading.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
zip

     

      
       A valid resource handle returned by zip_open().
      
     

    
    
     
zip_entry

     

      
       A directory entry returned by zip_read().
      
     

    
    
     
mode

     

      
       Any of the modes specified in the documentation of
       fopen().
      
      Note: 
       
        Currently, mode is ignored and is always
        &quot;rb&quot;. This is due to the fact that zip support
        in PHP is read only access.
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns TRUE on success or FALSE on failure.
  
  Note: 
   
    Unlike fopen() and other similar functions,
    the return value of) only
    indicates the result of the operation and is not needed for
    reading or closing the directory entry.
   
  
 " 
"zip_entry_read", "Read from an open directory entry
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( resource $zip_entry
   [, int $length = 1024
  ] )

  
   Reads from an open directory entry.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
zip_entry

     

      
       A directory entry returned by zip_read().
      
     

    
    
     
length

     

      
       The number of bytes to return.
      
      Note: 
       
        This should be the uncompressed length you wish to read.
       
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns the data read, empty string on end of a file, or FALSE on error.
  
 " 
"zip_open", "Open a ZIP file archive
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( string $filename
   )

  
   Opens a new zip archive for reading. 
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
filename

     

      
       The file name of the ZIP archive to open.
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a resource handle for later use with
   zip_read() and zip_close()
   or returns the number of error if filename does not
   exist or in case of other error.
  
 " 
"zip_read", "Read next entry in a ZIP file archive
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   resource    ( resource $zip
   )

  
   Reads the next entry in a zip file archive.
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
   
zip

     

      
       A ZIP file previously opened with zip_open().
      
     

    
   
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Returns a directory entry resource for later use with the
   zip_entry_... functions, or FALSE if
   there are no more entries to read, or an error code if an error
   occurred.
  
 " 
"zlib_decode", "Uncompress any raw/gzip/zlib encoded data
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $data
   [, string $max_decoded_len
  ] )

  
   Uncompress any raw/gzip/zlib encoded data.
  

  WarningThis function is
currently not documented; only its argument list is available.


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
data

    

     
      
     
    

   
   
    
max_decoded_len

    

     
      
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  

  
 " 
"zlib_encode", "Compress data with the specified encoding
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( string $data
   , string $encoding
   [, string $level = -1
  ] )

  
   Compress data with the specified encoding.
  

  WarningThis function is
currently not documented; only its argument list is available.


 
  </pre><div style='font-weight:bold;margin-top:16px;'>Parameters</div><pre>
  
data

    

     
      
     
    

   
   
    
encoding

    

     
      
     
    

   
   
    
level

    

     
      
     
    

   
  
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  

  
 " 
"zlib_get_coding_type", "Returns the coding type used for output compression
  </pre><div style='font-weight:bold;margin-top:16px;'>Description</div><pre>
  
   string    ( void
   )

  
   Returns the coding type used for output compression.  
  
 
  </pre><div style='font-weight:bold;margin-top:16px;'>Return Values</div><pre>
  
   Possible return values are gzip, deflate,
   or FALSE.
  
 " 
